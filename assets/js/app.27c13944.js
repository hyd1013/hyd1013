"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[143],{6396:(n,s,a)=>{a.d(s,{g:()=>m});var t=a(7478),p=a(5748),e=a(1598),l=a(55),o=a(1843),c=a(8580),r=a(9146),i=a(881),u=a(1301);const k=(0,a(7621).vW)((({app:n,router:s,siteData:a})=>{})),m=[t.Z,p.Z,e.Z,l.Z,o.Z,c.Z,r.Z,i.Z,u.Z,k]},9947:(n,s,a)=>{a.d(s,{p:()=>l});var t=a(3051),p=a(8805),e=a(9796);const l=[t.Z,p.Z,e.Z]},4611:(n,s,a)=>{a.d(s,{l:()=>l});var t=a(1263),p=a(6243),e=a(7593);const l=[t.Z,p.Z,e.Z]},4150:(n,s,a)=>{a.d(s,{Z:()=>p});var t=a(6252);const p={404:(0,t.RC)((()=>Promise.all([a.e(973),a.e(431)]).then(a.bind(a,2431)))),Layout:(0,t.RC)((()=>a.e(887).then(a.bind(a,8887))))}},6056:(n,s,a)=>{a.d(s,{b:()=>p});var t=a(6252);const p={"v-6c26f442":(0,t.RC)((()=>a.e(284).then(a.bind(a,5294)))),"v-435885cf":(0,t.RC)((()=>a.e(253).then(a.bind(a,5555)))),"v-13c9aef5":(0,t.RC)((()=>a.e(215).then(a.bind(a,830)))),"v-57ee40a5":(0,t.RC)((()=>a.e(289).then(a.bind(a,4664)))),"v-3706649a":(0,t.RC)((()=>a.e(88).then(a.bind(a,8109)))),"v-8daa1a0e":(0,t.RC)((()=>a.e(509).then(a.bind(a,1829)))),"v-74bc627b":(0,t.RC)((()=>a.e(5).then(a.bind(a,9085)))),"v-14f724bf":(0,t.RC)((()=>a.e(69).then(a.bind(a,8784)))),"v-14e6501c":(0,t.RC)((()=>a.e(713).then(a.bind(a,779)))),"v-744d024e":(0,t.RC)((()=>a.e(146).then(a.bind(a,7034)))),"v-705c21a6":(0,t.RC)((()=>a.e(888).then(a.bind(a,8099)))),"v-6629f178":(0,t.RC)((()=>a.e(158).then(a.bind(a,7984)))),"v-f693f690":(0,t.RC)((()=>a.e(516).then(a.bind(a,2209)))),"v-e2acc714":(0,t.RC)((()=>a.e(356).then(a.bind(a,5506)))),"v-4382d077":(0,t.RC)((()=>a.e(740).then(a.bind(a,7072)))),"v-3279cf61":(0,t.RC)((()=>a.e(118).then(a.bind(a,1973)))),"v-3c506944":(0,t.RC)((()=>a.e(219).then(a.bind(a,5455))))}},9706:(n,s,a)=>{a.d(s,{T:()=>t});const t={"v-6c26f442":()=>a.e(284).then(a.bind(a,5933)).then((({data:n})=>n)),"v-435885cf":()=>a.e(253).then(a.bind(a,9973)).then((({data:n})=>n)),"v-13c9aef5":()=>a.e(215).then(a.bind(a,1101)).then((({data:n})=>n)),"v-57ee40a5":()=>a.e(289).then(a.bind(a,8586)).then((({data:n})=>n)),"v-3706649a":()=>a.e(88).then(a.bind(a,1801)).then((({data:n})=>n)),"v-8daa1a0e":()=>a.e(509).then(a.bind(a,6464)).then((({data:n})=>n)),"v-74bc627b":()=>a.e(5).then(a.bind(a,2988)).then((({data:n})=>n)),"v-14f724bf":()=>a.e(69).then(a.bind(a,4770)).then((({data:n})=>n)),"v-14e6501c":()=>a.e(713).then(a.bind(a,4502)).then((({data:n})=>n)),"v-744d024e":()=>a.e(146).then(a.bind(a,6041)).then((({data:n})=>n)),"v-705c21a6":()=>a.e(888).then(a.bind(a,6762)).then((({data:n})=>n)),"v-6629f178":()=>a.e(158).then(a.bind(a,4141)).then((({data:n})=>n)),"v-f693f690":()=>a.e(516).then(a.bind(a,1442)).then((({data:n})=>n)),"v-e2acc714":()=>a.e(356).then(a.bind(a,6790)).then((({data:n})=>n)),"v-4382d077":()=>a.e(740).then(a.bind(a,7629)).then((({data:n})=>n)),"v-3279cf61":()=>a.e(118).then(a.bind(a,8588)).then((({data:n})=>n)),"v-3c506944":()=>a.e(219).then(a.bind(a,3350)).then((({data:n})=>n))}},4634:(n,s,a)=>{a.d(s,{g:()=>p});var t=a(4802);const p=[["v-6c26f442","/maven/Maven%E8%AF%A6%E8%A7%A3.html",{},["/maven/Maven详解.html","/maven/Maven%E8%AF%A6%E8%A7%A3","/maven/Maven详解.md","/maven/Maven%E8%AF%A6%E8%A7%A3.md"]],["v-435885cf","/mybatis/Mybatis%E8%AF%A6%E8%A7%A3.html",{},["/mybatis/Mybatis详解.html","/mybatis/Mybatis%E8%AF%A6%E8%A7%A3","/mybatis/Mybatis详解.md","/mybatis/Mybatis%E8%AF%A6%E8%A7%A3.md"]],["v-13c9aef5","/vue/vue.html",{},["/vue/vue","/vue/vue.md"]],["v-57ee40a5","/vue/Vuex.html",{},["/vue/Vuex","/vue/Vuex.md"]],["v-3706649a","/404.html",{},["/404"]],["v-8daa1a0e","/",{},["/index.html"]],["v-74bc627b","/about/",{},["/about/index.html"]],["v-14f724bf","/mood/",{},["/mood/index.html"]],["v-14e6501c","/link/",{},["/link/index.html"]],["v-744d024e","/tag/",{},["/tag/index.html"]],["v-705c21a6","/archive/",{},["/archive/index.html"]],["v-6629f178","/aurora-coze/",{},["/aurora-coze/index.html"]],["v-f693f690","/aurora-register/",{},["/aurora-register/index.html"]],["v-e2acc714","/photo/",{},["/photo/index.html"]],["v-4382d077","/next-mood/",{},["/next-mood/index.html"]],["v-3279cf61","/aurora-archive/",{},["/aurora-archive/index.html"]],["v-3c506944","/aurora-music/",{},["/aurora-music/index.html"]]].reduce(((n,[s,a,p,e])=>(n.push({name:s,path:a,component:t.Y,meta:p},...e.map((n=>({path:n,redirect:a})))),n)),[{name:"404",path:"/:catchAll(.*)",component:t.Y}])},5472:(n,s,a)=>{a.d(s,{D:()=>t});const t=[{title:"Maven详解(基础到高级)(入门到入土)",headers:[{level:2,title:"一、Maven简介",slug:"一、maven简介",children:[{level:3,title:"1、maven是什么？",slug:"_1、maven是什么",children:[]},{level:3,title:"2、maven的作用",slug:"_2、maven的作用",children:[]}]},{level:2,title:"二、下载与安装",slug:"二、下载与安装",children:[{level:3,title:"1、maven官网下载",slug:"_1、maven官网下载",children:[]},{level:3,title:"2、直接下载（推荐）",slug:"_2、直接下载-推荐",children:[]},{level:3,title:"3、安装与配置",slug:"_3、安装与配置",children:[]},{level:3,title:"4、配置本地仓库",slug:"_4、配置本地仓库",children:[]},{level:3,title:"5、配置阿里云的镜像仓库",slug:"_5、配置阿里云的镜像仓库",children:[]},{level:3,title:"6、配置maven运行的java环境",slug:"_6、配置maven运行的java环境",children:[]},{level:3,title:"7、配置完成后，预下载",slug:"_7、配置完成后-预下载",children:[]}]},{level:2,title:"三、基础概念",slug:"三、基础概念",children:[{level:3,title:"1、仓库",slug:"_1、仓库",children:[]},{level:3,title:"2、坐标",slug:"_2、坐标",children:[]}]},{level:2,title:"四、创建一个maven项目（使用IDEA2022.2）",slug:"四、创建一个maven项目-使用idea2022-2",children:[{level:3,title:"1、工程目录结构",slug:"_1、工程目录结构",children:[]},{level:3,title:"2、Maven构建项目命令",slug:"_2、maven构建项目命令",children:[]},{level:3,title:"3、在IDEA中配置maven",slug:"_3、在idea中配置maven",children:[]}]},{level:2,title:"五、依赖管理",slug:"五、依赖管理",children:[{level:3,title:"1、配置依赖",slug:"_1、配置依赖",children:[]},{level:3,title:"2、依赖传递",slug:"_2、依赖传递",children:[]},{level:3,title:"3、依赖传递冲突问题的优先顺序",slug:"_3、依赖传递冲突问题的优先顺序",children:[]},{level:3,title:"4、可选依赖",slug:"_4、可选依赖",children:[]},{level:3,title:"5、排除依赖",slug:"_5、排除依赖",children:[]},{level:3,title:"6、依赖范围",slug:"_6、依赖范围",children:[]},{level:3,title:"7、依赖范围传递性",slug:"_7、依赖范围传递性",children:[]}]},{level:2,title:"六、生命周期",slug:"六、生命周期",children:[{level:3,title:"1、项目构建生命周期",slug:"_1、项目构建生命周期",children:[]},{level:3,title:"2、clean生命周期",slug:"_2、clean生命周期",children:[]},{level:3,title:"3、default构建生命周期",slug:"_3、default构建生命周期",children:[]},{level:3,title:"4、site构建生命周期",slug:"_4、site构建生命周期",children:[]}]},{level:2,title:"七、插件",slug:"七、插件",children:[]}],path:"/maven/Maven%E8%AF%A6%E8%A7%A3.html",pathLocale:"/",extraFields:[]},{title:"Mybatis详解",headers:[{level:2,title:"Mybatis简介",slug:"mybatis简介",children:[{level:3,title:"MyBatis历史",slug:"mybatis历史",children:[]},{level:3,title:"MyBatis特性",slug:"mybatis特性",children:[]},{level:3,title:"MyBatis下载",slug:"mybatis下载",children:[]},{level:3,title:"和其它持久化层技术对比",slug:"和其它持久化层技术对比",children:[]}]},{level:2,title:"搭建MyBatis",slug:"搭建mybatis",children:[{level:3,title:"创建数据库",slug:"创建数据库",children:[]},{level:3,title:"创建maven工程",slug:"创建maven工程",children:[]},{level:3,title:"创建MyBatis的核心配置文件",slug:"创建mybatis的核心配置文件",children:[]},{level:3,title:"创建mapper接口",slug:"创建mapper接口",children:[]},{level:3,title:"创建MyBatis的映射文件",slug:"创建mybatis的映射文件",children:[]},{level:3,title:"注册（引入）映射文件",slug:"注册-引入-映射文件",children:[]},{level:3,title:"通过Junit测试功能(main方法也可以)",slug:"通过junit测试功能-main方法也可以",children:[]}]},{level:2,title:"核心配置文件详解",slug:"核心配置文件详解",children:[]},{level:2,title:"默认的类型别名",slug:"默认的类型别名",children:[{level:3,title:"基本数据类型映射",slug:"基本数据类型映射",children:[]},{level:3,title:"封装类型映射",slug:"封装类型映射",children:[]}]},{level:2,title:"MyBatis的增删改查",slug:"mybatis的增删改查",children:[{level:3,title:"1、添加",slug:"_1、添加",children:[]},{level:3,title:"2、删除",slug:"_2、删除",children:[]},{level:3,title:"3、修改",slug:"_3、修改",children:[]},{level:3,title:"4、查询",slug:"_4、查询",children:[]}]},{level:2,title:"MyBatis获取参数值的两种方式（重点）",slug:"mybatis获取参数值的两种方式-重点",children:[{level:3,title:"单个字面量类型的参数",slug:"单个字面量类型的参数",children:[]},{level:3,title:"多个字面量类型的参数",slug:"多个字面量类型的参数",children:[]}]}],path:"/mybatis/Mybatis%E8%AF%A6%E8%A7%A3.html",pathLocale:"/",extraFields:[]},{title:"Vue基础",headers:[{level:3,title:"vue技术栈",slug:"vue技术栈",children:[]},{level:3,title:"解决什么问题",slug:"解决什么问题",children:[]},{level:2,title:"1.安装",slug:"_1-安装",children:[{level:3,title:"VUE初体验",slug:"vue初体验",children:[]}]},{level:2,title:"2.Vue实例",slug:"_2-vue实例",children:[{level:3,title:"基本概念",slug:"基本概念",children:[]},{level:3,title:"创建",slug:"创建",children:[]},{level:3,title:"数据与方法",slug:"数据与方法",children:[]},{level:3,title:"生命周期钩子",slug:"生命周期钩子",children:[]}]},{level:2,title:"3.指令",slug:"_3-指令",children:[{level:3,title:"指令概念",slug:"指令概念",children:[]}]},{level:2,title:"4.过滤器",slug:"_4-过滤器",children:[{level:3,title:"作用",slug:"作用-9",children:[]},{level:3,title:"适用场景",slug:"适用场景-1",children:[]},{level:3,title:"语法",slug:"语法-1",children:[]},{level:3,title:"例子",slug:"例子",children:[]}]},{level:2,title:"5.计算属性",slug:"_5-计算属性",children:[]},{level:2,title:"6.侦听器",slug:"_6-侦听器",children:[]},{level:2,title:"7.Vue组件",slug:"_7-vue组件",children:[{level:3,title:"7-1.组件的定义",slug:"_7-1-组件的定义",children:[]},{level:3,title:"7-2.组件中的结构",slug:"_7-2-组件中的结构",children:[]},{level:3,title:"7-3.组件中的data只能是一个function",slug:"_7-3-组件中的data只能是一个function",children:[]},{level:3,title:"7-4.父组件向子组件传值(子组件使用父组件的数据)",slug:"_7-4-父组件向子组件传值-子组件使用父组件的数据",children:[]},{level:3,title:"7-5.子组件调用父组件的方法(父组件的方法传递给子组件)",slug:"_7-5-子组件调用父组件的方法-父组件的方法传递给子组件",children:[]},{level:3,title:"7-6.子组件调用父组件方法的时候传参",slug:"_7-6-子组件调用父组件方法的时候传参",children:[]},{level:3,title:"7-7.兄弟组件之间的通信",slug:"_7-7-兄弟组件之间的通信",children:[]},{level:3,title:"7-8.采用v-if来实现不同组件的切换",slug:"_7-8-采用v-if来实现不同组件的切换",children:[]},{level:3,title:"7-9.动态组件",slug:"_7-9-动态组件",children:[]},{level:3,title:"7-10.插槽",slug:"_7-10-插槽",children:[]},{level:3,title:"7-11.组件的嵌套",slug:"_7-11-组件的嵌套",children:[]},{level:3,title:"7-12.组件复用案例：购物车",slug:"_7-12-组件复用案例-购物车",children:[]}]},{level:2,title:"8.VUE路由",slug:"_8-vue路由",children:[{level:3,title:"8-0.路由原理",slug:"_8-0-路由原理",children:[]},{level:3,title:"8-1.路由概述",slug:"_8-1-路由概述",children:[]},{level:3,title:"8-2.定义一个基本的路由",slug:"_8-2-定义一个基本的路由",children:[]},{level:3,title:"8-3.路由重定向",slug:"_8-3-路由重定向",children:[]},{level:3,title:"8-4.编程式导航",slug:"_8-4-编程式导航",children:[]},{level:3,title:"8-5.路由传参",slug:"_8-5-路由传参",children:[]},{level:3,title:"8-6.嵌套路由",slug:"_8-6-嵌套路由",children:[]},{level:3,title:"8-7.命名路由",slug:"_8-7-命名路由",children:[]},{level:3,title:"8-8.命名视图",slug:"_8-8-命名视图",children:[]},{level:3,title:"8-9.路由中监视当前路由的路径",slug:"_8-9-路由中监视当前路由的路径",children:[]}]},{level:2,title:"9.前端工程化",slug:"_9-前端工程化",children:[{level:3,title:"各种方式搭建脚手架",slug:"各种方式搭建脚手架",children:[]},{level:3,title:"vue脚手架目录说明",slug:"vue脚手架目录说明",children:[]},{level:3,title:"9-0.项目基础配置",slug:"_9-0-项目基础配置",children:[]},{level:3,title:"9-1.导入less",slug:"_9-1-导入less",children:[]},{level:3,title:"9-2.导入element",slug:"_9-2-导入element",children:[]},{level:3,title:"9-3.两种不同的组件配置",slug:"_9-3-两种不同的组件配置",children:[]},{level:3,title:"9-4.较为全面的路由配置",slug:"_9-4-较为全面的路由配置",children:[]}]}],path:"/vue/vue.html",pathLocale:"/",extraFields:[]},{title:"Vuex",headers:[{level:2,title:"1.概述",slug:"_1-概述",children:[{level:3,title:"1-0.回顾组件之间共享数据的方式",slug:"_1-0-回顾组件之间共享数据的方式",children:[]},{level:3,title:"1-1.Vuex是什么",slug:"_1-1-vuex是什么",children:[]},{level:3,title:"1-2.使用Vuex统一管理状态的好处",slug:"_1-2-使用vuex统一管理状态的好处",children:[]},{level:3,title:"1-3.Vuex中适合储存什么",slug:"_1-3-vuex中适合储存什么",children:[]}]},{level:2,title:"2.初识Vuex",slug:"_2-初识vuex",children:[{level:3,title:"2-1.创建项目",slug:"_2-1-创建项目",children:[]},{level:3,title:"2-2.使用webstorm打开项目",slug:"_2-2-使用webstorm打开项目",children:[]},{level:3,title:"2-3.删除无关页面about",slug:"_2-3-删除无关页面about",children:[]},{level:3,title:"2-4.新增两个页面",slug:"_2-4-新增两个页面",children:[]},{level:3,title:"2-5.state",slug:"_2-5-state",children:[]},{level:3,title:"2-6.mutations",slug:"_2-6-mutations",children:[]},{level:3,title:"2-7.actions",slug:"_2-7-actions",children:[]},{level:3,title:"2-8.getter",slug:"_2-8-getter",children:[]}]}],path:"/vue/Vuex.html",pathLocale:"/",extraFields:[]},{title:"",headers:[],path:"/404.html",pathLocale:"/",extraFields:[]},{title:"",headers:[],path:"/",pathLocale:"/",extraFields:[]},{title:"",headers:[],path:"/about/",pathLocale:"/",extraFields:[]},{title:"",headers:[],path:"/mood/",pathLocale:"/",extraFields:[]},{title:"",headers:[],path:"/link/",pathLocale:"/",extraFields:[]},{title:"",headers:[],path:"/tag/",pathLocale:"/",extraFields:[]},{title:"",headers:[],path:"/archive/",pathLocale:"/",extraFields:[]},{title:"",headers:[],path:"/aurora-coze/",pathLocale:"/",extraFields:[]},{title:"",headers:[],path:"/aurora-register/",pathLocale:"/",extraFields:[]},{title:"",headers:[],path:"/photo/",pathLocale:"/",extraFields:[]},{title:"",headers:[],path:"/next-mood/",pathLocale:"/",extraFields:[]},{title:"",headers:[],path:"/aurora-archive/",pathLocale:"/",extraFields:[]},{title:"",headers:[],path:"/aurora-music/",pathLocale:"/",extraFields:[]}]},5220:(n,s,a)=>{a.d(s,{H:()=>t});const t={base:"/",lang:"zh-CN",title:"信仰的个人博客",description:"",head:[["script",{src:"https://at.alicdn.com/t/font_2849934_v6y652peian.js"}],["link",{href:"/avatar.png",rel:"icon"}],["link",{rel:"stylesheet",type:"text/css",href:"//at.alicdn.com/t/font_2932340_r7zitafg82.css"}]],locales:{}}},2232:(n,s,a)=>{a.d(s,{f:()=>t});const t={navbar:[{text:"标签",link:"/tag"},{text:"时间轴",link:"/archive"},{text:"友情链接",link:"/link",iconClass:"aurora-navbar-guide"},{text:"GitHub",link:"https://github.com/hyd1013",iconClass:"aurora-navbar-github1"}],darkMode:!1,repo:"https://github.com/hyd1013/",repoIconClass:"aurora-navbar-github",docsRepo:"https://github.com/hyd1013/aurora-docs",githubActions:!1,docsBranch:"main",repoLabel:"Aurora-theme",editLink:!0,editLinkText:"edit",lastUpdated:!0,lastUpdatedText:"lastTime",logoColor:"#2c3e50",showFont:"",heroImg:"/avatar.jpg",logo:"/avatar.png",lazyLoadingImg:"/ljz.gif",homePageLazyLoadingImg:"/ljz.gif",customRandomSay:!1,customRandomValue:"Vuepress-theme-Aurora",socials:[{aHref:"tencent://message/?uin=179489797",isHome:!0,show:!0,sidebar:!0,symbol:"#icon-qq"},{aHref:"javascript:void(0);",showImgSrc:"/wechat.jpg",isHome:!0,show:!0,symbol:"#icon-weixin",sidebar:!0},{aHref:"https://github.com/hyd1013/",isHome:!0,show:!0,sidebar:!0,symbol:"#icon-github-fill"},{aHref:"https://stackoverflow.com/",isHome:!0,show:!0,symbol:"#icon-stackoverflow",sidebar:!0},{aHref:"https://space.bilibili.com/298816326",isHome:!0,show:!0,sidebar:!0,symbol:"#icon-bilibili-1"},{aHref:"https://music.163.com/#/user/home?id=1411050784",isHome:!0,show:!0,symbol:"#icon-wangyiyunyinle",sidebar:!0},{aHref:"mailto:179489797@qq.com",isHome:!0,show:!0,sidebar:!0,symbol:"#icon-email"}],logoTitle:"信仰的个人博客",headTitle:"信仰的个人博客",description:"这是一个记录学习的地方",keyword:"Java,后台开发,前端开发,信仰的个人博客,程序员,Vue,JavaScript",slideTime:3e5,randomSaw:"https://international.v1.hitokoto.cn/?c=b&max_length=45",about:[{bar:!1,title:"我?",describe:["这是关于页面支持html<a href='https://blog.cco.vin' target='_blank'>这是一个标签</a>","目前是一名大三学生,CS专业,坐标西南边陲","喜欢安静,不喜社交","喜欢听音乐,什么类型都可","喜欢技术,coding","目前正在学习java后端",'最喜欢的电影是"忠犬八公的故事",梦想以后独居也能有一只"Hachi"',"主题是我自己开发的，前端太菜了，如果有bug，希望大家多多包涵`Σ(￣□￣||)` ","有点懒","目前除了编程没有什么兴趣爱好","正在追的番有《百妖谱》,《致不灭的你》,《少年歌行》,《鬼灭之刃》,《关于我转生变成史莱姆这档事》...","喜欢小说，喜欢的作者是--十月流年，最喜欢的小说《至尊修罗》,《一念永恒》,《星辰变》"],tag:["coding","社恐","番剧","电影","安静","音乐","小说","宅","懒"],showTag:!0},{bar:!1,title:"大三规划",describe:["做项目","软考二级","英语四级","想找实习","复习数据结构","驾照","做点什么有意义的事"],tag:["大家加油呀`Σ(￣□￣||)` ..."],showTag:!0},{bar:!1,title:"未来规划",describe:["后端工程师","赚money"],tag:["忘记过去，展望未来"],showTag:!0},{bar:!0,title:"技  能",describe:[{name:"java",score:70},{name:"HTML5",score:87},{name:"javascript",score:82},{name:"css",score:73},{name:"python",score:50},{name:"redis",score:59},{name:"mysql",score:82},{name:"vue",score:60},{name:"spring",score:71},{name:"springMVC",score:77},{name:"springBoot",score:71}],showTag:!1},{showTag:!1,bar:!0,title:"掌握框架",describe:[{name:"spring",score:79},{name:"springMVC",score:81},{name:"springBoot",score:82},{name:"mybatis",score:82},{name:"vue",score:60},{name:"dubbo",score:61}]},{bar:!0,showTag:!1,title:"掌握技能",describe:[{name:"jetbrains",score:75},{name:"linux",score:68},{name:"git",score:78},{name:"Ctrl C V",score:100}]},{title:"关于主题",describe:["theme-ccds主题是我自己独立开发，是一款基于vuepress，对默认主题进行了大量修改，我以前使用的是wordpress的博客主题，但是我对PHP不了解，想改成自己想要的主题，太难了，最近在学vue，正好看到可以使用vuepress来搭建 博客，就将默认主题改成现在这个样，并且喜欢vuepress的最主要原因是，它可以 直接将本地的markdown文档进行编译部署，我原来博客，我记了几个月的笔记，不太想再慢慢从本地复制到WordPress进行发布，以至于博客几个月没有发布文章了，虽然有技术可以解决，但还是喜欢vuepress，简直是懒癌福音，如果你喜欢的话，可以在我的GitHub进行下载，使用文档可以查看https://aurora.xcye.xyz，该主题已将所有的配置进行抽离，你现在看到的所有信息，都抽离在了一个配置文件中，但是目前还并不能做到开箱即用，如果使用的人多了，我可以进行修改，并且我自己也写了几个组件，包括文章页面看到的顶部图片，友情链接，海报分享功能等等 ，可以在你想使用的地方，直接使用这些组件就可以，该主题我加入了vuex，对前端不太了解，有很多css不对的地方，请大家多多包涵，Thanks♪(･ω･)ﾉ"]},{bar:!1,title:"更新日志",describe:["开发永不止步......","2021.9.12 增加相册功能，解决已知bug","2021.9.9 增加海报分享功能","2021.9.5 重新修改文章SEO自动配置，使用新规则，解决从tag页面进入文章页面，懒加载失效问题","2021.9.4 重新初始化仓库","2.21.8.10 -- 2021.9 主题开发"],tag:["想求个star`(⌒▽⌒)`"],showTag:!0},{title:"主题后续计划及闲话",bar:!1,tag:[],showTag:!1,describe:["为说说页面增加随时发布，随时修改功能","增加每日计划打卡功能"]}],randomColor:["#ffcad4","#d8e2dc","#8d99ae","#b8f2e6","#84c7d0","#aed9e0","#00b4d8","#caf0f8","#fbc4ab","#fdc5f5","#84dcc6","#a9def9","#fcf6bd","#f0a6ca","#b9faf8","#42a5f5","#ff9800","#b39ddb","#6d45bb","#b388ff","#1565c0","#26c6da","#5e548e","#90f1ef","#5b5f97","#bbe6e4","#42bfdd","#72ddf7","#8093f1","#9ed8d8","#7ea8be","#ef90b3","#b892ef","#c0b9dd","#c0d9dd","#75c9c8","#ded9e2","#b5e2fa","#62b6cb","#5fa8d3","#0fa3b1","#b5e2fa","#5fa8d3","#62b6cb","#b892ff"],maxFontColorArr:8,fontColor:["#2c3e50","#42a5f5","#8093f1","#FF6EC7","#FF7F00","#8FBC8F","#EAADEA","#3299CC","#CDCDCD","#CC3299","#FF7F00","#2F4F4F"],friendLinks:[{title:"我的朋友",links:[{title:"Aurora",url:"https://aurora.xcye.xyz",logo:"/avatar.jpg",describe:"人生若只是初见,何事秋风悲画扇",cover:"/friendimg/myself.png"}]}],siteInformation:{title:"信仰的个人博客",url:"https://hyd0.cc",logo:"/avatar.jpg",describe:"这是一个记录学习的地方",cover:"/my-cover.png",contact:"email: huangyaodong@xmbdqn.com, qq:179489797",otherDescribe:["申请友链请按照下面格式，在此页面留言，我看到就会进行添加","博客名称    博客地址      博客描述      博客logo","友链申请要求","拒绝涉政/涉黄/太多广告/盈利性站点","站点能正常访问",'这是一个html的测试<a href="https://hyd0.cc" target="_blank">这是一个a标签</a>']},fontFamily:["-apple-system","hlt","tzt","sst","lf","xsf","lsf","cgt"],footer:["Copyright © by hyd All Rights Reserved.","<a target='_blank' href='http://www.beian.gov.cn/portal/registerSystemInfo?recordcode=53060202000142' style='display:inline-block;text-decoration:none;height:20px;line-height:20px;'><img src='' style='float:left;'/><p style='float:left;height:20px;line-height:20px;margin: 0px 0px 0px 5px;'>闽ICP备2021005289号</p></a>"],isShowFooter:!0,isShowThemeCopyright:!1,isShowRunTime:!0,startRunTime:"8/7/2021 12:22:00",prefixRuntime:"小破站已运行",message:["暂无"],recommendPageLength:30,recommendNoTitle:"`╮(￣▽￣)╭`",tagNoTitle:"暂时还没有标题哟",mood:"青衫烟雨客",isFitter:!0,defaultBorderRadius:10,defaultOpacity:1,isHomePageFollow:!1,defaultBlur:1,split:"~",donate:{donateImg:["/aurora/wxpay.png","/aurora/zfbpay.png"],articlePage:!0,aboutPage:!0,donateProduct:[{name:"奶茶",img:"/aurora/nc.jpeg",price:18,prefix:"$"},{name:"全味奶茶",img:"/aurora/image-20210911233612031.png?",price:11,prefix:"￥"}],donateList:[{name:"初尘",msg:"主题太棒了",img:"/aurora/nc.jpeg",price:7,prefix:"￥"}]},comment:{showComment:!0,serverURL:"https://example.bdqn.group/",emojis:["https://cdn.jsdelivr.net/gh/walinejs/emojis@1.0.0/alus","https://cdn.jsdelivr.net/gh/walinejs/emojis@1.0.0/bilibili","https://cdn.jsdelivr.net/gh/walinejs/emojis@1.0.0/tieba","https://cdn.jsdelivr.net/gh/walinejs/emojis@1.0.0/weibo"],avatar:"monsterid"},poster:{description:"来自铧汏职教福建东南技校的技术博文",author:"学术部教员-黄耀栋",preBlog:"福建省东南技术学校",suffixBlog:"",avatar:"/avatar.jpg"},showOnlineMood:!0,showMoodEdit:!1,addMood:{siteName:"localhost:8080",appId:"q4LlYVTTk2r39sNrJr7BL9A6p",appKey:"VxezWTppppyX2LTx4TUK8w6e2"},customTopImg:{custom:!1,page:["/bg/555260.png","/bg/404901.png","/bg/734386.png"],friend:["/bg/669.png","/bg/5332.png"],tag:["/bg/763311.png"],mood:["/bg/5849.png"]},homeWps:["/bg/1.png","/bg/4.png"],homeWpsMobile:["/bg/1.png","/bg/4.png"],pageSize:4,githubUrl:"https://github.com/hyd1013",latestPageSize:6,showHomePageImg:!1,sidebarCatalogLevel:4,homePageImgApi:"https://www.dmoe.cc/random.php?return=text?time=-Infinity",mobileCutText:"Aurora",sidebarTag:"tag",showAddMood:!0,postImgApi:"https://picture.cco.vin/pic/rmimg?type=bing",articleH2Icon:"🌸",articleH3Icon:"🔥",articleH4Icon:"💧",sidebarAvatar:"/avatar.jpg",sugCountPerMin:300,showRecommend:!0,articlePagination:!0,global:{sidebar:{showStatus:!0,perData:!1,social:!1,friendLink:!0,navbar:!1,latestPage:!0,message:!1,tag:!0,siteData:!1},footer:!1},excludePath:["/footer.html","/v1.3.0/","/plugin/","/node.html","/style.html"],categoriesIncludeFolderName:!1,wave:{showWave:!0},bubble:{show:!0,bubbleNumber:.14,bubbleAlpha:.6,alphaChangeSpeed:1e-5,size:.4,sizeChangeSpeed:2e-4,riseSpeed:.4,color:"255,255,255"},leanCloud:{appId:"AVPpN5k6e6W81sgy3qYrBolT-gzGzoHsz",appKey:"zwcMLVsI925adANQsN5FJTKV",masterKey:"VS8dUDOHO5YHoeDIiY238PLl"},showPageMeta:!0,randomSayApi:{method:"GET",urlApi:"https://v1.hitokoto.cn/?encode=text&c=a"},afDianUrl:"https://afdian.net/@qsyyke",homeTopText:"置顶",sidebarDesc:"春去秋来，只有代码常伴身边",showAboutPageBubble:!0,locales:{"/":{selectLanguageName:"English"}},selectLanguageText:"Languages",selectLanguageAriaLabel:"Select language",sidebar:"auto",sidebarDepth:2,contributors:!0,contributorsText:"Contributors",notFound:["There's nothing here.","How did we get here?","That's a Four-Oh-Four.","Looks like we've got some broken links."],backToHome:"Take me home",openInNewWindow:"open in new window"}},4125:(n,s,a)=>{a.d(s,{Z:()=>t});const t=[{data:{key:"v-6c26f442",path:"/maven/Maven%E8%AF%A6%E8%A7%A3.html",title:"Maven详解(基础到高级)(入门到入土)",lang:"zh-CN",frontmatter:{title:"Maven详解(基础到高级)(入门到入土)",date:"2022/9/5 08:44",tag:["Java","maven"],categories:["后端"],coverUrl:"https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Maven%E8%AF%A6%E8%A7%A3/Inked6b8468820eaf4c8a91a419e409ebc13d_LI.jpg"},excerpt:"",headers:[{level:2,title:"一、Maven简介",slug:"一、maven简介",children:[{level:3,title:"1、maven是什么？",slug:"_1、maven是什么",children:[]},{level:3,title:"2、maven的作用",slug:"_2、maven的作用",children:[]}]},{level:2,title:"二、下载与安装",slug:"二、下载与安装",children:[{level:3,title:"1、maven官网下载",slug:"_1、maven官网下载",children:[]},{level:3,title:"2、直接下载（推荐）",slug:"_2、直接下载-推荐",children:[]},{level:3,title:"3、安装与配置",slug:"_3、安装与配置",children:[]},{level:3,title:"4、配置本地仓库",slug:"_4、配置本地仓库",children:[]},{level:3,title:"5、配置阿里云的镜像仓库",slug:"_5、配置阿里云的镜像仓库",children:[]},{level:3,title:"6、配置maven运行的java环境",slug:"_6、配置maven运行的java环境",children:[]},{level:3,title:"7、配置完成后，预下载",slug:"_7、配置完成后-预下载",children:[]}]},{level:2,title:"三、基础概念",slug:"三、基础概念",children:[{level:3,title:"1、仓库",slug:"_1、仓库",children:[]},{level:3,title:"2、坐标",slug:"_2、坐标",children:[]}]},{level:2,title:"四、创建一个maven项目（使用IDEA2022.2）",slug:"四、创建一个maven项目-使用idea2022-2",children:[{level:3,title:"1、工程目录结构",slug:"_1、工程目录结构",children:[]},{level:3,title:"2、Maven构建项目命令",slug:"_2、maven构建项目命令",children:[]},{level:3,title:"3、在IDEA中配置maven",slug:"_3、在idea中配置maven",children:[]}]},{level:2,title:"五、依赖管理",slug:"五、依赖管理",children:[{level:3,title:"1、配置依赖",slug:"_1、配置依赖",children:[]},{level:3,title:"2、依赖传递",slug:"_2、依赖传递",children:[]},{level:3,title:"3、依赖传递冲突问题的优先顺序",slug:"_3、依赖传递冲突问题的优先顺序",children:[]},{level:3,title:"4、可选依赖",slug:"_4、可选依赖",children:[]},{level:3,title:"5、排除依赖",slug:"_5、排除依赖",children:[]},{level:3,title:"6、依赖范围",slug:"_6、依赖范围",children:[]},{level:3,title:"7、依赖范围传递性",slug:"_7、依赖范围传递性",children:[]}]},{level:2,title:"六、生命周期",slug:"六、生命周期",children:[{level:3,title:"1、项目构建生命周期",slug:"_1、项目构建生命周期",children:[]},{level:3,title:"2、clean生命周期",slug:"_2、clean生命周期",children:[]},{level:3,title:"3、default构建生命周期",slug:"_3、default构建生命周期",children:[]},{level:3,title:"4、site构建生命周期",slug:"_4、site构建生命周期",children:[]}]},{level:2,title:"七、插件",slug:"七、插件",children:[]}],git:{}},key:"v-6c26f442",path:"/maven/Maven%E8%AF%A6%E8%A7%A3.html",title:"Maven详解(基础到高级)(入门到入土)",lang:"zh-CN",frontmatter:{title:"Maven详解(基础到高级)(入门到入土)",date:"2022/9/5 08:44",tag:["Java","maven"],categories:["后端"],coverUrl:"https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Maven%E8%AF%A6%E8%A7%A3/Inked6b8468820eaf4c8a91a419e409ebc13d_LI.jpg"},excerpt:"",headers:[{level:2,title:"一、Maven简介",slug:"一、maven简介",children:[{level:3,title:"1、maven是什么？",slug:"_1、maven是什么",children:[]},{level:3,title:"2、maven的作用",slug:"_2、maven的作用",children:[]}]},{level:2,title:"二、下载与安装",slug:"二、下载与安装",children:[{level:3,title:"1、maven官网下载",slug:"_1、maven官网下载",children:[]},{level:3,title:"2、直接下载（推荐）",slug:"_2、直接下载-推荐",children:[]},{level:3,title:"3、安装与配置",slug:"_3、安装与配置",children:[]},{level:3,title:"4、配置本地仓库",slug:"_4、配置本地仓库",children:[]},{level:3,title:"5、配置阿里云的镜像仓库",slug:"_5、配置阿里云的镜像仓库",children:[]},{level:3,title:"6、配置maven运行的java环境",slug:"_6、配置maven运行的java环境",children:[]},{level:3,title:"7、配置完成后，预下载",slug:"_7、配置完成后-预下载",children:[]}]},{level:2,title:"三、基础概念",slug:"三、基础概念",children:[{level:3,title:"1、仓库",slug:"_1、仓库",children:[]},{level:3,title:"2、坐标",slug:"_2、坐标",children:[]}]},{level:2,title:"四、创建一个maven项目（使用IDEA2022.2）",slug:"四、创建一个maven项目-使用idea2022-2",children:[{level:3,title:"1、工程目录结构",slug:"_1、工程目录结构",children:[]},{level:3,title:"2、Maven构建项目命令",slug:"_2、maven构建项目命令",children:[]},{level:3,title:"3、在IDEA中配置maven",slug:"_3、在idea中配置maven",children:[]}]},{level:2,title:"五、依赖管理",slug:"五、依赖管理",children:[{level:3,title:"1、配置依赖",slug:"_1、配置依赖",children:[]},{level:3,title:"2、依赖传递",slug:"_2、依赖传递",children:[]},{level:3,title:"3、依赖传递冲突问题的优先顺序",slug:"_3、依赖传递冲突问题的优先顺序",children:[]},{level:3,title:"4、可选依赖",slug:"_4、可选依赖",children:[]},{level:3,title:"5、排除依赖",slug:"_5、排除依赖",children:[]},{level:3,title:"6、依赖范围",slug:"_6、依赖范围",children:[]},{level:3,title:"7、依赖范围传递性",slug:"_7、依赖范围传递性",children:[]}]},{level:2,title:"六、生命周期",slug:"六、生命周期",children:[{level:3,title:"1、项目构建生命周期",slug:"_1、项目构建生命周期",children:[]},{level:3,title:"2、clean生命周期",slug:"_2、clean生命周期",children:[]},{level:3,title:"3、default构建生命周期",slug:"_3、default构建生命周期",children:[]},{level:3,title:"4、site构建生命周期",slug:"_4、site构建生命周期",children:[]}]},{level:2,title:"七、插件",slug:"七、插件",children:[]}],content:'\r\n## 一、Maven简介\r\n\r\n### 1、maven是什么？\r\n\r\n- Maven是基于项目对象模型(POM project object model)，可以通过一小段描述信息（配置）来管理项目的构建，报告和文档的软件项目管理工具。\r\n- Maven的本质是一个项目管理工具，将项目开发和管理过程抽象成一个项目对象模型(POM)。\r\n- POM (Project ObjectModel) :项目对象模型。\r\n\r\n![Inked6b8468820eaf4c8a91a419e409ebc13d_LI.jpg](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Maven%E8%AF%A6%E8%A7%A3/Inked6b8468820eaf4c8a91a419e409ebc13d_LI.jpg)\r\n\r\n### 2、maven的作用\r\n\r\n- 项目构建:提供标准的、跨平台的自动化项目构建方式。\r\n- 依赖管理:方便快捷的管理项目依赖的资源(jar包) ， 避免资源间的版本冲突问题。不用自己手动去下载jar ，pom文件会自动管理下载好的jar包。\r\n- 统一开发结构:提供标准的、统一的项目结构。\r\n- 用来解决导入java类依赖的jar,编译java项目主要问题。\r\n\r\n## 二、下载与安装\r\n\r\n### 1、maven官网下载\r\n\r\n#### 官网首页地址：\r\n\r\n```http\r\nhttps://maven.apache.org/\r\n```\r\n\r\n#### 官方下载地址\r\n\r\n```http\r\nhttps://maven.apache.org/download.cgi\r\n```\r\n\r\n![16623403034288.png](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Maven%E8%AF%A6%E8%A7%A3/16623403034288.png)\r\n\r\n::: tip\r\n\r\nBinary（bin）是可执行版本，已经编译好可以直接使用。\r\n\r\nSource (src)是源代码版本，需要自己编译成可执行软件才可使用。\r\n\r\n:::\r\n\r\n::: tip\r\n\r\ntar.gz和zip两种压缩格式,其实这两个压缩文件里面包含的内容是同样的,只是压缩格式不同。\r\n\r\ntar.gz格式的文件比zip文件小很多,用于unix操作系统。\r\n\r\nzip格式用于Windows操作系统,但在Windows系统使用WinRar工具一样能够解压缩tar.gz格式 。\r\n\r\n::: warning\r\n\r\n注意，官网下载是不带maven本地仓库的，需要自己配置创建\r\n\r\n::: \r\n\r\n### 2、直接下载（推荐）\r\n\r\n::: tip\r\n\r\n这是我自己用的maven，压缩包中自带maven仓库及大多数开发常用依赖\r\n\r\n:::\r\n\r\n#### 下载地址\r\n\r\n[点击下载](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Maven详解/apache-maven-3.8.4.7z)\r\n\r\n### 3、安装与配置\r\n\r\n#### 1、解压maven\r\n\r\n下载完成后，选择任意盘符进行解压，<span style="color: red">**不建议放在c盘**</span>\r\n\r\n#### 2、配置环境\r\n\r\n::: tip\r\n\r\n此电脑 → 属性 → 高级系统设置 → 环境变量 → 系统变量 → 新建变量 → 填写好变量名和变量值 → 去path配置路径\r\n\r\n:::\r\n\r\n![1.png](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Maven%E8%AF%A6%E8%A7%A3/1.png)\r\n\r\n新建系统环境变量：变量名：MAVEN_HOME 变量值：你<span style="color:red">**解压Maven文件所在的地址**</span>\r\n\r\n![2.png](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Maven%E8%AF%A6%E8%A7%A3/2.png)\r\n\r\n配置path环境变量\r\n\r\n![3.png](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Maven%E8%AF%A6%E8%A7%A3/3.png)\r\n\r\n点击新建，填入`%MAVEN_HOME%\\bin`\r\n\r\n![4.png](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Maven%E8%AF%A6%E8%A7%A3/4.png)\r\n\r\n`win+R`运行`cmd`，输入`mvn -version`，如图所示则配置成功\r\n\r\n![5.png](https://bdqn-blog.oss-cn-beijing.aliyuncs.com/blog/Maven%E8%AF%A6%E8%A7%A3/5.png)\r\n\r\n### 4、配置本地仓库\r\n\r\n::: tip\r\n\r\n​\t必须配置，因为如果如果不手动配置一个手动仓库，Maven会自动给你添加到默认地址也就是c盘中的.m2的位置，随着导入的包越来越多，也会占用越来越多内存导致电脑运行速度慢。所以需要自己配置一个本地仓库并且设置以后从中央仓库下载到的包放在自己设置的仓库中。\r\n\r\n:::\r\n\r\n在除C盘外的任意盘符创建一个名为`repository`的文件夹，<span style="color:red">**推荐在maven根目录下创建**</span>\r\n\r\n![6.png](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Maven%E8%AF%A6%E8%A7%A3/6.png)\r\n\r\n在你解压maven根目录中的`\\conf`文件夹下找到`settings.xml`文件，选中后右键编辑或者用任意文本编辑器打开\r\n\r\n![7.png](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Maven%E8%AF%A6%E8%A7%A3/7.png)\r\n\r\n![8.png](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Maven%E8%AF%A6%E8%A7%A3/8.png)\r\n\r\n找到localRepository标签，t填入刚才所创建的repository文件夹地址\r\n\r\n![9.png](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Maven%E8%AF%A6%E8%A7%A3/9.png)\r\n\r\n::: tip\r\n\r\nlocalRepository节点用于配置本地仓库，本地仓库其实起到了一个缓存的作用，它的默认地址是 C:\\Users\\用户名.m2。\r\n\r\n当我们从maven中获取jar包的时候，maven首先会在本地仓库中查找，如果本地仓库有则返回；如果没有则从远程仓库中获取包，并在本地库中保存。\r\n\r\n全局setting与用户setting区别：\r\n\r\n​\t\t全局setting定义了当前windows系统下所有用户的配置\r\n\r\n​\t\t用户setting定义了当前windows系统下登录用户的配置\r\n\r\n:::\r\n\r\n### 5、配置阿里云的镜像仓库\r\n\r\n::: tip\r\n\r\n因为如果都是从中央仓库中获取的话速度会很慢，因为中央仓库的地址在国外，所以我们需要用到阿里云创建的地址去访问中央仓库 ，这样下载jar包的速度比较快。\r\n\r\n视情况选择，可以同时配置多个镜像仓库，推荐保留原有中央仓库配置，在中央仓库下面再配置阿里云镜像仓库。\r\n\r\n阿里云镜像仓库虽然快，但是更新并不是那么的及时，有些最新的依赖或者使用较少的依赖可能会下载不到，所以推荐保留中央仓库配置。\r\n\r\n:::\r\n\r\n在settings.xml配置文件中找到mirrors标签，添加如下配置（注意要添加在`<mirrors>`和`</mirrors>`两个标签之间）\r\n\r\n```xml\r\n<mirror>\r\n    <id>alimaven</id>\r\n    <mirrorOf>central</mirrorOf>\r\n    <name>aliyun maven</name>\r\n    <url>http://maven.aliyun.com/nexus/content/repositories/central/</url>\r\n</mirror>\r\n```\r\n\r\n![10.png](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Maven%E8%AF%A6%E8%A7%A3/10.png)\r\n\r\n### 6、配置maven运行的java环境\r\n\r\n在settings.xml配置文件中找到profiles标签，添加如下配置（注意要添加在`<profiles>`和`</profiles>`两个标签之间）\r\n\r\n```xml\r\n<profile>\r\n    <id>jdk-1.8</id>\r\n    <activation>\r\n        <activeByDefault>true</activeByDefault>\r\n        <jdk>1.8</jdk>\r\n    </activation>\r\n\r\n    <properties>\r\n        <maven.compiler.source>1.8</maven.compiler.source>\r\n        <maven.compiler.target>1.8</maven.compiler.target>\r\n        <maven.compiler.compilerVersion>1.8</maven.compiler.compilerVersion>\r\n    </properties>\r\n</profile>\r\n```\r\n\r\n![11.png](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Maven%E8%AF%A6%E8%A7%A3/11.png)\r\n\r\n### 7、配置完成后，预下载\r\n\r\n::: tip\r\n\r\n​\t\t运行cmd,输入mvn help:system测试，Maven相关工具自动帮我们到Maven中央仓库下载缺省的或者Maven中央仓库更新的各种配置文件和类库（jar包)到Maven本地仓库中。\r\n\r\n:::\r\n\r\n## 三、基础概念\r\n\r\n### 1、仓库\r\n\r\n![12.webp](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Maven%E8%AF%A6%E8%A7%A3/12.webp)\r\n\r\n::: tip\r\n\r\n仓库:用于存储资源，包含各种jar包\r\n\r\n:::\r\n\r\n#### 仓库分类:\r\n\r\n- 本地仓库:自己电脑.上存储资源的仓库，连接远程仓库获取资源。\r\n- 远程仓库:非本机电脑上的仓库，为本地仓库提供资源。\r\n  - 中央仓库: Maven团队维护，存储所有资源的仓库。\r\n  - 私服:部门/公司范围内存储资源的仓库，从中央仓库获取资源。\r\n\r\n#### 私服的作用:\r\n\r\n- 保存具有版权的资源，包含购买或自主研发的jar包。\r\n  - 中央仓库中的jar都是开源的，不能存储具有版权的资源。\r\n- 一定范围内共享资源，仅对内部开放，不对外共享。\r\n\r\n### 2、坐标\r\n\r\n::: tip\r\n\r\nMaven中的坐标用于描述仓库中资源的位置\r\n\r\n:::\r\n\r\nmaven中央仓库地址（可直接访问）：[中央仓库](https://repo1.maven.org/maven2/)\r\n\r\n#### Maven坐标主要组成\r\n\r\n|    标签    |                             释意                             |\r\n| :--------: | :----------------------------------------------------------: |\r\n|  groupld   | 定义当前Maven项目隶属组织名称(通常是域名反写，例如: org.mybatis) |\r\n| artifactld |     定义当前Maven项目名称(通常是模块名称，例如CRM、SMS)      |\r\n|  version   |                      定义当前项目版本号                      |\r\n| packaging  |                     定义该项目的打包方式                     |\r\n\r\n#### Maven坐标的作用\r\n\r\n使用唯一标识，唯一性定位资源位置，通过该标识可以将资源的识别与下载工作交由机器完成\r\n\r\n::: tip\r\n\r\nmaven坐标查询网站：[Maven Repository: Search/Browse/Explore (mvnrepository.com)](https://mvnrepository.com/)\r\n\r\n:::\r\n\r\n## 四、创建一个maven项目（使用IDEA2022.2）\r\n\r\n::: tip\r\n\r\n打开idea → New Project → Name(输入项目名称) → Build system(选择打包方式为Maven) → Advanced Settings(设置项目编号及版本)\r\n\r\n<span style="color:red">**具体操作如下GIF图所示**</span>\r\n\r\n:::\r\n\r\n![13.gif](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Maven%E8%AF%A6%E8%A7%A3/13.gif)\r\n\r\n### 1、工程目录结构\r\n\r\n![14.jpg](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Maven%E8%AF%A6%E8%A7%A3/14.jpg)\r\n\r\n### 2、Maven构建项目命令\r\n\r\n::: tip\r\n\r\nMaven构建命令使用mvn开头，后面添加功能参数，可以一次执行多个命令，使用空格分隔。\r\n\r\n这里只展示常用的几个参数，其他参数请自行查看官网\r\n\r\n:::\r\n\r\n|    命令     |                  释意                  |\r\n| :---------: | :------------------------------------: |\r\n| mvn compile |                编译项目                |\r\n|  mvn clean  |                清理缓存                |\r\n|  mvn test   |                测试打包                |\r\n| mvn package |                打包项目                |\r\n| mvn install | 安装到本地仓库（集成了编译及打包命令） |\r\n\r\n### 3、在IDEA中配置maven\r\n\r\n::: tip\r\n\r\nFile → Settings →`Build,Execution,Deployment` → Build Tools → Maven\r\n\r\n:::\r\n\r\n![15.png](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Maven%E8%AF%A6%E8%A7%A3/15.png)\r\n\r\n::: warning\r\n\r\n注意，如果只是这样配置的话我们每次创建maven项目就要重新配置一次。\r\n\r\n否则，idea默认使用自带的maven配置，也就是自动把所有依赖全部下载到C盘中。\r\n\r\n:::\r\n\r\n::: tip\r\n\r\n配置新建项目时自动初始化maven配置\r\n\r\nFile → New Project Setup → Settings For New Projects\r\n\r\n打开后设置方式参上图\r\n\r\n各版本的IDEA此设置的路径都有所偏差，但是意思都差不多，在File选项里找到<span style="color:red">**Settings For New Projects**</span>即可\r\n\r\n:::\r\n\r\n## 五、依赖管理\r\n\r\n### 1、配置依赖\r\n\r\n::: tip\r\n\r\n依赖指当前项目运行所需的jar,一个项目可以设置多个依赖。\r\n\r\n:::\r\n\r\n格式如下：\r\n\r\n```xml\r\n<dependencies>\r\n    \x3c!--具体依赖--\x3e\r\n    <dependency>\r\n        \x3c!--依赖所属群组id--\x3e\r\n        <groupId>log4j</groupId>\r\n        \x3c!--依赖所属项目id--\x3e\r\n        <artifactId>log4j</artifactId>\r\n        \x3c!--依赖版本号--\x3e\r\n        <version>1.2.12</version>\r\n    </dependency>\r\n</dependencies>\r\n```\r\n\r\n### 2、依赖传递\r\n\r\n::: tip\r\n\r\n依赖具有传递性:\r\n\r\n​\t\t直接依赖:在当前项目中通过依赖配置建立的依赖关系\r\n\r\n​\t\t间接依赖: 被资源的资源如果依赖其他资源，当前项目间接依赖其他资源\r\n\r\n:::\r\n\r\n### 3、依赖传递冲突问题的优先顺序\r\n\r\n::: tip\r\n\r\n路径优先:当依赖中出现相同的资源时，层级越深，优先级越低，层级越浅，优先级越高\r\n\r\n声明优先:当资源在相同层级被依赖时，配置顺序靠前的覆盖配置顺序靠后的\r\n\r\n特殊优先:当同级配置了相同资源的不同版本，后配置的覆盖先配置的\r\n\r\n:::\r\n\r\n![16.jpg](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Maven%E8%AF%A6%E8%A7%A3/16.jpg)\r\n\r\n### 4、可选依赖\r\n\r\n::: tip\r\n\r\n 可选依赖指对外隐藏当前所依赖的资源——<span style="color:red">**不透明**</span>\r\n\r\n:::\r\n\r\n```xml\r\n<dependencies>\r\n    \x3c!--具体依赖--\x3e\r\n    <dependency>\r\n        \x3c!--依赖所属群组id--\x3e\r\n        <groupId>log4j</groupId>\r\n        \x3c!--依赖所属项目id--\x3e\r\n        <artifactId>log4j</artifactId>\r\n        \x3c!--依赖版本号--\x3e\r\n        <version>1.2.12</version>\r\n        \x3c!--可选依赖指对外隐藏当前所依赖的资源--不透明--\x3e\r\n        <optional>true</optional>\r\n    </dependency>\r\n</dependencies>\r\n```\r\n\r\n### 5、排除依赖\r\n\r\n::: tip\r\n\r\n排除依赖指主动断开依赖的资源，被排除的资源无需指定版本——<span style="color:red">**不需要**</span>\r\n\r\n一般来讲只有在多个依赖项目冲突的时候才会使用exclusions来排除掉其他依赖\r\n\r\n:::\r\n\r\n```xml\r\n<dependency>\r\n    <groupId>junit</groupId>\r\n    <artifactId>junit</artifactId>\r\n    <version>4.12</version>\r\n    <exclusions>\r\n        <exclusion>\r\n        <groupId>org.hamcrest</groupId>\r\n        <artifactId>hamcrest-core</artifactId>\r\n        </exclusion>\r\n    </exclusions>\r\n</dependency>\r\n```\r\n\r\n### 6、依赖范围\r\n\r\n::: tip\r\n\r\n依赖的jar默认情况可以在任何地方使用，可以通过scope标签设定其作用范围\r\n\r\n作用范围\r\n\r\n- 主程序范围有效(main文件夹范围内)\r\n- 测试程序范围有效(test文件夹范围内)\r\n- 是否参与打包(package指令范围内)\r\n\r\n:::\r\n\r\n|      scope      | 主代码 | 测试代码 | 打包 |    范例     |\r\n| :-------------: | :----: | :------: | :--: | :---------: |\r\n| compile（依赖） |   Y    |    Y     |  Y   |    log4j    |\r\n|      test       |        |    Y     |      |    junit    |\r\n|    provided     |   Y    |    Y     |      | servlet-api |\r\n|     runtime     |        |          |  Y   |    jdbc     |\r\n\r\n### 7、依赖范围传递性 \r\n\r\n::: tip\r\n\r\n带有依赖范围的资源在进行传递时，作用范围将受到影响\r\n\r\n:::\r\n\r\n![17.jpg](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Maven%E8%AF%A6%E8%A7%A3/17.jpg)\r\n\r\n## 六、生命周期\r\n\r\n### 1、项目构建生命周期\r\n\r\n::: tip\r\n\r\n- Maven构建生命周期描述的是一次构建过程经历经历了多少个事件\r\n- Maven对项目构建的生命周期划分为3套\r\n  - clean: 清理工作\r\n  - default:核心工作，例如编译，测试,打包,部署等\r\n  - site: 产生报告，发布站点等\r\n\r\n:::\r\n\r\n![18.png](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Maven%E8%AF%A6%E8%A7%A3/18.png)\r\n\r\n### 2、clean生命周期\r\n\r\n::: tip\r\n\r\npre-clean         执行一-些需要在clean之前完成的工作\r\n\r\nclean                 移除所有上一次构建生成的文件post-clean  \r\n\r\npost-clean        执行一些需要在clean之 后立刻完成的工作\r\n\r\n:::\r\n\r\n### 3、default构建生命周期\r\n\r\n| 阶段                                        | 释意                                                         |\r\n| :------------------------------------------ | :----------------------------------------------------------- |\r\n| validate（校验）                            | 校验项目是否正确并且所有必要的信息可以完成项目的构建过程     |\r\n| initialize（初始化）                        | 初始化构建状态，比如设置属性值                               |\r\n| generate-sources（生成源代码）              | 生成包含在编译阶段中的任何源代码                             |\r\n| process-sources（处理源代码）               | 处理源代码，比如说，过滤任意值                               |\r\n| generate-resources（生成资源文件）          | 生成将会包含在项目包中的资源文件                             |\r\n| precess-resources（处理资源文件）           | 复制和处理资源到目标目录，为打包阶段做好准备                 |\r\n| complie（编译）                             | 编译项目的源代码                                             |\r\n| process-classes（处理类文件）               | 处理编译生成的文件，比如说对Java class文件做字节码改善优化   |\r\n| generate-test-sources（生成测试源代码）     | 生成包含在编译阶段中的任何测试源代码                         |\r\n| process-test-sources（处理测试源代码）      | 处理测试源代码，比如说，过滤任意值                           |\r\n| generate-test-resources（生成测试资源文件） | 为测试创建资源文件                                           |\r\n| precess-test-resources（处理测试资源文件）  | 复制和处理测试资源到目标目录                                 |\r\n| test-compile（编译测试源码）                | 编译测试源代码到测试目标目录                                 |\r\n| process-test-classes（处理测试类文件）      | 处理测试源代码编译生成的文件                                 |\r\n| test（测试）                                | 使用合适的单元测试框架运行测试（Juint是其中之一）            |\r\n| prepare-package（准备打包）                 | 在实际打包之前，执行任何的必要的操作为打包做准备             |\r\n| package（打包）                             | 将编译后的代码打包成可分发格式的文件，比如JAR、WAR或者EAR文件 |\r\n| pre-intergration-test（集成测试前）         | 在执行集成测试前进行必要的动作，比如说，搭建需要的环境       |\r\n| intergration-test（集成测试）               | 处理和部署项目到可以运行集成测试环境中                       |\r\n| post-intergration-test（集成测试后）        | 在执行集成测试完成后进行必要的动作，比如说，清理集成测试环境 |\r\n| verify（验证）                              | 运行任意的检查来验证项目包有效且达到质量标准                 |\r\n| install（安装）                             | 安装项目包到本地仓库，这样项目包可以用做其他本地项目的依赖   |\r\n| deploy（部署）                              | 将最终的项目包复制到远程仓库中与其他开发者和项目共享         |\r\n\r\n### 4、site构建生命周期\r\n\r\n::: tip\r\n\r\npre-site     执行一些需要在生成站点文档之前完成的工作\r\n\r\nsite        生成项目的站点文档\r\n\r\npost-site    执行一些需要在生成站点文档之后完成的工作，并且为部署做准备\r\n\r\nsite-deploy  将生成的站点文档部署到特定的服务器上\r\n\r\n:::\r\n\r\n## 七、插件\r\n\r\n::: tip\r\n\r\n插件与生命周期内的阶段绑定，在执行到对应生命周期时执行对应的插件功能\r\n\r\n默认maven在各个生命周期上绑定有预设的功能\r\n\r\n通过插件可以自定义其他功能\r\n\r\n:::\r\n\r\n```xml\r\n\x3c!--构建--\x3e\r\n<build>\r\n    \x3c!--    设置插件--\x3e\r\n    <plugins>  \r\n        \x3c!--  具体插件配置--\x3e\r\n        <plugin>\r\n            \x3c!-- 组名--\x3e\r\n            <groupId>org.apache.maven.plugins</groupId>\r\n            \x3c!--  插件名--\x3e\r\n            <artifactId>maven-source-plugin</artifactId>\r\n            \x3c!-- 版本号--\x3e\r\n            <version>2.2.1</version>\r\n            <executions>\r\n                <execution>\r\n                    <goals>\r\n                        <goal>jar</goal>\r\n                        <goal>test-jar</goal>\r\n                    </goals>\r\n                    <phase>generate-test-resources</phase>\r\n                </execution>\r\n            </executions>\r\n        </plugin>\r\n    </plugins>\r\n</build>\r\n```\r\n\r\n![19.jpg](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Maven%E8%AF%A6%E8%A7%A3/19.jpg)\r\n',contentRendered:'<h2 id="一、maven简介" tabindex="-1"><a class="header-anchor" href="#一、maven简介" aria-hidden="true">#</a> 一、Maven简介</h2>\n<h3 id="_1、maven是什么" tabindex="-1"><a class="header-anchor" href="#_1、maven是什么" aria-hidden="true">#</a> 1、maven是什么？</h3>\n<ul>\n<li>Maven是基于项目对象模型(POM project object model)，可以通过一小段描述信息（配置）来管理项目的构建，报告和文档的软件项目管理工具。</li>\n<li>Maven的本质是一个项目管理工具，将项目开发和管理过程抽象成一个项目对象模型(POM)。</li>\n<li>POM (Project ObjectModel) :项目对象模型。</li>\n</ul>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="Inked6b8468820eaf4c8a91a419e409ebc13d_LI.jpg" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Maven%E8%AF%A6%E8%A7%A3/Inked6b8468820eaf4c8a91a419e409ebc13d_LI.jpg" data="aurora"></p>\n<h3 id="_2、maven的作用" tabindex="-1"><a class="header-anchor" href="#_2、maven的作用" aria-hidden="true">#</a> 2、maven的作用</h3>\n<ul>\n<li>项目构建:提供标准的、跨平台的自动化项目构建方式。</li>\n<li>依赖管理:方便快捷的管理项目依赖的资源(jar包) ， 避免资源间的版本冲突问题。不用自己手动去下载jar ，pom文件会自动管理下载好的jar包。</li>\n<li>统一开发结构:提供标准的、统一的项目结构。</li>\n<li>用来解决导入java类依赖的jar,编译java项目主要问题。</li>\n</ul>\n<h2 id="二、下载与安装" tabindex="-1"><a class="header-anchor" href="#二、下载与安装" aria-hidden="true">#</a> 二、下载与安装</h2>\n<h3 id="_1、maven官网下载" tabindex="-1"><a class="header-anchor" href="#_1、maven官网下载" aria-hidden="true">#</a> 1、maven官网下载</h3>\n<h4 id="官网首页地址" tabindex="-1"><a class="header-anchor" href="#官网首页地址" aria-hidden="true">#</a> 官网首页地址：</h4>\n<div class="language-http ext-http line-numbers-mode"><pre v-pre class="language-http"><code><span class="token header"><span class="token header-name keyword">https</span><span class="token punctuation">:</span><span class="token header-value">//maven.apache.org/</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h4 id="官方下载地址" tabindex="-1"><a class="header-anchor" href="#官方下载地址" aria-hidden="true">#</a> 官方下载地址</h4>\n<div class="language-http ext-http line-numbers-mode"><pre v-pre class="language-http"><code><span class="token header"><span class="token header-name keyword">https</span><span class="token punctuation">:</span><span class="token header-value">//maven.apache.org/download.cgi</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="16623403034288.png" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Maven%E8%AF%A6%E8%A7%A3/16623403034288.png" data="aurora"></p>\n<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>Binary（bin）是可执行版本，已经编译好可以直接使用。</p>\n<p>Source (src)是源代码版本，需要自己编译成可执行软件才可使用。</p>\n</div>\n<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>tar.gz和zip两种压缩格式,其实这两个压缩文件里面包含的内容是同样的,只是压缩格式不同。</p>\n<p>tar.gz格式的文件比zip文件小很多,用于unix操作系统。</p>\n<p>zip格式用于Windows操作系统,但在Windows系统使用WinRar工具一样能够解压缩tar.gz格式 。</p>\n<div class="custom-container warning"><p class="custom-container-title">WARNING</p>\n<p>注意，官网下载是不带maven本地仓库的，需要自己配置创建</p>\n</div>\n</div>\n<h3 id="_2、直接下载-推荐" tabindex="-1"><a class="header-anchor" href="#_2、直接下载-推荐" aria-hidden="true">#</a> 2、直接下载（推荐）</h3>\n<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>这是我自己用的maven，压缩包中自带maven仓库及大多数开发常用依赖</p>\n</div>\n<h4 id="下载地址" tabindex="-1"><a class="header-anchor" href="#下载地址" aria-hidden="true">#</a> 下载地址</h4>\n<p><a href="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Maven%E8%AF%A6%E8%A7%A3/apache-maven-3.8.4.7z" target="_blank" rel="noopener noreferrer">点击下载<ExternalLinkIcon/></a></p>\n<h3 id="_3、安装与配置" tabindex="-1"><a class="header-anchor" href="#_3、安装与配置" aria-hidden="true">#</a> 3、安装与配置</h3>\n<h4 id="_1、解压maven" tabindex="-1"><a class="header-anchor" href="#_1、解压maven" aria-hidden="true">#</a> 1、解压maven</h4>\n<p>下载完成后，选择任意盘符进行解压，<span style="color: red"><strong>不建议放在c盘</strong></span></p>\n<h4 id="_2、配置环境" tabindex="-1"><a class="header-anchor" href="#_2、配置环境" aria-hidden="true">#</a> 2、配置环境</h4>\n<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>此电脑 → 属性 → 高级系统设置 → 环境变量 → 系统变量 → 新建变量 → 填写好变量名和变量值 → 去path配置路径</p>\n</div>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="1.png" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Maven%E8%AF%A6%E8%A7%A3/1.png" data="aurora"></p>\n<p>新建系统环境变量：变量名：MAVEN_HOME 变量值：你<span style="color:red"><strong>解压Maven文件所在的地址</strong></span></p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="2.png" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Maven%E8%AF%A6%E8%A7%A3/2.png" data="aurora"></p>\n<p>配置path环境变量</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="3.png" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Maven%E8%AF%A6%E8%A7%A3/3.png" data="aurora"></p>\n<p>点击新建，填入<code>%MAVEN_HOME%\\bin</code></p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="4.png" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Maven%E8%AF%A6%E8%A7%A3/4.png" data="aurora"></p>\n<p><code>win+R</code>运行<code>cmd</code>，输入<code>mvn -version</code>，如图所示则配置成功</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="5.png" originSrc="https://bdqn-blog.oss-cn-beijing.aliyuncs.com/blog/Maven%E8%AF%A6%E8%A7%A3/5.png" data="aurora"></p>\n<h3 id="_4、配置本地仓库" tabindex="-1"><a class="header-anchor" href="#_4、配置本地仓库" aria-hidden="true">#</a> 4、配置本地仓库</h3>\n<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>​\t必须配置，因为如果如果不手动配置一个手动仓库，Maven会自动给你添加到默认地址也就是c盘中的.m2的位置，随着导入的包越来越多，也会占用越来越多内存导致电脑运行速度慢。所以需要自己配置一个本地仓库并且设置以后从中央仓库下载到的包放在自己设置的仓库中。</p>\n</div>\n<p>在除C盘外的任意盘符创建一个名为<code>repository</code>的文件夹，<span style="color:red"><strong>推荐在maven根目录下创建</strong></span></p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="6.png" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Maven%E8%AF%A6%E8%A7%A3/6.png" data="aurora"></p>\n<p>在你解压maven根目录中的<code>\\conf</code>文件夹下找到<code>settings.xml</code>文件，选中后右键编辑或者用任意文本编辑器打开</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="7.png" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Maven%E8%AF%A6%E8%A7%A3/7.png" data="aurora"></p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="8.png" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Maven%E8%AF%A6%E8%A7%A3/8.png" data="aurora"></p>\n<p>找到localRepository标签，t填入刚才所创建的repository文件夹地址</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="9.png" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Maven%E8%AF%A6%E8%A7%A3/9.png" data="aurora"></p>\n<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>localRepository节点用于配置本地仓库，本地仓库其实起到了一个缓存的作用，它的默认地址是 C:\\Users\\用户名.m2。</p>\n<p>当我们从maven中获取jar包的时候，maven首先会在本地仓库中查找，如果本地仓库有则返回；如果没有则从远程仓库中获取包，并在本地库中保存。</p>\n<p>全局setting与用户setting区别：</p>\n<p>​\t\t全局setting定义了当前windows系统下所有用户的配置</p>\n<p>​\t\t用户setting定义了当前windows系统下登录用户的配置</p>\n</div>\n<h3 id="_5、配置阿里云的镜像仓库" tabindex="-1"><a class="header-anchor" href="#_5、配置阿里云的镜像仓库" aria-hidden="true">#</a> 5、配置阿里云的镜像仓库</h3>\n<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>因为如果都是从中央仓库中获取的话速度会很慢，因为中央仓库的地址在国外，所以我们需要用到阿里云创建的地址去访问中央仓库 ，这样下载jar包的速度比较快。</p>\n<p>视情况选择，可以同时配置多个镜像仓库，推荐保留原有中央仓库配置，在中央仓库下面再配置阿里云镜像仓库。</p>\n<p>阿里云镜像仓库虽然快，但是更新并不是那么的及时，有些最新的依赖或者使用较少的依赖可能会下载不到，所以推荐保留中央仓库配置。</p>\n</div>\n<p>在settings.xml配置文件中找到mirrors标签，添加如下配置（注意要添加在<code>&lt;mirrors&gt;</code>和<code>&lt;/mirrors&gt;</code>两个标签之间）</p>\n<div class="language-xml ext-xml line-numbers-mode"><pre v-pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>alimaven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>aliyun maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://maven.aliyun.com/nexus/content/repositories/central/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="10.png" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Maven%E8%AF%A6%E8%A7%A3/10.png" data="aurora"></p>\n<h3 id="_6、配置maven运行的java环境" tabindex="-1"><a class="header-anchor" href="#_6、配置maven运行的java环境" aria-hidden="true">#</a> 6、配置maven运行的java环境</h3>\n<p>在settings.xml配置文件中找到profiles标签，添加如下配置（注意要添加在<code>&lt;profiles&gt;</code>和<code>&lt;/profiles&gt;</code>两个标签之间）</p>\n<div class="language-xml ext-xml line-numbers-mode"><pre v-pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>jdk-1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activation</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activeByDefault</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activeByDefault</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jdk</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>jdk</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activation</span><span class="token punctuation">></span></span>\n\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.compilerVersion</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.compilerVersion</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="11.png" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Maven%E8%AF%A6%E8%A7%A3/11.png" data="aurora"></p>\n<h3 id="_7、配置完成后-预下载" tabindex="-1"><a class="header-anchor" href="#_7、配置完成后-预下载" aria-hidden="true">#</a> 7、配置完成后，预下载</h3>\n<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>​\t\t运行cmd,输入mvn help:system测试，Maven相关工具自动帮我们到Maven中央仓库下载缺省的或者Maven中央仓库更新的各种配置文件和类库（jar包)到Maven本地仓库中。</p>\n</div>\n<h2 id="三、基础概念" tabindex="-1"><a class="header-anchor" href="#三、基础概念" aria-hidden="true">#</a> 三、基础概念</h2>\n<h3 id="_1、仓库" tabindex="-1"><a class="header-anchor" href="#_1、仓库" aria-hidden="true">#</a> 1、仓库</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="12.webp" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Maven%E8%AF%A6%E8%A7%A3/12.webp" data="aurora"></p>\n<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>仓库:用于存储资源，包含各种jar包</p>\n</div>\n<h4 id="仓库分类" tabindex="-1"><a class="header-anchor" href="#仓库分类" aria-hidden="true">#</a> 仓库分类:</h4>\n<ul>\n<li>本地仓库:自己电脑.上存储资源的仓库，连接远程仓库获取资源。</li>\n<li>远程仓库:非本机电脑上的仓库，为本地仓库提供资源。\n<ul>\n<li>中央仓库: Maven团队维护，存储所有资源的仓库。</li>\n<li>私服:部门/公司范围内存储资源的仓库，从中央仓库获取资源。</li>\n</ul>\n</li>\n</ul>\n<h4 id="私服的作用" tabindex="-1"><a class="header-anchor" href="#私服的作用" aria-hidden="true">#</a> 私服的作用:</h4>\n<ul>\n<li>保存具有版权的资源，包含购买或自主研发的jar包。\n<ul>\n<li>中央仓库中的jar都是开源的，不能存储具有版权的资源。</li>\n</ul>\n</li>\n<li>一定范围内共享资源，仅对内部开放，不对外共享。</li>\n</ul>\n<h3 id="_2、坐标" tabindex="-1"><a class="header-anchor" href="#_2、坐标" aria-hidden="true">#</a> 2、坐标</h3>\n<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>Maven中的坐标用于描述仓库中资源的位置</p>\n</div>\n<p>maven中央仓库地址（可直接访问）：<a href="https://repo1.maven.org/maven2/" target="_blank" rel="noopener noreferrer">中央仓库<ExternalLinkIcon/></a></p>\n<h4 id="maven坐标主要组成" tabindex="-1"><a class="header-anchor" href="#maven坐标主要组成" aria-hidden="true">#</a> Maven坐标主要组成</h4>\n<table>\n<thead>\n<tr>\n<th style="text-align:center">标签</th>\n<th style="text-align:center">释意</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style="text-align:center">groupld</td>\n<td style="text-align:center">定义当前Maven项目隶属组织名称(通常是域名反写，例如: org.mybatis)</td>\n</tr>\n<tr>\n<td style="text-align:center">artifactld</td>\n<td style="text-align:center">定义当前Maven项目名称(通常是模块名称，例如CRM、SMS)</td>\n</tr>\n<tr>\n<td style="text-align:center">version</td>\n<td style="text-align:center">定义当前项目版本号</td>\n</tr>\n<tr>\n<td style="text-align:center">packaging</td>\n<td style="text-align:center">定义该项目的打包方式</td>\n</tr>\n</tbody>\n</table>\n<h4 id="maven坐标的作用" tabindex="-1"><a class="header-anchor" href="#maven坐标的作用" aria-hidden="true">#</a> Maven坐标的作用</h4>\n<p>使用唯一标识，唯一性定位资源位置，通过该标识可以将资源的识别与下载工作交由机器完成</p>\n<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>maven坐标查询网站：<a href="https://mvnrepository.com/" target="_blank" rel="noopener noreferrer">Maven Repository: Search/Browse/Explore (mvnrepository.com)<ExternalLinkIcon/></a></p>\n</div>\n<h2 id="四、创建一个maven项目-使用idea2022-2" tabindex="-1"><a class="header-anchor" href="#四、创建一个maven项目-使用idea2022-2" aria-hidden="true">#</a> 四、创建一个maven项目（使用IDEA2022.2）</h2>\n<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>打开idea → New Project → Name(输入项目名称) → Build system(选择打包方式为Maven) → Advanced Settings(设置项目编号及版本)</p>\n<p><span style="color:red"><strong>具体操作如下GIF图所示</strong></span></p>\n</div>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="13.gif" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Maven%E8%AF%A6%E8%A7%A3/13.gif" data="aurora"></p>\n<h3 id="_1、工程目录结构" tabindex="-1"><a class="header-anchor" href="#_1、工程目录结构" aria-hidden="true">#</a> 1、工程目录结构</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="14.jpg" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Maven%E8%AF%A6%E8%A7%A3/14.jpg" data="aurora"></p>\n<h3 id="_2、maven构建项目命令" tabindex="-1"><a class="header-anchor" href="#_2、maven构建项目命令" aria-hidden="true">#</a> 2、Maven构建项目命令</h3>\n<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>Maven构建命令使用mvn开头，后面添加功能参数，可以一次执行多个命令，使用空格分隔。</p>\n<p>这里只展示常用的几个参数，其他参数请自行查看官网</p>\n</div>\n<table>\n<thead>\n<tr>\n<th style="text-align:center">命令</th>\n<th style="text-align:center">释意</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style="text-align:center">mvn compile</td>\n<td style="text-align:center">编译项目</td>\n</tr>\n<tr>\n<td style="text-align:center">mvn clean</td>\n<td style="text-align:center">清理缓存</td>\n</tr>\n<tr>\n<td style="text-align:center">mvn test</td>\n<td style="text-align:center">测试打包</td>\n</tr>\n<tr>\n<td style="text-align:center">mvn package</td>\n<td style="text-align:center">打包项目</td>\n</tr>\n<tr>\n<td style="text-align:center">mvn install</td>\n<td style="text-align:center">安装到本地仓库（集成了编译及打包命令）</td>\n</tr>\n</tbody>\n</table>\n<h3 id="_3、在idea中配置maven" tabindex="-1"><a class="header-anchor" href="#_3、在idea中配置maven" aria-hidden="true">#</a> 3、在IDEA中配置maven</h3>\n<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>File → Settings →<code>Build,Execution,Deployment</code> → Build Tools → Maven</p>\n</div>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="15.png" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Maven%E8%AF%A6%E8%A7%A3/15.png" data="aurora"></p>\n<div class="custom-container warning"><p class="custom-container-title">WARNING</p>\n<p>注意，如果只是这样配置的话我们每次创建maven项目就要重新配置一次。</p>\n<p>否则，idea默认使用自带的maven配置，也就是自动把所有依赖全部下载到C盘中。</p>\n</div>\n<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>配置新建项目时自动初始化maven配置</p>\n<p>File → New Project Setup → Settings For New Projects</p>\n<p>打开后设置方式参上图</p>\n<p>各版本的IDEA此设置的路径都有所偏差，但是意思都差不多，在File选项里找到<span style="color:red"><strong>Settings For New Projects</strong></span>即可</p>\n</div>\n<h2 id="五、依赖管理" tabindex="-1"><a class="header-anchor" href="#五、依赖管理" aria-hidden="true">#</a> 五、依赖管理</h2>\n<h3 id="_1、配置依赖" tabindex="-1"><a class="header-anchor" href="#_1、配置依赖" aria-hidden="true">#</a> 1、配置依赖</h3>\n<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>依赖指当前项目运行所需的jar,一个项目可以设置多个依赖。</p>\n</div>\n<p>格式如下：</p>\n<div class="language-xml ext-xml line-numbers-mode"><pre v-pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>\n    <span class="token comment">&lt;!--具体依赖--\x3e</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>\n        <span class="token comment">&lt;!--依赖所属群组id--\x3e</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>\n        <span class="token comment">&lt;!--依赖所属项目id--\x3e</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>\n        <span class="token comment">&lt;!--依赖版本号--\x3e</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="_2、依赖传递" tabindex="-1"><a class="header-anchor" href="#_2、依赖传递" aria-hidden="true">#</a> 2、依赖传递</h3>\n<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>依赖具有传递性:</p>\n<p>​\t\t直接依赖:在当前项目中通过依赖配置建立的依赖关系</p>\n<p>​\t\t间接依赖: 被资源的资源如果依赖其他资源，当前项目间接依赖其他资源</p>\n</div>\n<h3 id="_3、依赖传递冲突问题的优先顺序" tabindex="-1"><a class="header-anchor" href="#_3、依赖传递冲突问题的优先顺序" aria-hidden="true">#</a> 3、依赖传递冲突问题的优先顺序</h3>\n<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>路径优先:当依赖中出现相同的资源时，层级越深，优先级越低，层级越浅，优先级越高</p>\n<p>声明优先:当资源在相同层级被依赖时，配置顺序靠前的覆盖配置顺序靠后的</p>\n<p>特殊优先:当同级配置了相同资源的不同版本，后配置的覆盖先配置的</p>\n</div>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="16.jpg" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Maven%E8%AF%A6%E8%A7%A3/16.jpg" data="aurora"></p>\n<h3 id="_4、可选依赖" tabindex="-1"><a class="header-anchor" href="#_4、可选依赖" aria-hidden="true">#</a> 4、可选依赖</h3>\n<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>可选依赖指对外隐藏当前所依赖的资源——<span style="color:red"><strong>不透明</strong></span></p>\n</div>\n<div class="language-xml ext-xml line-numbers-mode"><pre v-pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>\n    <span class="token comment">&lt;!--具体依赖--\x3e</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>\n        <span class="token comment">&lt;!--依赖所属群组id--\x3e</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>\n        <span class="token comment">&lt;!--依赖所属项目id--\x3e</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>\n        <span class="token comment">&lt;!--依赖版本号--\x3e</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>\n        <span class="token comment">&lt;!--可选依赖指对外隐藏当前所依赖的资源--不透明--\x3e</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="_5、排除依赖" tabindex="-1"><a class="header-anchor" href="#_5、排除依赖" aria-hidden="true">#</a> 5、排除依赖</h3>\n<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>排除依赖指主动断开依赖的资源，被排除的资源无需指定版本——<span style="color:red"><strong>不需要</strong></span></p>\n<p>一般来讲只有在多个依赖项目冲突的时候才会使用exclusions来排除掉其他依赖</p>\n</div>\n<div class="language-xml ext-xml line-numbers-mode"><pre v-pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.hamcrest<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>hamcrest-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="_6、依赖范围" tabindex="-1"><a class="header-anchor" href="#_6、依赖范围" aria-hidden="true">#</a> 6、依赖范围</h3>\n<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>依赖的jar默认情况可以在任何地方使用，可以通过scope标签设定其作用范围</p>\n<p>作用范围</p>\n<ul>\n<li>主程序范围有效(main文件夹范围内)</li>\n<li>测试程序范围有效(test文件夹范围内)</li>\n<li>是否参与打包(package指令范围内)</li>\n</ul>\n</div>\n<table>\n<thead>\n<tr>\n<th style="text-align:center">scope</th>\n<th style="text-align:center">主代码</th>\n<th style="text-align:center">测试代码</th>\n<th style="text-align:center">打包</th>\n<th style="text-align:center">范例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style="text-align:center">compile（依赖）</td>\n<td style="text-align:center">Y</td>\n<td style="text-align:center">Y</td>\n<td style="text-align:center">Y</td>\n<td style="text-align:center">log4j</td>\n</tr>\n<tr>\n<td style="text-align:center">test</td>\n<td style="text-align:center"></td>\n<td style="text-align:center">Y</td>\n<td style="text-align:center"></td>\n<td style="text-align:center">junit</td>\n</tr>\n<tr>\n<td style="text-align:center">provided</td>\n<td style="text-align:center">Y</td>\n<td style="text-align:center">Y</td>\n<td style="text-align:center"></td>\n<td style="text-align:center">servlet-api</td>\n</tr>\n<tr>\n<td style="text-align:center">runtime</td>\n<td style="text-align:center"></td>\n<td style="text-align:center"></td>\n<td style="text-align:center">Y</td>\n<td style="text-align:center">jdbc</td>\n</tr>\n</tbody>\n</table>\n<h3 id="_7、依赖范围传递性" tabindex="-1"><a class="header-anchor" href="#_7、依赖范围传递性" aria-hidden="true">#</a> 7、依赖范围传递性</h3>\n<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>带有依赖范围的资源在进行传递时，作用范围将受到影响</p>\n</div>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="17.jpg" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Maven%E8%AF%A6%E8%A7%A3/17.jpg" data="aurora"></p>\n<h2 id="六、生命周期" tabindex="-1"><a class="header-anchor" href="#六、生命周期" aria-hidden="true">#</a> 六、生命周期</h2>\n<h3 id="_1、项目构建生命周期" tabindex="-1"><a class="header-anchor" href="#_1、项目构建生命周期" aria-hidden="true">#</a> 1、项目构建生命周期</h3>\n<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<ul>\n<li>Maven构建生命周期描述的是一次构建过程经历经历了多少个事件</li>\n<li>Maven对项目构建的生命周期划分为3套\n<ul>\n<li>clean: 清理工作</li>\n<li>default:核心工作，例如编译，测试,打包,部署等</li>\n<li>site: 产生报告，发布站点等</li>\n</ul>\n</li>\n</ul>\n</div>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="18.png" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Maven%E8%AF%A6%E8%A7%A3/18.png" data="aurora"></p>\n<h3 id="_2、clean生命周期" tabindex="-1"><a class="header-anchor" href="#_2、clean生命周期" aria-hidden="true">#</a> 2、clean生命周期</h3>\n<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>pre-clean         执行一-些需要在clean之前完成的工作</p>\n<p>clean                 移除所有上一次构建生成的文件post-clean</p>\n<p>post-clean        执行一些需要在clean之 后立刻完成的工作</p>\n</div>\n<h3 id="_3、default构建生命周期" tabindex="-1"><a class="header-anchor" href="#_3、default构建生命周期" aria-hidden="true">#</a> 3、default构建生命周期</h3>\n<table>\n<thead>\n<tr>\n<th style="text-align:left">阶段</th>\n<th style="text-align:left">释意</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style="text-align:left">validate（校验）</td>\n<td style="text-align:left">校验项目是否正确并且所有必要的信息可以完成项目的构建过程</td>\n</tr>\n<tr>\n<td style="text-align:left">initialize（初始化）</td>\n<td style="text-align:left">初始化构建状态，比如设置属性值</td>\n</tr>\n<tr>\n<td style="text-align:left">generate-sources（生成源代码）</td>\n<td style="text-align:left">生成包含在编译阶段中的任何源代码</td>\n</tr>\n<tr>\n<td style="text-align:left">process-sources（处理源代码）</td>\n<td style="text-align:left">处理源代码，比如说，过滤任意值</td>\n</tr>\n<tr>\n<td style="text-align:left">generate-resources（生成资源文件）</td>\n<td style="text-align:left">生成将会包含在项目包中的资源文件</td>\n</tr>\n<tr>\n<td style="text-align:left">precess-resources（处理资源文件）</td>\n<td style="text-align:left">复制和处理资源到目标目录，为打包阶段做好准备</td>\n</tr>\n<tr>\n<td style="text-align:left">complie（编译）</td>\n<td style="text-align:left">编译项目的源代码</td>\n</tr>\n<tr>\n<td style="text-align:left">process-classes（处理类文件）</td>\n<td style="text-align:left">处理编译生成的文件，比如说对Java class文件做字节码改善优化</td>\n</tr>\n<tr>\n<td style="text-align:left">generate-test-sources（生成测试源代码）</td>\n<td style="text-align:left">生成包含在编译阶段中的任何测试源代码</td>\n</tr>\n<tr>\n<td style="text-align:left">process-test-sources（处理测试源代码）</td>\n<td style="text-align:left">处理测试源代码，比如说，过滤任意值</td>\n</tr>\n<tr>\n<td style="text-align:left">generate-test-resources（生成测试资源文件）</td>\n<td style="text-align:left">为测试创建资源文件</td>\n</tr>\n<tr>\n<td style="text-align:left">precess-test-resources（处理测试资源文件）</td>\n<td style="text-align:left">复制和处理测试资源到目标目录</td>\n</tr>\n<tr>\n<td style="text-align:left">test-compile（编译测试源码）</td>\n<td style="text-align:left">编译测试源代码到测试目标目录</td>\n</tr>\n<tr>\n<td style="text-align:left">process-test-classes（处理测试类文件）</td>\n<td style="text-align:left">处理测试源代码编译生成的文件</td>\n</tr>\n<tr>\n<td style="text-align:left">test（测试）</td>\n<td style="text-align:left">使用合适的单元测试框架运行测试（Juint是其中之一）</td>\n</tr>\n<tr>\n<td style="text-align:left">prepare-package（准备打包）</td>\n<td style="text-align:left">在实际打包之前，执行任何的必要的操作为打包做准备</td>\n</tr>\n<tr>\n<td style="text-align:left">package（打包）</td>\n<td style="text-align:left">将编译后的代码打包成可分发格式的文件，比如JAR、WAR或者EAR文件</td>\n</tr>\n<tr>\n<td style="text-align:left">pre-intergration-test（集成测试前）</td>\n<td style="text-align:left">在执行集成测试前进行必要的动作，比如说，搭建需要的环境</td>\n</tr>\n<tr>\n<td style="text-align:left">intergration-test（集成测试）</td>\n<td style="text-align:left">处理和部署项目到可以运行集成测试环境中</td>\n</tr>\n<tr>\n<td style="text-align:left">post-intergration-test（集成测试后）</td>\n<td style="text-align:left">在执行集成测试完成后进行必要的动作，比如说，清理集成测试环境</td>\n</tr>\n<tr>\n<td style="text-align:left">verify（验证）</td>\n<td style="text-align:left">运行任意的检查来验证项目包有效且达到质量标准</td>\n</tr>\n<tr>\n<td style="text-align:left">install（安装）</td>\n<td style="text-align:left">安装项目包到本地仓库，这样项目包可以用做其他本地项目的依赖</td>\n</tr>\n<tr>\n<td style="text-align:left">deploy（部署）</td>\n<td style="text-align:left">将最终的项目包复制到远程仓库中与其他开发者和项目共享</td>\n</tr>\n</tbody>\n</table>\n<h3 id="_4、site构建生命周期" tabindex="-1"><a class="header-anchor" href="#_4、site构建生命周期" aria-hidden="true">#</a> 4、site构建生命周期</h3>\n<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>pre-site     执行一些需要在生成站点文档之前完成的工作</p>\n<p>site        生成项目的站点文档</p>\n<p>post-site    执行一些需要在生成站点文档之后完成的工作，并且为部署做准备</p>\n<p>site-deploy  将生成的站点文档部署到特定的服务器上</p>\n</div>\n<h2 id="七、插件" tabindex="-1"><a class="header-anchor" href="#七、插件" aria-hidden="true">#</a> 七、插件</h2>\n<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>插件与生命周期内的阶段绑定，在执行到对应生命周期时执行对应的插件功能</p>\n<p>默认maven在各个生命周期上绑定有预设的功能</p>\n<p>通过插件可以自定义其他功能</p>\n</div>\n<div class="language-xml ext-xml line-numbers-mode"><pre v-pre class="language-xml"><code><span class="token comment">&lt;!--构建--\x3e</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>\n    <span class="token comment">&lt;!--    设置插件--\x3e</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>  \n        <span class="token comment">&lt;!--  具体插件配置--\x3e</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>\n            <span class="token comment">&lt;!-- 组名--\x3e</span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>\n            <span class="token comment">&lt;!--  插件名--\x3e</span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-source-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>\n            <span class="token comment">&lt;!-- 版本号--\x3e</span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">></span></span>\n                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">></span></span>\n                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">></span></span>\n                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">></span></span>jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">></span></span>\n                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">></span></span>test-jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">></span></span>\n                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">></span></span>\n                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>phase</span><span class="token punctuation">></span></span>generate-test-resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>phase</span><span class="token punctuation">></span></span>\n                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">></span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="19.jpg" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Maven%E8%AF%A6%E8%A7%A3/19.jpg" data="aurora"></p>\n',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/maven/Maven详解.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"Maven详解",filePath:"D:/blog/docs/maven/Maven详解.md",filePathRelative:"maven/Maven详解.md",componentFilePath:"D:/blog/docs/.vuepress/.temp/pages/maven/Maven详解.html.vue",componentFilePathRelative:"pages/maven/Maven详解.html.vue",componentFileChunkName:"v-6c26f442",dataFilePath:"D:/blog/docs/.vuepress/.temp/pages/maven/Maven详解.html.js",dataFilePathRelative:"pages/maven/Maven详解.html.js",dataFileChunkName:"v-6c26f442",htmlFilePath:"D:/blog/docs/.vuepress/dist/maven/Maven详解.html",htmlFilePathRelative:"maven/Maven详解.html"},{data:{key:"v-435885cf",path:"/mybatis/Mybatis%E8%AF%A6%E8%A7%A3.html",title:"Mybatis详解",lang:"zh-CN",frontmatter:{title:"Mybatis详解",date:"2022/9/6 08:44",tag:["Java","mybatis","框架","ssm"],categories:["后端"],coverUrl:"https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/mybatis-logo.png"},excerpt:"",headers:[{level:2,title:"Mybatis简介",slug:"mybatis简介",children:[{level:3,title:"MyBatis历史",slug:"mybatis历史",children:[]},{level:3,title:"MyBatis特性",slug:"mybatis特性",children:[]},{level:3,title:"MyBatis下载",slug:"mybatis下载",children:[]},{level:3,title:"和其它持久化层技术对比",slug:"和其它持久化层技术对比",children:[]}]},{level:2,title:"搭建MyBatis",slug:"搭建mybatis",children:[{level:3,title:"创建数据库",slug:"创建数据库",children:[]},{level:3,title:"创建maven工程",slug:"创建maven工程",children:[]},{level:3,title:"创建MyBatis的核心配置文件",slug:"创建mybatis的核心配置文件",children:[]},{level:3,title:"创建mapper接口",slug:"创建mapper接口",children:[]},{level:3,title:"创建MyBatis的映射文件",slug:"创建mybatis的映射文件",children:[]},{level:3,title:"注册（引入）映射文件",slug:"注册-引入-映射文件",children:[]},{level:3,title:"通过Junit测试功能(main方法也可以)",slug:"通过junit测试功能-main方法也可以",children:[]}]},{level:2,title:"核心配置文件详解",slug:"核心配置文件详解",children:[]},{level:2,title:"默认的类型别名",slug:"默认的类型别名",children:[{level:3,title:"基本数据类型映射",slug:"基本数据类型映射",children:[]},{level:3,title:"封装类型映射",slug:"封装类型映射",children:[]}]},{level:2,title:"MyBatis的增删改查",slug:"mybatis的增删改查",children:[{level:3,title:"1、添加",slug:"_1、添加",children:[]},{level:3,title:"2、删除",slug:"_2、删除",children:[]},{level:3,title:"3、修改",slug:"_3、修改",children:[]},{level:3,title:"4、查询",slug:"_4、查询",children:[]}]},{level:2,title:"MyBatis获取参数值的两种方式（重点）",slug:"mybatis获取参数值的两种方式-重点",children:[{level:3,title:"单个字面量类型的参数",slug:"单个字面量类型的参数",children:[]},{level:3,title:"多个字面量类型的参数",slug:"多个字面量类型的参数",children:[]}]}],git:{}},key:"v-435885cf",path:"/mybatis/Mybatis%E8%AF%A6%E8%A7%A3.html",title:"Mybatis详解",lang:"zh-CN",frontmatter:{title:"Mybatis详解",date:"2022/9/6 08:44",tag:["Java","mybatis","框架","ssm"],categories:["后端"],coverUrl:"https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/mybatis-logo.png"},excerpt:"",headers:[{level:2,title:"Mybatis简介",slug:"mybatis简介",children:[{level:3,title:"MyBatis历史",slug:"mybatis历史",children:[]},{level:3,title:"MyBatis特性",slug:"mybatis特性",children:[]},{level:3,title:"MyBatis下载",slug:"mybatis下载",children:[]},{level:3,title:"和其它持久化层技术对比",slug:"和其它持久化层技术对比",children:[]}]},{level:2,title:"搭建MyBatis",slug:"搭建mybatis",children:[{level:3,title:"创建数据库",slug:"创建数据库",children:[]},{level:3,title:"创建maven工程",slug:"创建maven工程",children:[]},{level:3,title:"创建MyBatis的核心配置文件",slug:"创建mybatis的核心配置文件",children:[]},{level:3,title:"创建mapper接口",slug:"创建mapper接口",children:[]},{level:3,title:"创建MyBatis的映射文件",slug:"创建mybatis的映射文件",children:[]},{level:3,title:"注册（引入）映射文件",slug:"注册-引入-映射文件",children:[]},{level:3,title:"通过Junit测试功能(main方法也可以)",slug:"通过junit测试功能-main方法也可以",children:[]}]},{level:2,title:"核心配置文件详解",slug:"核心配置文件详解",children:[]},{level:2,title:"默认的类型别名",slug:"默认的类型别名",children:[{level:3,title:"基本数据类型映射",slug:"基本数据类型映射",children:[]},{level:3,title:"封装类型映射",slug:"封装类型映射",children:[]}]},{level:2,title:"MyBatis的增删改查",slug:"mybatis的增删改查",children:[{level:3,title:"1、添加",slug:"_1、添加",children:[]},{level:3,title:"2、删除",slug:"_2、删除",children:[]},{level:3,title:"3、修改",slug:"_3、修改",children:[]},{level:3,title:"4、查询",slug:"_4、查询",children:[]}]},{level:2,title:"MyBatis获取参数值的两种方式（重点）",slug:"mybatis获取参数值的两种方式-重点",children:[{level:3,title:"单个字面量类型的参数",slug:"单个字面量类型的参数",children:[]},{level:3,title:"多个字面量类型的参数",slug:"多个字面量类型的参数",children:[]}]}],content:'\r\n## Mybatis简介\r\n\r\n### MyBatis历史\r\n\r\n::: tip\r\n\r\nMyBatis最初是Apache的一个开源项目iBatis, 2010年6月这个项目由Apache Software Foundation迁移到了Google Code。随着开发团队转投Google Code旗下，iBatis3.x正式更名为MyBatis。代码于2013年11月迁移到Github\r\n\r\niBatis一词来源于“internet”和“abatis”的组合，是一个基于Java的持久层框架。iBatis提供的持久层框架包括SQL Maps和Data Access Objects（DAO）\r\n\r\n:::\r\n\r\n### MyBatis特性\r\n\r\n1. MyBatis 是支持定制化 SQL、存储过程以及高级映射的优秀的持久层框架\r\n2. MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集\r\n3. MyBatis可以使用简单的XML或注解用于配置和原始映射，将接口和Java的POJO（Plain Old Java Objects，普通的Java对象）映射成数据库中的记录\r\n4. MyBatis 是一个半自动的ORM（Object Relation Mapping）框架\r\n\r\n### MyBatis下载\r\n\r\nMybatis下载地址：[GitHub - mybatis/mybatis-3: MyBatis SQL mapper framework for Java](https://github.com/mybatis/mybatis-3)\r\n\r\n![1.png](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/1.png)\r\n\r\n### 和其它持久化层技术对比\r\n\r\n- JDBC\r\n\r\n  - SQL 夹杂在Java代码中耦合度高，导致硬编码内伤\r\n  - 维护不易且实际开发需求中 SQL 有变化，频繁修改的情况多见\r\n  - 代码冗长，开发效率低\r\n- Hibernate 和 JPA\r\n  - 操作简便，开发效率高\r\n  - 程序中的长难复杂 SQL 需要绕过框架\r\n  - 内部自动生产的 SQL，不容易做特殊优化\r\n  - 基于全映射的全自动框架，大量字段的 POJO 进行部分映射时比较困难\r\n  - 反射操作太多，导致数据库性能下降\r\n- MyBatis\r\n  - 轻量级，性能出色\r\n  - SQL 和 Java 编码分开，功能边界清晰。Java代码专注业务、SQL语句专注数据\r\n  - 开发效率稍逊于HIbernate，但是完全能够接受\r\n\r\n## 搭建MyBatis\r\n\r\n::: tip 开发环境\r\n\r\nIDE：IntelliJ IDEA 2022.2.1\r\n\r\n构建工具：apache-maven-3.8.4\r\n\r\nMySQL版本：mysql 8.0.25\r\n\r\nMyBatis版本：MyBatis 3.5.7\r\n\r\n:::\r\n\r\n### 创建数据库\r\n\r\n```sql\r\nSET NAMES utf8mb4;\r\nSET FOREIGN_KEY_CHECKS = 0;\r\n\r\n-- ----------------------------\r\n-- Table structure for games\r\n-- ----------------------------\r\nDROP TABLE IF EXISTS `games`;\r\nCREATE TABLE `games`  (\r\n  `id` int NOT NULL AUTO_INCREMENT,\r\n  `username` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,\r\n  `passwrod` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,\r\n  `type` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,\r\n  `company` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,\r\n  `year` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,\r\n  PRIMARY KEY (`id`) USING BTREE\r\n) ENGINE = InnoDB AUTO_INCREMENT = 5 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci ROW_FORMAT = Dynamic;\r\n\r\n-- ----------------------------\r\n-- Records of games\r\n-- ----------------------------\r\nINSERT INTO `games` VALUES (1, \'admin\', \'123456\', \'即时战略\', \'暴雪\', \'1995\');\r\nINSERT INTO `games` VALUES (2, \'test1\', \'123456\', \'RPG\', \'光荣\', \'1995\');\r\nINSERT INTO `games` VALUES (3, \'test2\', \'123456\', \'即时战略\', \'拳头\', \'2000\');\r\nINSERT INTO `games` VALUES (4, \'test3\', \'123456\', \'FPS\', \'未知\', \'1988\');\r\n\r\nSET FOREIGN_KEY_CHECKS = 1;\r\n```\r\n\r\n### 创建maven工程\r\n\r\n::: warning 警告\r\n\r\n在学习本文章前应先熟悉maven构建，并且在idea中已将maven配置好\r\n\r\n:::\r\n\r\n若还不知道maven工程如何构建，请点击查看：[Maven详解(基础到高级)(入门到入土) | 信仰的个人博客 (hyd0.cc)](https://hyd0.cc/maven/Maven详解.html)\r\n\r\n::: details 点击查看示例\r\n\r\n![2.png](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/2.png)\r\n\r\n:::\r\n\r\n构建完成后再工程根目录中找到pom.xml文件，引入对应依赖\r\n\r\n```xml\r\n<dependencies>\r\n    \x3c!-- Mybatis核心 --\x3e\r\n    <dependency>\r\n        <groupId>org.mybatis</groupId>\r\n        <artifactId>mybatis</artifactId>\r\n        <version>3.5.7</version>\r\n    </dependency>\r\n    \x3c!-- junit测试 --\x3e\r\n    <dependency>\r\n        <groupId>junit</groupId>\r\n        <artifactId>junit</artifactId>\r\n        <version>4.12</version>\r\n    </dependency>\r\n    \x3c!-- MySQL驱动 --\x3e\r\n    <dependency>\r\n        <groupId>mysql</groupId>\r\n        <artifactId>mysql-connector-java</artifactId>\r\n        <version>8.0.25</version>\r\n    </dependency>\r\n</dependencies>\r\n```\r\n\r\n::: details 点击查看示例\r\n\r\n![3.png](https://bdqn-blog.oss-cn-beijing.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/3.png)\r\n\r\n:::\r\n\r\n::: details 常见问题及解决方案\r\n\r\n因网速太慢导致依赖下载失败或者中途不小心点到退出\r\n\r\n解决方案：\r\n\r\n![4.png](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/4.png)\r\n\r\n若还是不行请更换网络或者配置maven国内镜像仓库后重试\r\n\r\n[配置阿里云的镜像仓库)](https://hyd0.cc/maven/Maven详解.html#_5、配置阿里云的镜像仓库)\r\n\r\n:::\r\n\r\n### 创建MyBatis的核心配置文件\r\n\r\n::: tip\r\n\r\n习惯上命名为mybatis-config.xml，这个文件名仅仅只是建议，并非强制要求。将来整合Spring之后，这个配置文件可以省略，但是其中的配置项非常重要，关乎到我们后面所有的开发。\r\n\r\n核心配置文件主要用于配置连接数据库的环境以及MyBatis的全局配置信息\r\n\r\n核心配置文件存放的位置是`src/main/resources`目录下\r\n\r\n:::\r\n\r\n```xml\r\n<?xml version="1.0" encoding="UTF-8" ?>\r\n<!DOCTYPE configuration\r\n        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"\r\n        "http://mybatis.org/dtd/mybatis-3-config.dtd">\r\n<configuration>\r\n    \x3c!-- 设置连接数据库的环境 default代表的是当前选择的环境 --\x3e\r\n    <environments default="development">\r\n        \x3c!-- 配置环境并将该套环境标识为development，供父级标签使用，可配置多套环境  --\x3e\r\n        <environment id="development">\r\n            \x3c!-- 配置事务管理器为JDBC --\x3e\r\n            <transactionManager type="JDBC"/>\r\n            \x3c!-- 配置数据源 --\x3e\r\n            <dataSource type="POOLED">\r\n                \x3c!-- 数据库驱动，数据库版本8.0以下的不用加cj --\x3e\r\n                <property name="driver" value="com.mysql.cj.jdbc.Driver"/>\r\n                \x3c!-- 数据库连接地址，8.0以上记得加上时区，否则会导致查询时间错乱 serverTimezone=UTC --\x3e\r\n                <property name="url" value="jdbc:mysql://localhost:3306/game?serverTimezone=UTC"/>\r\n                \x3c!-- 账号 --\x3e\r\n                <property name="username" value="root"/>\r\n                \x3c!-- 密码 --\x3e\r\n                <property name="password" value="1234"/>\r\n            </dataSource>\r\n        </environment>\r\n    </environments>\r\n</configuration>\r\n```\r\n\r\n::: details 点击查看示例\r\n\r\n在资源文件夹`src/main/resources`中，创建一个名为mybatis-config.xml的配置文件\r\n\r\n![5.png](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/5.png)\r\n\r\n根据注释进行配套环境设置\r\n\r\n![6.png](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/6.png)\r\n\r\n:::\r\n\r\n### 创建mapper接口\r\n\r\n::: tip\r\n\r\nMybatis中的mapper接口相当于以前的dao，但是区别在于，mapper仅仅是接口，我们不需要提供实现类\r\n\r\n:::\r\n\r\n```java\r\npackage cn.bdqn.mapper;\r\n\r\n/**\r\n * @ClassName: GameMapper\r\n * @Description: mapper接口\r\n * @Date: 2022-09-06 11:23:10\r\n * @Author: HuangYaoDong\r\n */\r\npublic interface GameMapper {\r\n\r\n    /**\r\n      * 添加游戏\r\n      *\r\n      * @date 2022/9/6 11:30\r\n      * @author HangYaoDong\r\n      * @return int 受影响的行数\r\n      */\r\n    int insertGame();\r\n\r\n}\r\n```\r\n\r\n::: details 点击查看示例\r\n\r\n![7.png](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/7.png)\r\n\r\n:::\r\n\r\n### 创建MyBatis的映射文件\r\n\r\n::: tip 相关概念\r\n\r\nORM（Object Relationship Mapping）对象关系映射\r\n\r\n- 对象：Java的实体类对象\r\n- 关系：关系型数据库\r\n- 映射：二者之间的对应关系\r\n\r\n:::\r\n\r\n| Java概念 | 数据库概念 |\r\n| :------: | :--------: |\r\n|    类    |     表     |\r\n|   属性   |  字段/列   |\r\n|   对象   |  记录/行   |\r\n\r\n<span style="color:red" >**映射文件的命名规则**</span>：与接口同名的xml文件\r\n\r\nMyBatis中可以面向接口操作数据，但是要保证接口及映射文件的一致：\r\n\r\n- mapper接口的全路径名（包名+类名）和映射文件的命名空间（namespace）保持一致\r\n- mapper接口中方法的方法名和映射文件中编写SQL的标签的id属性保持一致\r\n\r\n```xml\r\n<?xml version="1.0" encoding="UTF-8" ?>  \r\n<!DOCTYPE mapper  \r\nPUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  \r\n"http://mybatis.org/dtd/mybatis-3-mapper.dtd">  \r\n<mapper namespace="cn.bdqn.mapper.GameMapper">  \r\n\t\x3c!--int insertGame();--\x3e  \r\n\t<insert id="insertGame">  \r\n\t\tinsert into games(username,password,type,company,year) values(\'test4\',\'123456\',\'FPS\',\'未知\',\'2022\')  \r\n\t</insert>  \r\n</mapper>\r\n```\r\n\r\n::: details 点击查看示例\r\n\r\n![8.png](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/8.png)\r\n\r\n::: warning 注意\r\n\r\n添加`<insert></insert>`，修改`<update></update>`，删除`<delete></delete>`三个标签的返回值默认都是<span style="red">**int**</span>类型\r\n\r\n:::\r\n\r\n### 注册（引入）映射文件\r\n\r\n我们在映射文件中定义完SQL映射语句之后，首先，我们需要告诉mybatis到哪里去找到这些语句。但是，在自动查找资源方面，Java并没有提供一个很好的解决方案，所以最好的方法就是直接告诉mybatis到哪里去找映射文件，如下：\r\n\r\n```xml\r\n<mappers>\r\n    <mapper resource="mapper/GameMapper.xml"></mapper>\r\n</mappers>\r\n```\r\n\r\n::: details 点击查看解析\r\n\r\n![9.png](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/9.png)\r\n\r\n:::\r\n\r\nmybatis给我们提供了四种注册映射文件的方式，详情请点击下方查看：\r\n\r\n::: details 点击查看<span style="color:red" >映射器（mappers）</span>详细配置\r\n\r\n#### 1、resource\r\n\r\nresource中填写的路径是针对于编译后映射文件的所处位置，可从编译文件夹中查看，idea是`out`文件夹。\r\n\r\n若映射文件处于资源文件夹(resources)中时，resource属性中填写的就是映射文件与resources的相对路径。\r\n\r\n若映射文件处于java文件夹其下，那resource属性中填写的就是映射文件与java的相对路径，注意，在此环境下包名也算是文件夹，需要以路径的形式写入。\r\n\r\n![10.png](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/10.png)\r\n\r\n#### 2、url\r\n\r\n直接使用对于mybatis映射文件的绝对路径或者相对路径，这个使用的比较少，仅做了解扩展即可\r\n\r\n![11.png](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/11.png)\r\n\r\n#### 3、class\r\n\r\nclass属性比较特殊，他是直接注册当前接口，一般来讲都是在无映射文件的时候直接在接口的方法上方使用注解进行开发才会用到的，例如：\r\n\r\n![12.png](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/12.png)\r\n\r\n<span style="color:red" >**不推荐使用此种模式开发，因为当遇到复杂sql的时候整个sql语句会显得特别杂乱，不好维护**</span>\r\n\r\n#### 4、package标签\r\n\r\n以上三种方式都是只要你有一个接口或者一个映射文件就必须要去mybatis配置文件中注册一次，也就是说如果你有100个接口，那么你就要写100次\r\n\r\n`<mapper resource="">`标签\r\n\r\n这样太过于繁琐，并且也不利于维护，所以mybatis给我们提供了一种批量注册的方式，虽然说局限性有点儿大\r\n\r\n首先，要使用package标签必须保证：\r\n\r\n1. 当前所有的接口及映射文件必须位于同一个包下\r\n2. 映射文件的名称必须和接口类名一致\r\n\r\n当满足以上条件时，我们只需要在package标签的name属性中填入接口及映射文件所在的全路径包名即可， 并且无论有多少个接口都能够实现自动注册\r\n\r\n方式一：\r\n\r\n![13.png](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/13.png)\r\n\r\n方式二：\r\n\r\n![19.png](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/19.png)\r\n\r\n::: warning 提示\r\n\r\n因为mybatis的判定方式是编译后的文件夹，所以我们可以直接在Resources中使用相同目录的方式让映射文件与接口处于同一个包下\r\n\r\n:::\r\n\r\n### 通过Junit测试功能(main方法也可以)\r\n\r\n::: tip\r\n\r\n通过Junit的`@Test`注解可以实现类似于main方法一样的运行，无需通过服务器编译调用\r\n\r\n使用方式也简单，只需把`@Test`注解加在你要调用的方法上方即可\r\n\r\n:::\r\n\r\n```java\r\npackage cn.bdqn.mapper;\r\n\r\nimport org.apache.ibatis.io.Resources;\r\nimport org.apache.ibatis.session.SqlSession;\r\nimport org.apache.ibatis.session.SqlSessionFactory;\r\nimport org.apache.ibatis.session.SqlSessionFactoryBuilder;\r\nimport org.junit.Test;\r\n\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\n\r\n/**\r\n * @ClassName: UserMapperTest\r\n * @Description: 测试类\r\n * @Date: 2022-09-07 08:50:08\r\n * @Author: HuangYaoDong\r\n */\r\npublic class GameMapperTest {\r\n\r\n    @Test\r\n    public void testInsertGame() throws IOException {\r\n        //读取mybatis的核心配置文件\r\n        InputStream inputStream = Resources.getResourceAsStream("mybatis-config.xml");\r\n        //获取SqlSessionFactoryBuilder对象（工厂构建者）\r\n        SqlSessionFactoryBuilder sqlSessionFactoryBuilder = new SqlSessionFactoryBuilder();\r\n        //通过核心配置文件所对应的字节输入流创建工厂类SqlSessionFactory，生产SqlSession对象\r\n        SqlSessionFactory sqlSessionFactory = sqlSessionFactoryBuilder.build(inputStream);\r\n        //获取SqlSession，此时通过SqlSession对象所操作的sql都必须手动提交或者回滚事务\r\n        SqlSession sqlSession = sqlSessionFactory.openSession();\r\n        //通过代理模式创建GameMapper接口的代理实现类对象\r\n        GameMapper gameMapper = sqlSession.getMapper(GameMapper.class);\r\n        //调用UserMapper接口中的方法，就可以根据UserMapper的全类名匹配元素文件，通过调用的方法名匹配映射文件中的SQL标签，并执行标签中的SQL语句\r\n        int i = gameMapper.insertGame();\r\n        //提交事务，SqlSession默认是手动提交事务，即增删改不提交事务则数据库中不生效\r\n        sqlSession.commit();\r\n        System.out.println("数据库受影响行数："+i+"行");\r\n    }\r\n\r\n}\r\n```\r\n\r\n执行后控制台显示：\r\n\r\n```java\r\n数据库受影响行数：1行\r\n```\r\n\r\n::: details 点击查看解析\r\n\r\n![14.png](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/14.png)\r\n\r\n#### 步骤一：\r\n\r\n​\t\t使用Resources.getResourceAsStream读取`mybatis-config.xml`核心配置文件，这是为了获取到数据库链接以及在配置文件中所注册的映射文件位置\r\n\r\n#### 步骤二：\r\n\r\n​\t\t获取工厂构建者SqlSessionFactoryBuilder对象，此对象在全局中唯一的作用就是创建出SqlSessionFactory工厂对象，就好比是一个建筑团队，在一个地方去建造汽车工厂，工厂建造完了之后就不需要建筑团队了，工厂自己本身就可以源源不断的生产汽车，同理SqlSessionFactoryBuilder也是一样，当SqlSessionFactoryBuilder（建筑团队）把SqlSessionFactory（汽车工厂）构建完成之后，SqlSessionFactory就可以源源不断的生产SqlSession（汽车）\r\n\r\n|           对象           |                     解析                      |\r\n| :----------------------: | :-------------------------------------------: |\r\n| SqlSessionFactoryBuilder |  通过读取到的配置文件来构建SqlSessionFactory  |\r\n|    SqlSessionFactory     |   SqlSession工厂，专门用来生产SqlSession的    |\r\n|        SqlSession        | 完全包含以数据库为背景的所有执行SQL操作的方法 |\r\n\r\n总而言之，在绝大多数的时候，SqlSessionFactoryBuilder在全局中只会执行一次，所以大部分人都会把他设置为一个单例对象\r\n\r\n#### 步骤三：\r\n\r\n​\t\t通过代理模式创建GameMapper接口的代理实现类对象，使用SqlSession对象的实例获取到我们所要去调用的mapper接口，并且通过代理的方式将该类的实现获取到，直接调用其中的方法就可执行映射文件中对应的sql语句并返回结果\r\n\r\n​\t\t但是需要注意，此时若是执行<span style="color:red">增删改</span>操作的话，需要手动提交事务才能让数据持久化到数据库中。若想实现自动提交事务可将事务交由mybatis进行管理，只需在初始化SqlSession对象时加上一个参数即可，如下：\r\n\r\n```java\r\n//创建SqlSession对象，此时通过SqlSession对象所操作的sql都会自动提交  \r\nSqlSession sqlSession = sqlSessionFactory.openSession(true);\r\n```\r\n\r\n::: tip 步骤总结\r\n\r\n1. 读取mybatis-config.xml核心配置文件\r\n2. 创建SqlSessionFactoryBuilder对象\r\n3. 创建SqlSessionFactory对象\r\n4. 创建SqlSession对象\r\n5. 通过sqlSession.getMapper()方法获取mapper接口实例\r\n6. 调用方法并返回值\r\n\r\n:::\r\n\r\n::: details 常见报错\r\n\r\n#### 1、`@Test`注解爆红无法使用\r\n\r\n![15.png](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/15.png)\r\n\r\n解决方式：检查pom.xml中是否有导入对应的依赖\r\n\r\n```xml\r\n\x3c!-- junit测试 --\x3e\r\n<dependency>\r\n    <groupId>junit</groupId>\r\n    <artifactId>junit</artifactId>\r\n    <version>4.12</version>\r\n</dependency>\r\n```\r\n\r\n#### 2、Resources无法调用getResourceAsStream方法，方法爆红\r\n\r\n![16.png](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/16.png)\r\n\r\n解决方式：根本原因在于Resources引入错误，Resources应该是要在`org.apache.ibatis.io.Resources`下的才对\r\n\r\n![17.png](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/17.png)\r\n\r\n#### 3、明明已经执行了，也没有报错，数据库的数据却没有更新\r\n\r\n解决方式：检查是否开启事务自动提交，若未开启则尝试手动提交事务，详情请自行查看上方解析\r\n\r\n#### 4、报错：<span style="color:red">Type interface cn.bdqn.mapper.GameMapper is not known to the MapperRegistry</span>\r\n\r\n报错原因：MapperRegistry找不到cn.bdqn.mapper.GameMapper，mybatis核心配置文件中没有注册该映射文件\r\n\r\n解决方式：注册一下映射文件即可\r\n\r\n![18.png](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/18.png)\r\n\r\n:::\r\n\r\n## 核心配置文件详解\r\n\r\n::: tip 核心配置文件\r\n\r\n核心配置文件中的标签必须按照固定的顺序(有的标签可以不写，但顺序一定不能乱)从上往下的顺序依次为：\r\n\r\nproperties、settings、typeAliases、typeHandlers、objectFactory、objectWrapperFactory、reflectorFactory、plugins、environments、databaseIdProvider、mappers\r\n\r\n:::\r\n\r\n```xml\r\n<?xml version="1.0" encoding="UTF-8" ?>\r\n<!DOCTYPE configuration\r\n        PUBLIC "-//MyBatis.org//DTD Config 3.0//EN"\r\n        "http://MyBatis.org/dtd/MyBatis-3-config.dtd">\r\n<configuration>\r\n    \x3c!--引入properties文件，此时就可以${属性名}的方式访问属性值--\x3e\r\n    <properties resource="jdbc.properties"></properties>\r\n    <settings>\r\n        \x3c!--将表中字段的下划线自动转换为驼峰--\x3e\r\n        <setting name="mapUnderscoreToCamelCase" value="true"/>\r\n        \x3c!--开启延迟加载--\x3e\r\n        <setting name="lazyLoadingEnabled" value="true"/>\r\n    </settings>\r\n    <typeAliases>\r\n        \x3c!--\r\n        typeAlias：设置某个具体的类型的别名\r\n        属性：\r\n        type：需要设置别名的类型的全类名\r\n        alias：设置此类型的别名，且别名不区分大小写。若不设置此属性，该类型拥有默认的别名，即类名\r\n        --\x3e\r\n        \x3c!--<typeAlias type="cn.bdqn.model.Game"></typeAlias>--\x3e\r\n        \x3c!--<typeAlias type="cn.bdqn.model.Game" alias="game">\r\n        </typeAlias>--\x3e\r\n        \x3c!--以包为单位，设置改包下所有的类型都拥有默认的别名，即类名且不区分大小写--\x3e\r\n        <package name="cn.bdqn.model"/>\r\n    </typeAliases>\r\n    \x3c!--\r\n    environments：设置多个连接数据库的环境\r\n    属性：\r\n\t    default：设置默认使用的环境的id\r\n    --\x3e\r\n    <environments default="mysql_test">\r\n        \x3c!--\r\n        environment：设置具体的连接数据库的环境信息\r\n        属性：\r\n\t        id：设置环境的唯一标识，可通过environments标签中的default设置某一个环境的id，表示默认使用的环境\r\n        --\x3e\r\n        <environment id="mysql_test">\r\n            \x3c!--\r\n            transactionManager：设置事务管理方式\r\n            属性：\r\n\t            type：设置事务管理方式，type="JDBC|MANAGED"\r\n\t            type="JDBC"：设置当前环境的事务管理都必须手动处理\r\n\t            type="MANAGED"：设置事务被管理，例如spring中的AOP\r\n            --\x3e\r\n            <transactionManager type="JDBC"/>\r\n            \x3c!--\r\n            dataSource：设置数据源\r\n            属性：\r\n\t            type：设置数据源的类型，type="POOLED|UNPOOLED|JNDI"\r\n\t            type="POOLED"：使用数据库连接池，即会将创建的连接进行缓存，下次使用可以从缓存中直接获取，不需要重新创建\r\n\t            type="UNPOOLED"：不使用数据库连接池，即每次使用连接都需要重新创建\r\n\t            type="JNDI"：调用上下文中的数据源\r\n            --\x3e\r\n            <dataSource type="POOLED">\r\n                \x3c!--设置驱动类的全类名--\x3e\r\n                <property name="driver" value="${jdbc.driver}"/>\r\n                \x3c!--设置连接数据库的连接地址--\x3e\r\n                <property name="url" value="${jdbc.url}"/>\r\n                \x3c!--设置连接数据库的用户名--\x3e\r\n                <property name="username" value="${jdbc.username}"/>\r\n                \x3c!--设置连接数据库的密码--\x3e\r\n                <property name="password" value="${jdbc.password}"/>\r\n            </dataSource>\r\n        </environment>\r\n    </environments>\r\n    \x3c!--引入映射文件--\x3e\r\n    <mappers>\r\n        \x3c!-- <mapper resource="GameMapper.xml"/> --\x3e\r\n        \x3c!--\r\n        以包为单位，将包下所有的映射文件引入核心配置文件\r\n        注意：\r\n\t\t\t1. 此方式必须保证mapper接口和mapper映射文件必须在相同的包下\r\n\t\t\t2. mapper接口要和mapper映射文件的名字一致\r\n        --\x3e\r\n        <package name="cn.bdqn.mapper"/>\r\n    </mappers>\r\n</configuration>\r\n```\r\n\r\n## 默认的类型别名\r\n\r\n### 基本数据类型映射\r\n\r\n| Alias(别名) | Mapped Type（对应类型） |\r\n| :---------: | :---------------------: |\r\n|    _byte    |          byte           |\r\n|    _long    |          long           |\r\n|   _short    |          short          |\r\n|    _int     |           int           |\r\n|  _integer   |           int           |\r\n|   _double   |         double          |\r\n|   _float    |          float          |\r\n|  _boolean   |         boolean         |\r\n\r\n### 封装类型映射\r\n\r\n| Alias(别名) | Mapped Type（对应类型） |\r\n| :---------: | :---------------------: |\r\n|   string    |         String          |\r\n|    byte     |          Byte           |\r\n|    long     |          Long           |\r\n|    short    |          Short          |\r\n|     int     |         Integer         |\r\n|   integer   |         Integer         |\r\n|   double    |         Double          |\r\n|    float    |          Float          |\r\n|   boolean   |         Boolean         |\r\n|    date     |          Date           |\r\n|   decimal   |       BigDecimal        |\r\n| bigdecimal  |       BigDecimal        |\r\n|   object    |         Object          |\r\n|     map     |           Map           |\r\n|   hashmap   |         HashMap         |\r\n|    list     |          List           |\r\n|  arraylist  |        ArrayList        |\r\n| collection  |       Collection        |\r\n|  iterator   |        Iterator         |\r\n\r\n## MyBatis的增删改查\r\n\r\n### 1、添加\r\n\r\n```xml\r\n\x3c!-- 接口中的方法 int insertGame();--\x3e\r\n<insert id="insertGame">\r\n    insert into games(username,password,type,company,year) values(\'test4\',\'123456\',\'FPS\',\'未知\',\'2022\')\r\n</insert>\r\n```\r\n\r\n### 2、删除\r\n\r\n```xml\r\n\x3c!-- 接口中的方法 int deleteGame();--\x3e\r\n<delete id="deleteGame">\r\n    delete from games where id = 1\r\n</delete>\r\n```\r\n\r\n### 3、修改\r\n\r\n```xml\r\n\x3c!-- 接口中的方法 int updateGame();--\x3e\r\n<update id="updateGame">\r\n    UPDATE `game`.`games` \r\n    SET `username` = \'admin\',\r\n    `password` = \'123456\',\r\n    `type` = \'即时战略\',\r\n    `company` = \'暴雪\',\r\n    `year` = \'1995\' \r\n    WHERE\r\n    `id` = 1;\r\n</update>\r\n```\r\n\r\n### 4、查询\r\n\r\n::: warning 注意\r\n\r\n查询的标签select相比于其他标签比较特殊，添加、删除、修改的返回值都是受影响的行数所以类型都为int类型，但是查询不一样，查询的返回类型是多变的，通常情况下mybatis是不知道你要返回的数据是什么类型的，所以需要我们手动去指定\r\n\r\n查询的标签必须设置属性`resultType`或者`resultMap`,用来指定实体类与数据库表的映射关系，其实这一步骤相当于我们之前的ResultSet设置实体类，只不过mybatis帮我们做了这一件事情，我们只需要设置返回类型，其余映射的mybatis会自动帮我们完成\r\n\r\n:::\r\n\r\n::: warning resultType与resultMap的区别\r\n\r\nresultType采用的是自动映射，也就是说只要你实体类的属性名称与数据库表的列名一致，那么mybatis就能够直接进行映射\r\n\r\nresultMap是为自定义映射，通常用于一对多、多对一的复杂查询，或者实体类属性名与数据库列明不一致的情况\r\n\r\n:::\r\n\r\n#### 查询单条数据\r\n\r\n创建实体类\r\n\r\n::: details 点击查看代码\r\n\r\n```java\r\npackage cn.bdqn.model;\r\n\r\n/**\r\n * @ClassName: Games\r\n * @Description: Game实体类\r\n * @Date: 2022-09-07 11:34:01\r\n * @Author: HuangYaoDong\r\n */\r\npublic class Game {\r\n\r\n    private int id;\r\n    private String username;\r\n    private String password;\r\n    private String type;\r\n    private String company;\r\n    private String year;\r\n\r\n    public int getId() {\r\n        return id;\r\n    }\r\n\r\n    public void setId(int id) {\r\n        this.id = id;\r\n    }\r\n\r\n    public String getUsername() {\r\n        return username;\r\n    }\r\n\r\n    public void setUsername(String username) {\r\n        this.username = username;\r\n    }\r\n\r\n    public String getPassword() {\r\n        return password;\r\n    }\r\n\r\n    public void setPassword(String password) {\r\n        this.password = password;\r\n    }\r\n\r\n    public String getType() {\r\n        return type;\r\n    }\r\n\r\n    public void setType(String type) {\r\n        this.type = type;\r\n    }\r\n\r\n    public String getCompany() {\r\n        return company;\r\n    }\r\n\r\n    public void setCompany(String company) {\r\n        this.company = company;\r\n    }\r\n\r\n    public String getYear() {\r\n        return year;\r\n    }\r\n\r\n    public void setYear(String year) {\r\n        this.year = year;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return "Game{" +\r\n                "id=" + id +\r\n                ", username=\'" + username + \'\\\'\' +\r\n                ", password=\'" + password + \'\\\'\' +\r\n                ", type=\'" + type + \'\\\'\' +\r\n                ", company=\'" + company + \'\\\'\' +\r\n                ", year=\'" + year + \'\\\'\' +\r\n                \'}\';\r\n    }\r\n}\r\n```\r\n\r\n:::\r\n\r\n编写mapper接口代码\r\n\r\n```java\r\n/**\r\n  * 查询单条数据\r\n  *\r\n  * @date 2022/9/7 11:37\r\n  * @author HangYaoDong\r\n  * @return cn.bdqn.model.Game 游戏信息\r\n  */\r\nGame selectOneGame();\r\n```\r\n\r\n编写mapper映射文件\r\n\r\n```xml\r\n<select id="selectOneGame" resultType="cn.bdqn.model.Game">\r\n    select * from games limit 1\r\n</select>\r\n```\r\n\r\n测试：\r\n\r\n```java\r\n@Test\r\npublic void testInsertGame() throws IOException {\r\n    //读取mybatis的核心配置文件\r\n    InputStream inputStream = Resources.getResourceAsStream("mybatis-config.xml");\r\n    //获取SqlSessionFactoryBuilder对象（工厂构建者）\r\n    SqlSessionFactoryBuilder sqlSessionFactoryBuilder = new SqlSessionFactoryBuilder();\r\n    //通过核心配置文件所对应的字节输入流创建工厂类SqlSessionFactory，生产SqlSession对象\r\n    SqlSessionFactory sqlSessionFactory = sqlSessionFactoryBuilder.build(inputStream);\r\n    //获取SqlSession，此时通过SqlSession对象所操作的sql都必须手动提交或者回滚事务\r\n    SqlSession sqlSession = sqlSessionFactory.openSession();\r\n    //通过代理模式创建GameMapper接口的代理实现类对象\r\n    GameMapper gameMapper = sqlSession.getMapper(GameMapper.class);\r\n    //调用UserMapper接口中的方法，就可以根据UserMapper的全类名匹配元素文件，通过调用的方法名匹配映射文件中的SQL标签，并执行标签中的SQL语句\r\n    Game game = gameMapper.selectOneGame();\r\n    System.out.println(game);\r\n}\r\n```\r\n\r\n运行结果：\r\n\r\n![20.png](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/20.png)\r\n\r\n::: details 点击查看详细解析\r\n\r\n![21.png](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/21.png)\r\n\r\n:::\r\n\r\n#### 查询多条数据\r\n\r\n::: warning 返回值\r\n\r\n当查询的数据为多条时，不能使用实体类作为返回值，只能使用集合，否则会抛出异常<span style="color:red">**TooManyResultsException**</span>,但若查询的数据只有一条时，可以使用实体类或者集合作为返回类型\r\n\r\n:::\r\n\r\n编写mapper接口代码\r\n\r\n```java\r\n/**\r\n  * 查询多条数据\r\n  *\r\n  * @date 2022/9/7 11:55\r\n  * @author HangYaoDong\r\n  * @return java.util.List<cn.bdqn.model.Game> 游戏信息集合\r\n  */\r\nList<Game> selectGameList();\r\n```\r\n\r\n编写mapper映射文件\r\n\r\n::: warning resultType返回值\r\n\r\n查询多条数据的时候，接口中方法返回值必须为集合，resultType内的值为集合的泛型，mybatis会自动进行数据填充\r\n\r\n:::\r\n\r\n```xml\r\n<select id="selectGameList" resultType="cn.bdqn.model.Game">\r\n    select * from games\r\n</select>\r\n```\r\n\r\n测试\r\n\r\n```java\r\n@Test\r\npublic void testInsertGame() throws IOException {\r\n    //读取mybatis的核心配置文件\r\n    InputStream inputStream = Resources.getResourceAsStream("mybatis-config.xml");\r\n    //获取SqlSessionFactoryBuilder对象（工厂构建者）\r\n    SqlSessionFactoryBuilder sqlSessionFactoryBuilder = new SqlSessionFactoryBuilder();\r\n    //通过核心配置文件所对应的字节输入流创建工厂类SqlSessionFactory，生产SqlSession对象\r\n    SqlSessionFactory sqlSessionFactory = sqlSessionFactoryBuilder.build(inputStream);\r\n    //获取SqlSession，此时通过SqlSession对象所操作的sql都必须手动提交或者回滚事务\r\n    SqlSession sqlSession = sqlSessionFactory.openSession();\r\n    //通过代理模式创建GameMapper接口的代理实现类对象\r\n    GameMapper gameMapper = sqlSession.getMapper(GameMapper.class);\r\n    //调用UserMapper接口中的方法，就可以根据UserMapper的全类名匹配元素文件，通过调用的方法名匹配映射文件中的SQL标签，并执行标签中的SQL语句\r\n    List<Game> list = gameMapper.selectGameList();\r\n    //提交事务，SqlSession默认是手动提交事务，即增删改不提交事务则数据库中不生效\r\n    for (Game game : list) {\r\n        System.out.println(game);\r\n    }\r\n}\r\n```\r\n\r\n运行结果：\r\n\r\n![22.png](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/22.png)\r\n\r\n## MyBatis获取参数值的两种方式（<span style="color:red">重点</span>）\r\n\r\n::: tip\r\n\r\n以上我们所进行的操作全部都是直接在sql中把值定死的，但是实际开发中这么去写显然是不合理的\r\n\r\nmybatis给我们提供了两种方式进行传参，分别是`${}`与`#{}`\r\n\r\n`${}`的本质就是字符串拼接，`${}`使用字符串拼接的方式拼接sql，若为字符串类型或日期类型的字段进行赋值时，需要手动加单引号\r\n\r\n`#{}`的本质就是字符串替换，`#{}`使用占位符赋值的方式拼接sql，此时为字符串类型或日期类型的字段进行赋值时，可以自动添加单引号\r\n\r\n:::\r\n\r\n::: danger 警告\r\n\r\n我们之前在学习JDBC的时候就已经讲过了，在程序中最好不要使用`${}`也就是字符串拼接，因为这种拼接方式是有被SQL注入的风险的，所以一般来讲我们在开发的时候用的都是`#{}`字符串替换\r\n\r\n:::\r\n\r\n### 单个字面量类型的参数\r\n\r\n![23.png](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/23.png)\r\n\r\n::: details 使用${}方式传参，仅演示一次，因使用次数较少不过多演示\r\n\r\n```xml\r\n\x3c!--Game selectGameByName(String name);--\x3e\r\n<select id="selectGameByName" resultType="Game">  \r\n\tselect * from games where name = \'${name}\'  \r\n</select>\r\n```\r\n\r\n:::\r\n\r\n### 多个字面量类型的参数\r\n\r\n::: tip\r\n\r\n当mapper接口中的参数为多个时，mybatis会自动将这些参数放在一个map集合当中，在这个由参数组成的map集合里，key划分为两种，分别是：\r\n\r\n1. 以`arg0`,`arg1`...为键（key），以参数为值（value）\r\n2. 以`param1`，`param2`...为键（key），以参数为值（value）\r\n\r\n因此，我们只需要通过`${}`或`#{}`来访问map集合的键就可以获取到对应的值，注意如果你使用的是${}的话记得手动加上单引号\r\n\r\n使用arg或者param都行，但是要注意的是：\r\n\r\n1. arg是从起始索引0开始计算的，假设现在有两个参数需要调用，按照从左往右的顺序，第一个参数就是arg0，第二个参数就是arg1以此类推\r\n2. param是从参数位置1开始计算的，假设现在有两个参数需要调用，按照从左往右的顺序，第一个参数就是param1，第二个参数就是param2以此类推\r\n\r\n:::\r\n\r\n::: danger 警告\r\n\r\n当你有多个参数，并且保持默认状态没有指定各参数的标识名称时，是无法直接使用参数名称来进行调用的，可调用方式仅局限于arg及param\r\n\r\n:::\r\n\r\n使用arg的方式进行参数调用：\r\n\r\n![24.png](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/24.png)\r\n\r\n```xml\r\n\x3c!-- Game selectGameByName(String name,String type) --\x3e\r\n<select id="selectGameByName" resultType="cn.bdqn.model.Game">\r\n    select * from games where username = #{arg0} and type = #{arg1}\r\n</select>\r\n```\r\n\r\n使用param的方式进行参数调用：\r\n\r\n![25.png](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/25.png)\r\n\r\n```xml\r\n\x3c!-- Game selectGameByName(String name,String type) --\x3e\r\n<select id="selectGameByName" resultType="cn.bdqn.model.Game">\r\n    select * from games where username = #{param1} and type = #{param2}\r\n</select>\r\n```\r\n\r\n',contentRendered:'<h2 id="mybatis简介" tabindex="-1"><a class="header-anchor" href="#mybatis简介" aria-hidden="true">#</a> Mybatis简介</h2>\n<h3 id="mybatis历史" tabindex="-1"><a class="header-anchor" href="#mybatis历史" aria-hidden="true">#</a> MyBatis历史</h3>\n<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>MyBatis最初是Apache的一个开源项目iBatis, 2010年6月这个项目由Apache Software Foundation迁移到了Google Code。随着开发团队转投Google Code旗下，iBatis3.x正式更名为MyBatis。代码于2013年11月迁移到Github</p>\n<p>iBatis一词来源于“internet”和“abatis”的组合，是一个基于Java的持久层框架。iBatis提供的持久层框架包括SQL Maps和Data Access Objects（DAO）</p>\n</div>\n<h3 id="mybatis特性" tabindex="-1"><a class="header-anchor" href="#mybatis特性" aria-hidden="true">#</a> MyBatis特性</h3>\n<ol>\n<li>MyBatis 是支持定制化 SQL、存储过程以及高级映射的优秀的持久层框架</li>\n<li>MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集</li>\n<li>MyBatis可以使用简单的XML或注解用于配置和原始映射，将接口和Java的POJO（Plain Old Java Objects，普通的Java对象）映射成数据库中的记录</li>\n<li>MyBatis 是一个半自动的ORM（Object Relation Mapping）框架</li>\n</ol>\n<h3 id="mybatis下载" tabindex="-1"><a class="header-anchor" href="#mybatis下载" aria-hidden="true">#</a> MyBatis下载</h3>\n<p>Mybatis下载地址：<a href="https://github.com/mybatis/mybatis-3" target="_blank" rel="noopener noreferrer">GitHub - mybatis/mybatis-3: MyBatis SQL mapper framework for Java<ExternalLinkIcon/></a></p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="1.png" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/1.png" data="aurora"></p>\n<h3 id="和其它持久化层技术对比" tabindex="-1"><a class="header-anchor" href="#和其它持久化层技术对比" aria-hidden="true">#</a> 和其它持久化层技术对比</h3>\n<ul>\n<li>\n<p>JDBC</p>\n<ul>\n<li>SQL 夹杂在Java代码中耦合度高，导致硬编码内伤</li>\n<li>维护不易且实际开发需求中 SQL 有变化，频繁修改的情况多见</li>\n<li>代码冗长，开发效率低</li>\n</ul>\n</li>\n<li>\n<p>Hibernate 和 JPA</p>\n<ul>\n<li>操作简便，开发效率高</li>\n<li>程序中的长难复杂 SQL 需要绕过框架</li>\n<li>内部自动生产的 SQL，不容易做特殊优化</li>\n<li>基于全映射的全自动框架，大量字段的 POJO 进行部分映射时比较困难</li>\n<li>反射操作太多，导致数据库性能下降</li>\n</ul>\n</li>\n<li>\n<p>MyBatis</p>\n<ul>\n<li>轻量级，性能出色</li>\n<li>SQL 和 Java 编码分开，功能边界清晰。Java代码专注业务、SQL语句专注数据</li>\n<li>开发效率稍逊于HIbernate，但是完全能够接受</li>\n</ul>\n</li>\n</ul>\n<h2 id="搭建mybatis" tabindex="-1"><a class="header-anchor" href="#搭建mybatis" aria-hidden="true">#</a> 搭建MyBatis</h2>\n<div class="custom-container tip"><p class="custom-container-title">开发环境</p>\n<p>IDE：IntelliJ IDEA 2022.2.1</p>\n<p>构建工具：apache-maven-3.8.4</p>\n<p>MySQL版本：mysql 8.0.25</p>\n<p>MyBatis版本：MyBatis 3.5.7</p>\n</div>\n<h3 id="创建数据库" tabindex="-1"><a class="header-anchor" href="#创建数据库" aria-hidden="true">#</a> 创建数据库</h3>\n<div class="language-sql ext-sql line-numbers-mode"><pre v-pre class="language-sql"><code><span class="token keyword">SET</span> NAMES utf8mb4<span class="token punctuation">;</span>\n<span class="token keyword">SET</span> FOREIGN_KEY_CHECKS <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\n<span class="token comment">-- ----------------------------</span>\n<span class="token comment">-- Table structure for games</span>\n<span class="token comment">-- ----------------------------</span>\n<span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">`</span>games<span class="token punctuation">`</span></span><span class="token punctuation">;</span>\n<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>games<span class="token punctuation">`</span></span>  <span class="token punctuation">(</span>\n  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">int</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>username<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8mb4 <span class="token keyword">COLLATE</span> utf8mb4_unicode_ci <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>passwrod<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8mb4 <span class="token keyword">COLLATE</span> utf8mb4_unicode_ci <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>type<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8mb4 <span class="token keyword">COLLATE</span> utf8mb4_unicode_ci <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>company<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8mb4 <span class="token keyword">COLLATE</span> utf8mb4_unicode_ci <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>year<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8mb4 <span class="token keyword">COLLATE</span> utf8mb4_unicode_ci <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span>\n<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token operator">=</span> <span class="token number">5</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> <span class="token operator">=</span> utf8mb4 <span class="token keyword">COLLATE</span> <span class="token operator">=</span> utf8mb4_unicode_ci ROW_FORMAT <span class="token operator">=</span> Dynamic<span class="token punctuation">;</span>\n\n<span class="token comment">-- ----------------------------</span>\n<span class="token comment">-- Records of games</span>\n<span class="token comment">-- ----------------------------</span>\n<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>games<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">\'admin\'</span><span class="token punctuation">,</span> <span class="token string">\'123456\'</span><span class="token punctuation">,</span> <span class="token string">\'即时战略\'</span><span class="token punctuation">,</span> <span class="token string">\'暴雪\'</span><span class="token punctuation">,</span> <span class="token string">\'1995\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>games<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">\'test1\'</span><span class="token punctuation">,</span> <span class="token string">\'123456\'</span><span class="token punctuation">,</span> <span class="token string">\'RPG\'</span><span class="token punctuation">,</span> <span class="token string">\'光荣\'</span><span class="token punctuation">,</span> <span class="token string">\'1995\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>games<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">\'test2\'</span><span class="token punctuation">,</span> <span class="token string">\'123456\'</span><span class="token punctuation">,</span> <span class="token string">\'即时战略\'</span><span class="token punctuation">,</span> <span class="token string">\'拳头\'</span><span class="token punctuation">,</span> <span class="token string">\'2000\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>games<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">\'test3\'</span><span class="token punctuation">,</span> <span class="token string">\'123456\'</span><span class="token punctuation">,</span> <span class="token string">\'FPS\'</span><span class="token punctuation">,</span> <span class="token string">\'未知\'</span><span class="token punctuation">,</span> <span class="token string">\'1988\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">SET</span> FOREIGN_KEY_CHECKS <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h3 id="创建maven工程" tabindex="-1"><a class="header-anchor" href="#创建maven工程" aria-hidden="true">#</a> 创建maven工程</h3>\n<div class="custom-container warning"><p class="custom-container-title">警告</p>\n<p>在学习本文章前应先熟悉maven构建，并且在idea中已将maven配置好</p>\n</div>\n<p>若还不知道maven工程如何构建，请点击查看：<a href="https://hyd0.cc/maven/Maven%E8%AF%A6%E8%A7%A3.html" target="_blank" rel="noopener noreferrer">Maven详解(基础到高级)(入门到入土) | 信仰的个人博客 (hyd0.cc)<ExternalLinkIcon/></a></p>\n<details class="custom-container details"><summary>点击查看示例</summary>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="2.png" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/2.png" data="aurora"></p>\n</details>\n<p>构建完成后再工程根目录中找到pom.xml文件，引入对应依赖</p>\n<div class="language-xml ext-xml line-numbers-mode"><pre v-pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>\n    <span class="token comment">&lt;!-- Mybatis核心 --\x3e</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>\n    <span class="token comment">&lt;!-- junit测试 --\x3e</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>\n    <span class="token comment">&lt;!-- MySQL驱动 --\x3e</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>8.0.25<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><details class="custom-container details"><summary>点击查看示例</summary>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="3.png" originSrc="https://bdqn-blog.oss-cn-beijing.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/3.png" data="aurora"></p>\n</details>\n<details class="custom-container details"><summary>常见问题及解决方案</summary>\n<p>因网速太慢导致依赖下载失败或者中途不小心点到退出</p>\n<p>解决方案：</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="4.png" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/4.png" data="aurora"></p>\n<p>若还是不行请更换网络或者配置maven国内镜像仓库后重试</p>\n<p><a href="https://hyd0.cc/maven/Maven%E8%AF%A6%E8%A7%A3.html#_5%E3%80%81%E9%85%8D%E7%BD%AE%E9%98%BF%E9%87%8C%E4%BA%91%E7%9A%84%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93" target="_blank" rel="noopener noreferrer">配置阿里云的镜像仓库)<ExternalLinkIcon/></a></p>\n</details>\n<h3 id="创建mybatis的核心配置文件" tabindex="-1"><a class="header-anchor" href="#创建mybatis的核心配置文件" aria-hidden="true">#</a> 创建MyBatis的核心配置文件</h3>\n<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>习惯上命名为mybatis-config.xml，这个文件名仅仅只是建议，并非强制要求。将来整合Spring之后，这个配置文件可以省略，但是其中的配置项非常重要，关乎到我们后面所有的开发。</p>\n<p>核心配置文件主要用于配置连接数据库的环境以及MyBatis的全局配置信息</p>\n<p>核心配置文件存放的位置是<code>src/main/resources</code>目录下</p>\n</div>\n<div class="language-xml ext-xml line-numbers-mode"><pre v-pre class="language-xml"><code><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span>\n<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">configuration</span>\n        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Config 3.0//EN"</span>\n        <span class="token string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>\n    <span class="token comment">&lt;!-- 设置连接数据库的环境 default代表的是当前选择的环境 --\x3e</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n        <span class="token comment">&lt;!-- 配置环境并将该套环境标识为development，供父级标签使用，可配置多套环境  --\x3e</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n            <span class="token comment">&lt;!-- 配置事务管理器为JDBC --\x3e</span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>\n            <span class="token comment">&lt;!-- 配置数据源 --\x3e</span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n                <span class="token comment">&lt;!-- 数据库驱动，数据库版本8.0以下的不用加cj --\x3e</span>\n                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mysql.cj.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>\n                <span class="token comment">&lt;!-- 数据库连接地址，8.0以上记得加上时区，否则会导致查询时间错乱 serverTimezone=UTC --\x3e</span>\n                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/game?serverTimezone=UTC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>\n                <span class="token comment">&lt;!-- 账号 --\x3e</span>\n                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>\n                <span class="token comment">&lt;!-- 密码 --\x3e</span>\n                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1234<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><details class="custom-container details"><summary>点击查看示例</summary>\n<p>在资源文件夹<code>src/main/resources</code>中，创建一个名为mybatis-config.xml的配置文件</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="5.png" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/5.png" data="aurora"></p>\n<p>根据注释进行配套环境设置</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="6.png" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/6.png" data="aurora"></p>\n</details>\n<h3 id="创建mapper接口" tabindex="-1"><a class="header-anchor" href="#创建mapper接口" aria-hidden="true">#</a> 创建mapper接口</h3>\n<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>Mybatis中的mapper接口相当于以前的dao，但是区别在于，mapper仅仅是接口，我们不需要提供实现类</p>\n</div>\n<div class="language-java ext-java line-numbers-mode"><pre v-pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>bdqn<span class="token punctuation">.</span>mapper</span><span class="token punctuation">;</span>\n\n<span class="token doc-comment comment">/**\n * @ClassName: GameMapper\n * @Description: mapper接口\n * @Date: 2022-09-06 11:23:10\n * @Author: HuangYaoDong\n */</span>\n<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">GameMapper</span> <span class="token punctuation">{</span>\n\n    <span class="token doc-comment comment">/**\n      * 添加游戏\n      *\n      * <span class="token keyword">@date</span> 2022/9/6 11:30\n      * <span class="token keyword">@author</span> HangYaoDong\n      * <span class="token keyword">@return</span> int 受影响的行数\n      */</span>\n    <span class="token keyword">int</span> <span class="token function">insertGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><details class="custom-container details"><summary>点击查看示例</summary>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="7.png" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/7.png" data="aurora"></p>\n</details>\n<h3 id="创建mybatis的映射文件" tabindex="-1"><a class="header-anchor" href="#创建mybatis的映射文件" aria-hidden="true">#</a> 创建MyBatis的映射文件</h3>\n<div class="custom-container tip"><p class="custom-container-title">相关概念</p>\n<p>ORM（Object Relationship Mapping）对象关系映射</p>\n<ul>\n<li>对象：Java的实体类对象</li>\n<li>关系：关系型数据库</li>\n<li>映射：二者之间的对应关系</li>\n</ul>\n</div>\n<table>\n<thead>\n<tr>\n<th style="text-align:center">Java概念</th>\n<th style="text-align:center">数据库概念</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style="text-align:center">类</td>\n<td style="text-align:center">表</td>\n</tr>\n<tr>\n<td style="text-align:center">属性</td>\n<td style="text-align:center">字段/列</td>\n</tr>\n<tr>\n<td style="text-align:center">对象</td>\n<td style="text-align:center">记录/行</td>\n</tr>\n</tbody>\n</table>\n<p><span style="color:red" ><strong>映射文件的命名规则</strong></span>：与接口同名的xml文件</p>\n<p>MyBatis中可以面向接口操作数据，但是要保证接口及映射文件的一致：</p>\n<ul>\n<li>mapper接口的全路径名（包名+类名）和映射文件的命名空间（namespace）保持一致</li>\n<li>mapper接口中方法的方法名和映射文件中编写SQL的标签的id属性保持一致</li>\n</ul>\n<div class="language-xml ext-xml line-numbers-mode"><pre v-pre class="language-xml"><code><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span>  \n<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span>  \n<span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>  \n<span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token punctuation">></span></span>  \n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cn.bdqn.mapper.GameMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  \n\t<span class="token comment">&lt;!--int insertGame();--\x3e</span>  \n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>insertGame<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  \n\t\tinsert into games(username,password,type,company,year) values(\'test4\',\'123456\',\'FPS\',\'未知\',\'2022\')  \n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span>  \n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><details class="custom-container details"><summary>点击查看示例</summary>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="8.png" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/8.png" data="aurora"></p>\n<div class="custom-container warning"><p class="custom-container-title">注意</p>\n<p>添加<code>&lt;insert&gt;&lt;/insert&gt;</code>，修改<code>&lt;update&gt;&lt;/update&gt;</code>，删除<code>&lt;delete&gt;&lt;/delete&gt;</code>三个标签的返回值默认都是<span style="red"><strong>int</strong></span>类型</p>\n</div>\n</details>\n<h3 id="注册-引入-映射文件" tabindex="-1"><a class="header-anchor" href="#注册-引入-映射文件" aria-hidden="true">#</a> 注册（引入）映射文件</h3>\n<p>我们在映射文件中定义完SQL映射语句之后，首先，我们需要告诉mybatis到哪里去找到这些语句。但是，在自动查找资源方面，Java并没有提供一个很好的解决方案，所以最好的方法就是直接告诉mybatis到哪里去找映射文件，如下：</p>\n<div class="language-xml ext-xml line-numbers-mode"><pre v-pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mapper/GameMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><details class="custom-container details"><summary>点击查看解析</summary>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="9.png" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/9.png" data="aurora"></p>\n</details>\n<p>mybatis给我们提供了四种注册映射文件的方式，详情请点击下方查看：</p>\n<details class="custom-container details"><summary>点击查看<span style="color:red" >映射器（mappers）</span>详细配置</summary>\n<h4 id="_1、resource" tabindex="-1"><a class="header-anchor" href="#_1、resource" aria-hidden="true">#</a> 1、resource</h4>\n<p>resource中填写的路径是针对于编译后映射文件的所处位置，可从编译文件夹中查看，idea是<code>out</code>文件夹。</p>\n<p>若映射文件处于资源文件夹(resources)中时，resource属性中填写的就是映射文件与resources的相对路径。</p>\n<p>若映射文件处于java文件夹其下，那resource属性中填写的就是映射文件与java的相对路径，注意，在此环境下包名也算是文件夹，需要以路径的形式写入。</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="10.png" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/10.png" data="aurora"></p>\n<h4 id="_2、url" tabindex="-1"><a class="header-anchor" href="#_2、url" aria-hidden="true">#</a> 2、url</h4>\n<p>直接使用对于mybatis映射文件的绝对路径或者相对路径，这个使用的比较少，仅做了解扩展即可</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="11.png" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/11.png" data="aurora"></p>\n<h4 id="_3、class" tabindex="-1"><a class="header-anchor" href="#_3、class" aria-hidden="true">#</a> 3、class</h4>\n<p>class属性比较特殊，他是直接注册当前接口，一般来讲都是在无映射文件的时候直接在接口的方法上方使用注解进行开发才会用到的，例如：</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="12.png" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/12.png" data="aurora"></p>\n<p><span style="color:red" ><strong>不推荐使用此种模式开发，因为当遇到复杂sql的时候整个sql语句会显得特别杂乱，不好维护</strong></span></p>\n<h4 id="_4、package标签" tabindex="-1"><a class="header-anchor" href="#_4、package标签" aria-hidden="true">#</a> 4、package标签</h4>\n<p>以上三种方式都是只要你有一个接口或者一个映射文件就必须要去mybatis配置文件中注册一次，也就是说如果你有100个接口，那么你就要写100次</p>\n<p><code>&lt;mapper resource=&quot;&quot;&gt;</code>标签</p>\n<p>这样太过于繁琐，并且也不利于维护，所以mybatis给我们提供了一种批量注册的方式，虽然说局限性有点儿大</p>\n<p>首先，要使用package标签必须保证：</p>\n<ol>\n<li>当前所有的接口及映射文件必须位于同一个包下</li>\n<li>映射文件的名称必须和接口类名一致</li>\n</ol>\n<p>当满足以上条件时，我们只需要在package标签的name属性中填入接口及映射文件所在的全路径包名即可， 并且无论有多少个接口都能够实现自动注册</p>\n<p>方式一：</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="13.png" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/13.png" data="aurora"></p>\n<p>方式二：</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="19.png" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/19.png" data="aurora"></p>\n<div class="custom-container warning"><p class="custom-container-title">提示</p>\n<p>因为mybatis的判定方式是编译后的文件夹，所以我们可以直接在Resources中使用相同目录的方式让映射文件与接口处于同一个包下</p>\n</div>\n</details>\n<h3 id="通过junit测试功能-main方法也可以" tabindex="-1"><a class="header-anchor" href="#通过junit测试功能-main方法也可以" aria-hidden="true">#</a> 通过Junit测试功能(main方法也可以)</h3>\n<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>通过Junit的<code>@Test</code>注解可以实现类似于main方法一样的运行，无需通过服务器编译调用</p>\n<p>使用方式也简单，只需把<code>@Test</code>注解加在你要调用的方法上方即可</p>\n</div>\n<div class="language-java ext-java line-numbers-mode"><pre v-pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>bdqn<span class="token punctuation">.</span>mapper</span><span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Resources</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span></span><span class="token class-name">SqlSession</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span></span><span class="token class-name">SqlSessionFactory</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span></span><span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span><span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStream</span><span class="token punctuation">;</span>\n\n<span class="token doc-comment comment">/**\n * @ClassName: UserMapperTest\n * @Description: 测试类\n * @Date: 2022-09-07 08:50:08\n * @Author: HuangYaoDong\n */</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GameMapperTest</span> <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@Test</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testInsertGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n        <span class="token comment">//读取mybatis的核心配置文件</span>\n        <span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"mybatis-config.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//获取SqlSessionFactoryBuilder对象（工厂构建者）</span>\n        <span class="token class-name">SqlSessionFactoryBuilder</span> sqlSessionFactoryBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//通过核心配置文件所对应的字节输入流创建工厂类SqlSessionFactory，生产SqlSession对象</span>\n        <span class="token class-name">SqlSessionFactory</span> sqlSessionFactory <span class="token operator">=</span> sqlSessionFactoryBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//获取SqlSession，此时通过SqlSession对象所操作的sql都必须手动提交或者回滚事务</span>\n        <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//通过代理模式创建GameMapper接口的代理实现类对象</span>\n        <span class="token class-name">GameMapper</span> gameMapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">GameMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//调用UserMapper接口中的方法，就可以根据UserMapper的全类名匹配元素文件，通过调用的方法名匹配映射文件中的SQL标签，并执行标签中的SQL语句</span>\n        <span class="token keyword">int</span> i <span class="token operator">=</span> gameMapper<span class="token punctuation">.</span><span class="token function">insertGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//提交事务，SqlSession默认是手动提交事务，即增删改不提交事务则数据库中不生效</span>\n        sqlSession<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数据库受影响行数："</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br></div></div><p>执行后控制台显示：</p>\n<div class="language-java ext-java line-numbers-mode"><pre v-pre class="language-java"><code>数据库受影响行数：<span class="token number">1</span>行\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><details class="custom-container details"><summary>点击查看解析</summary>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="14.png" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/14.png" data="aurora"></p>\n<h4 id="步骤一" tabindex="-1"><a class="header-anchor" href="#步骤一" aria-hidden="true">#</a> 步骤一：</h4>\n<p>​\t\t使用Resources.getResourceAsStream读取<code>mybatis-config.xml</code>核心配置文件，这是为了获取到数据库链接以及在配置文件中所注册的映射文件位置</p>\n<h4 id="步骤二" tabindex="-1"><a class="header-anchor" href="#步骤二" aria-hidden="true">#</a> 步骤二：</h4>\n<p>​\t\t获取工厂构建者SqlSessionFactoryBuilder对象，此对象在全局中唯一的作用就是创建出SqlSessionFactory工厂对象，就好比是一个建筑团队，在一个地方去建造汽车工厂，工厂建造完了之后就不需要建筑团队了，工厂自己本身就可以源源不断的生产汽车，同理SqlSessionFactoryBuilder也是一样，当SqlSessionFactoryBuilder（建筑团队）把SqlSessionFactory（汽车工厂）构建完成之后，SqlSessionFactory就可以源源不断的生产SqlSession（汽车）</p>\n<table>\n<thead>\n<tr>\n<th style="text-align:center">对象</th>\n<th style="text-align:center">解析</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style="text-align:center">SqlSessionFactoryBuilder</td>\n<td style="text-align:center">通过读取到的配置文件来构建SqlSessionFactory</td>\n</tr>\n<tr>\n<td style="text-align:center">SqlSessionFactory</td>\n<td style="text-align:center">SqlSession工厂，专门用来生产SqlSession的</td>\n</tr>\n<tr>\n<td style="text-align:center">SqlSession</td>\n<td style="text-align:center">完全包含以数据库为背景的所有执行SQL操作的方法</td>\n</tr>\n</tbody>\n</table>\n<p>总而言之，在绝大多数的时候，SqlSessionFactoryBuilder在全局中只会执行一次，所以大部分人都会把他设置为一个单例对象</p>\n<h4 id="步骤三" tabindex="-1"><a class="header-anchor" href="#步骤三" aria-hidden="true">#</a> 步骤三：</h4>\n<p>​\t\t通过代理模式创建GameMapper接口的代理实现类对象，使用SqlSession对象的实例获取到我们所要去调用的mapper接口，并且通过代理的方式将该类的实现获取到，直接调用其中的方法就可执行映射文件中对应的sql语句并返回结果</p>\n<p>​\t\t但是需要注意，此时若是执行<span style="color:red">增删改</span>操作的话，需要手动提交事务才能让数据持久化到数据库中。若想实现自动提交事务可将事务交由mybatis进行管理，只需在初始化SqlSession对象时加上一个参数即可，如下：</p>\n<div class="language-java ext-java line-numbers-mode"><pre v-pre class="language-java"><code><span class="token comment">//创建SqlSession对象，此时通过SqlSession对象所操作的sql都会自动提交  </span>\n<span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="custom-container tip"><p class="custom-container-title">步骤总结</p>\n<ol>\n<li>读取mybatis-config.xml核心配置文件</li>\n<li>创建SqlSessionFactoryBuilder对象</li>\n<li>创建SqlSessionFactory对象</li>\n<li>创建SqlSession对象</li>\n<li>通过sqlSession.getMapper()方法获取mapper接口实例</li>\n<li>调用方法并返回值</li>\n</ol>\n</div>\n</details>\n<details class="custom-container details"><summary>常见报错</summary>\n<h4 id="_1、-test注解爆红无法使用" tabindex="-1"><a class="header-anchor" href="#_1、-test注解爆红无法使用" aria-hidden="true">#</a> 1、<code>@Test</code>注解爆红无法使用</h4>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="15.png" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/15.png" data="aurora"></p>\n<p>解决方式：检查pom.xml中是否有导入对应的依赖</p>\n<div class="language-xml ext-xml line-numbers-mode"><pre v-pre class="language-xml"><code><span class="token comment">&lt;!-- junit测试 --\x3e</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h4 id="_2、resources无法调用getresourceasstream方法-方法爆红" tabindex="-1"><a class="header-anchor" href="#_2、resources无法调用getresourceasstream方法-方法爆红" aria-hidden="true">#</a> 2、Resources无法调用getResourceAsStream方法，方法爆红</h4>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="16.png" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/16.png" data="aurora"></p>\n<p>解决方式：根本原因在于Resources引入错误，Resources应该是要在<code>org.apache.ibatis.io.Resources</code>下的才对</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="17.png" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/17.png" data="aurora"></p>\n<h4 id="_3、明明已经执行了-也没有报错-数据库的数据却没有更新" tabindex="-1"><a class="header-anchor" href="#_3、明明已经执行了-也没有报错-数据库的数据却没有更新" aria-hidden="true">#</a> 3、明明已经执行了，也没有报错，数据库的数据却没有更新</h4>\n<p>解决方式：检查是否开启事务自动提交，若未开启则尝试手动提交事务，详情请自行查看上方解析</p>\n<h4 id="_4、报错-type-interface-cn-bdqn-mapper-gamemapper-is-not-known-to-the-mapperregistry" tabindex="-1"><a class="header-anchor" href="#_4、报错-type-interface-cn-bdqn-mapper-gamemapper-is-not-known-to-the-mapperregistry" aria-hidden="true">#</a> 4、报错：<span style="color:red">Type interface cn.bdqn.mapper.GameMapper is not known to the MapperRegistry</span></h4>\n<p>报错原因：MapperRegistry找不到cn.bdqn.mapper.GameMapper，mybatis核心配置文件中没有注册该映射文件</p>\n<p>解决方式：注册一下映射文件即可</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="18.png" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/18.png" data="aurora"></p>\n</details>\n<h2 id="核心配置文件详解" tabindex="-1"><a class="header-anchor" href="#核心配置文件详解" aria-hidden="true">#</a> 核心配置文件详解</h2>\n<div class="custom-container tip"><p class="custom-container-title">核心配置文件</p>\n<p>核心配置文件中的标签必须按照固定的顺序(有的标签可以不写，但顺序一定不能乱)从上往下的顺序依次为：</p>\n<p>properties、settings、typeAliases、typeHandlers、objectFactory、objectWrapperFactory、reflectorFactory、plugins、environments、databaseIdProvider、mappers</p>\n</div>\n<div class="language-xml ext-xml line-numbers-mode"><pre v-pre class="language-xml"><code><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span>\n<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">configuration</span>\n        <span class="token name">PUBLIC</span> <span class="token string">"-//MyBatis.org//DTD Config 3.0//EN"</span>\n        <span class="token string">"http://MyBatis.org/dtd/MyBatis-3-config.dtd"</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>\n    <span class="token comment">&lt;!--引入properties文件，此时就可以${属性名}的方式访问属性值--\x3e</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbc.properties<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span>\n        <span class="token comment">&lt;!--将表中字段的下划线自动转换为驼峰--\x3e</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mapUnderscoreToCamelCase<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>\n        <span class="token comment">&lt;!--开启延迟加载--\x3e</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lazyLoadingEnabled<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>\n        <span class="token comment">&lt;!--\n        typeAlias：设置某个具体的类型的别名\n        属性：\n        type：需要设置别名的类型的全类名\n        alias：设置此类型的别名，且别名不区分大小写。若不设置此属性，该类型拥有默认的别名，即类名\n        --\x3e</span>\n        <span class="token comment">&lt;!--&lt;typeAlias type="cn.bdqn.model.Game">&lt;/typeAlias>--\x3e</span>\n        <span class="token comment">&lt;!--&lt;typeAlias type="cn.bdqn.model.Game" alias="game">\n        &lt;/typeAlias>--\x3e</span>\n        <span class="token comment">&lt;!--以包为单位，设置改包下所有的类型都拥有默认的别名，即类名且不区分大小写--\x3e</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cn.bdqn.model<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span>\n    <span class="token comment">&lt;!--\n    environments：设置多个连接数据库的环境\n    属性：\n\t    default：设置默认使用的环境的id\n    --\x3e</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mysql_test<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n        <span class="token comment">&lt;!--\n        environment：设置具体的连接数据库的环境信息\n        属性：\n\t        id：设置环境的唯一标识，可通过environments标签中的default设置某一个环境的id，表示默认使用的环境\n        --\x3e</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mysql_test<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n            <span class="token comment">&lt;!--\n            transactionManager：设置事务管理方式\n            属性：\n\t            type：设置事务管理方式，type="JDBC|MANAGED"\n\t            type="JDBC"：设置当前环境的事务管理都必须手动处理\n\t            type="MANAGED"：设置事务被管理，例如spring中的AOP\n            --\x3e</span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>\n            <span class="token comment">&lt;!--\n            dataSource：设置数据源\n            属性：\n\t            type：设置数据源的类型，type="POOLED|UNPOOLED|JNDI"\n\t            type="POOLED"：使用数据库连接池，即会将创建的连接进行缓存，下次使用可以从缓存中直接获取，不需要重新创建\n\t            type="UNPOOLED"：不使用数据库连接池，即每次使用连接都需要重新创建\n\t            type="JNDI"：调用上下文中的数据源\n            --\x3e</span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n                <span class="token comment">&lt;!--设置驱动类的全类名--\x3e</span>\n                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${jdbc.driver}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>\n                <span class="token comment">&lt;!--设置连接数据库的连接地址--\x3e</span>\n                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${jdbc.url}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>\n                <span class="token comment">&lt;!--设置连接数据库的用户名--\x3e</span>\n                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${jdbc.username}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>\n                <span class="token comment">&lt;!--设置连接数据库的密码--\x3e</span>\n                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${jdbc.password}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span>\n    <span class="token comment">&lt;!--引入映射文件--\x3e</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>\n        <span class="token comment">&lt;!-- &lt;mapper resource="GameMapper.xml"/> --\x3e</span>\n        <span class="token comment">&lt;!--\n        以包为单位，将包下所有的映射文件引入核心配置文件\n        注意：\n\t\t\t1. 此方式必须保证mapper接口和mapper映射文件必须在相同的包下\n\t\t\t2. mapper接口要和mapper映射文件的名字一致\n        --\x3e</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cn.bdqn.mapper<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br></div></div><h2 id="默认的类型别名" tabindex="-1"><a class="header-anchor" href="#默认的类型别名" aria-hidden="true">#</a> 默认的类型别名</h2>\n<h3 id="基本数据类型映射" tabindex="-1"><a class="header-anchor" href="#基本数据类型映射" aria-hidden="true">#</a> 基本数据类型映射</h3>\n<table>\n<thead>\n<tr>\n<th style="text-align:center">Alias(别名)</th>\n<th style="text-align:center">Mapped Type（对应类型）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style="text-align:center">_byte</td>\n<td style="text-align:center">byte</td>\n</tr>\n<tr>\n<td style="text-align:center">_long</td>\n<td style="text-align:center">long</td>\n</tr>\n<tr>\n<td style="text-align:center">_short</td>\n<td style="text-align:center">short</td>\n</tr>\n<tr>\n<td style="text-align:center">_int</td>\n<td style="text-align:center">int</td>\n</tr>\n<tr>\n<td style="text-align:center">_integer</td>\n<td style="text-align:center">int</td>\n</tr>\n<tr>\n<td style="text-align:center">_double</td>\n<td style="text-align:center">double</td>\n</tr>\n<tr>\n<td style="text-align:center">_float</td>\n<td style="text-align:center">float</td>\n</tr>\n<tr>\n<td style="text-align:center">_boolean</td>\n<td style="text-align:center">boolean</td>\n</tr>\n</tbody>\n</table>\n<h3 id="封装类型映射" tabindex="-1"><a class="header-anchor" href="#封装类型映射" aria-hidden="true">#</a> 封装类型映射</h3>\n<table>\n<thead>\n<tr>\n<th style="text-align:center">Alias(别名)</th>\n<th style="text-align:center">Mapped Type（对应类型）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style="text-align:center">string</td>\n<td style="text-align:center">String</td>\n</tr>\n<tr>\n<td style="text-align:center">byte</td>\n<td style="text-align:center">Byte</td>\n</tr>\n<tr>\n<td style="text-align:center">long</td>\n<td style="text-align:center">Long</td>\n</tr>\n<tr>\n<td style="text-align:center">short</td>\n<td style="text-align:center">Short</td>\n</tr>\n<tr>\n<td style="text-align:center">int</td>\n<td style="text-align:center">Integer</td>\n</tr>\n<tr>\n<td style="text-align:center">integer</td>\n<td style="text-align:center">Integer</td>\n</tr>\n<tr>\n<td style="text-align:center">double</td>\n<td style="text-align:center">Double</td>\n</tr>\n<tr>\n<td style="text-align:center">float</td>\n<td style="text-align:center">Float</td>\n</tr>\n<tr>\n<td style="text-align:center">boolean</td>\n<td style="text-align:center">Boolean</td>\n</tr>\n<tr>\n<td style="text-align:center">date</td>\n<td style="text-align:center">Date</td>\n</tr>\n<tr>\n<td style="text-align:center">decimal</td>\n<td style="text-align:center">BigDecimal</td>\n</tr>\n<tr>\n<td style="text-align:center">bigdecimal</td>\n<td style="text-align:center">BigDecimal</td>\n</tr>\n<tr>\n<td style="text-align:center">object</td>\n<td style="text-align:center">Object</td>\n</tr>\n<tr>\n<td style="text-align:center">map</td>\n<td style="text-align:center">Map</td>\n</tr>\n<tr>\n<td style="text-align:center">hashmap</td>\n<td style="text-align:center">HashMap</td>\n</tr>\n<tr>\n<td style="text-align:center">list</td>\n<td style="text-align:center">List</td>\n</tr>\n<tr>\n<td style="text-align:center">arraylist</td>\n<td style="text-align:center">ArrayList</td>\n</tr>\n<tr>\n<td style="text-align:center">collection</td>\n<td style="text-align:center">Collection</td>\n</tr>\n<tr>\n<td style="text-align:center">iterator</td>\n<td style="text-align:center">Iterator</td>\n</tr>\n</tbody>\n</table>\n<h2 id="mybatis的增删改查" tabindex="-1"><a class="header-anchor" href="#mybatis的增删改查" aria-hidden="true">#</a> MyBatis的增删改查</h2>\n<h3 id="_1、添加" tabindex="-1"><a class="header-anchor" href="#_1、添加" aria-hidden="true">#</a> 1、添加</h3>\n<div class="language-xml ext-xml line-numbers-mode"><pre v-pre class="language-xml"><code><span class="token comment">&lt;!-- 接口中的方法 int insertGame();--\x3e</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>insertGame<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    insert into games(username,password,type,company,year) values(\'test4\',\'123456\',\'FPS\',\'未知\',\'2022\')\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="_2、删除" tabindex="-1"><a class="header-anchor" href="#_2、删除" aria-hidden="true">#</a> 2、删除</h3>\n<div class="language-xml ext-xml line-numbers-mode"><pre v-pre class="language-xml"><code><span class="token comment">&lt;!-- 接口中的方法 int deleteGame();--\x3e</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deleteGame<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    delete from games where id = 1\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="_3、修改" tabindex="-1"><a class="header-anchor" href="#_3、修改" aria-hidden="true">#</a> 3、修改</h3>\n<div class="language-xml ext-xml line-numbers-mode"><pre v-pre class="language-xml"><code><span class="token comment">&lt;!-- 接口中的方法 int updateGame();--\x3e</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>updateGame<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    UPDATE `game`.`games` \n    SET `username` = \'admin\',\n    `password` = \'123456\',\n    `type` = \'即时战略\',\n    `company` = \'暴雪\',\n    `year` = \'1995\' \n    WHERE\n    `id` = 1;\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="_4、查询" tabindex="-1"><a class="header-anchor" href="#_4、查询" aria-hidden="true">#</a> 4、查询</h3>\n<div class="custom-container warning"><p class="custom-container-title">注意</p>\n<p>查询的标签select相比于其他标签比较特殊，添加、删除、修改的返回值都是受影响的行数所以类型都为int类型，但是查询不一样，查询的返回类型是多变的，通常情况下mybatis是不知道你要返回的数据是什么类型的，所以需要我们手动去指定</p>\n<p>查询的标签必须设置属性<code>resultType</code>或者<code>resultMap</code>,用来指定实体类与数据库表的映射关系，其实这一步骤相当于我们之前的ResultSet设置实体类，只不过mybatis帮我们做了这一件事情，我们只需要设置返回类型，其余映射的mybatis会自动帮我们完成</p>\n</div>\n<div class="custom-container warning"><p class="custom-container-title">resultType与resultMap的区别</p>\n<p>resultType采用的是自动映射，也就是说只要你实体类的属性名称与数据库表的列名一致，那么mybatis就能够直接进行映射</p>\n<p>resultMap是为自定义映射，通常用于一对多、多对一的复杂查询，或者实体类属性名与数据库列明不一致的情况</p>\n</div>\n<h4 id="查询单条数据" tabindex="-1"><a class="header-anchor" href="#查询单条数据" aria-hidden="true">#</a> 查询单条数据</h4>\n<p>创建实体类</p>\n<details class="custom-container details"><summary>点击查看代码</summary>\n<div class="language-java ext-java line-numbers-mode"><pre v-pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>bdqn<span class="token punctuation">.</span>model</span><span class="token punctuation">;</span>\n\n<span class="token doc-comment comment">/**\n * @ClassName: Games\n * @Description: Game实体类\n * @Date: 2022-09-07 11:34:01\n * @Author: HuangYaoDong\n */</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Game</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> type<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> company<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> year<span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> id<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> username<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>username <span class="token operator">=</span> username<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> password<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token class-name">String</span> password<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>password <span class="token operator">=</span> password<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> type<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setType</span><span class="token punctuation">(</span><span class="token class-name">String</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getCompany</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> company<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCompany</span><span class="token punctuation">(</span><span class="token class-name">String</span> company<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>company <span class="token operator">=</span> company<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> year<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setYear</span><span class="token punctuation">(</span><span class="token class-name">String</span> year<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>year <span class="token operator">=</span> year<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token string">"Game{"</span> <span class="token operator">+</span>\n                <span class="token string">"id="</span> <span class="token operator">+</span> id <span class="token operator">+</span>\n                <span class="token string">", username=\'"</span> <span class="token operator">+</span> username <span class="token operator">+</span> <span class="token char">\'\\\'\'</span> <span class="token operator">+</span>\n                <span class="token string">", password=\'"</span> <span class="token operator">+</span> password <span class="token operator">+</span> <span class="token char">\'\\\'\'</span> <span class="token operator">+</span>\n                <span class="token string">", type=\'"</span> <span class="token operator">+</span> type <span class="token operator">+</span> <span class="token char">\'\\\'\'</span> <span class="token operator">+</span>\n                <span class="token string">", company=\'"</span> <span class="token operator">+</span> company <span class="token operator">+</span> <span class="token char">\'\\\'\'</span> <span class="token operator">+</span>\n                <span class="token string">", year=\'"</span> <span class="token operator">+</span> year <span class="token operator">+</span> <span class="token char">\'\\\'\'</span> <span class="token operator">+</span>\n                <span class="token char">\'}\'</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br></div></div></details>\n<p>编写mapper接口代码</p>\n<div class="language-java ext-java line-numbers-mode"><pre v-pre class="language-java"><code><span class="token doc-comment comment">/**\n  * 查询单条数据\n  *\n  * <span class="token keyword">@date</span> 2022/9/7 11:37\n  * <span class="token keyword">@author</span> HangYaoDong\n  * <span class="token keyword">@return</span> cn.bdqn.model.Game 游戏信息\n  */</span>\n<span class="token class-name">Game</span> <span class="token function">selectOneGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>编写mapper映射文件</p>\n<div class="language-xml ext-xml line-numbers-mode"><pre v-pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectOneGame<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cn.bdqn.model.Game<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    select * from games limit 1\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>测试：</p>\n<div class="language-java ext-java line-numbers-mode"><pre v-pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testInsertGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n    <span class="token comment">//读取mybatis的核心配置文件</span>\n    <span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"mybatis-config.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//获取SqlSessionFactoryBuilder对象（工厂构建者）</span>\n    <span class="token class-name">SqlSessionFactoryBuilder</span> sqlSessionFactoryBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//通过核心配置文件所对应的字节输入流创建工厂类SqlSessionFactory，生产SqlSession对象</span>\n    <span class="token class-name">SqlSessionFactory</span> sqlSessionFactory <span class="token operator">=</span> sqlSessionFactoryBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//获取SqlSession，此时通过SqlSession对象所操作的sql都必须手动提交或者回滚事务</span>\n    <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//通过代理模式创建GameMapper接口的代理实现类对象</span>\n    <span class="token class-name">GameMapper</span> gameMapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">GameMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//调用UserMapper接口中的方法，就可以根据UserMapper的全类名匹配元素文件，通过调用的方法名匹配映射文件中的SQL标签，并执行标签中的SQL语句</span>\n    <span class="token class-name">Game</span> game <span class="token operator">=</span> gameMapper<span class="token punctuation">.</span><span class="token function">selectOneGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>game<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>运行结果：</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="20.png" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/20.png" data="aurora"></p>\n<details class="custom-container details"><summary>点击查看详细解析</summary>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="21.png" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/21.png" data="aurora"></p>\n</details>\n<h4 id="查询多条数据" tabindex="-1"><a class="header-anchor" href="#查询多条数据" aria-hidden="true">#</a> 查询多条数据</h4>\n<div class="custom-container warning"><p class="custom-container-title">返回值</p>\n<p>当查询的数据为多条时，不能使用实体类作为返回值，只能使用集合，否则会抛出异常<span style="color:red"><strong>TooManyResultsException</strong></span>,但若查询的数据只有一条时，可以使用实体类或者集合作为返回类型</p>\n</div>\n<p>编写mapper接口代码</p>\n<div class="language-java ext-java line-numbers-mode"><pre v-pre class="language-java"><code><span class="token doc-comment comment">/**\n  * 查询多条数据\n  *\n  * <span class="token keyword">@date</span> 2022/9/7 11:55\n  * <span class="token keyword">@author</span> HangYaoDong\n  * <span class="token keyword">@return</span> java.util.List<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cn.bdqn.model.Game</span><span class="token punctuation">></span></span> 游戏信息集合\n  */</span>\n<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Game</span><span class="token punctuation">></span></span> <span class="token function">selectGameList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>编写mapper映射文件</p>\n<div class="custom-container warning"><p class="custom-container-title">resultType返回值</p>\n<p>查询多条数据的时候，接口中方法返回值必须为集合，resultType内的值为集合的泛型，mybatis会自动进行数据填充</p>\n</div>\n<div class="language-xml ext-xml line-numbers-mode"><pre v-pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectGameList<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cn.bdqn.model.Game<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    select * from games\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>测试</p>\n<div class="language-java ext-java line-numbers-mode"><pre v-pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testInsertGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n    <span class="token comment">//读取mybatis的核心配置文件</span>\n    <span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"mybatis-config.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//获取SqlSessionFactoryBuilder对象（工厂构建者）</span>\n    <span class="token class-name">SqlSessionFactoryBuilder</span> sqlSessionFactoryBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//通过核心配置文件所对应的字节输入流创建工厂类SqlSessionFactory，生产SqlSession对象</span>\n    <span class="token class-name">SqlSessionFactory</span> sqlSessionFactory <span class="token operator">=</span> sqlSessionFactoryBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//获取SqlSession，此时通过SqlSession对象所操作的sql都必须手动提交或者回滚事务</span>\n    <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//通过代理模式创建GameMapper接口的代理实现类对象</span>\n    <span class="token class-name">GameMapper</span> gameMapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">GameMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//调用UserMapper接口中的方法，就可以根据UserMapper的全类名匹配元素文件，通过调用的方法名匹配映射文件中的SQL标签，并执行标签中的SQL语句</span>\n    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Game</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> gameMapper<span class="token punctuation">.</span><span class="token function">selectGameList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//提交事务，SqlSession默认是手动提交事务，即增删改不提交事务则数据库中不生效</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Game</span> game <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>game<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>运行结果：</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="22.png" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/22.png" data="aurora"></p>\n<h2 id="mybatis获取参数值的两种方式-重点" tabindex="-1"><a class="header-anchor" href="#mybatis获取参数值的两种方式-重点" aria-hidden="true">#</a> MyBatis获取参数值的两种方式（<span style="color:red">重点</span>）</h2>\n<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>以上我们所进行的操作全部都是直接在sql中把值定死的，但是实际开发中这么去写显然是不合理的</p>\n<p>mybatis给我们提供了两种方式进行传参，分别是<code>${}</code>与<code>#{}</code></p>\n<p><code>${}</code>的本质就是字符串拼接，<code>${}</code>使用字符串拼接的方式拼接sql，若为字符串类型或日期类型的字段进行赋值时，需要手动加单引号</p>\n<p><code>#{}</code>的本质就是字符串替换，<code>#{}</code>使用占位符赋值的方式拼接sql，此时为字符串类型或日期类型的字段进行赋值时，可以自动添加单引号</p>\n</div>\n<div class="custom-container danger"><p class="custom-container-title">警告</p>\n<p>我们之前在学习JDBC的时候就已经讲过了，在程序中最好不要使用<code>${}</code>也就是字符串拼接，因为这种拼接方式是有被SQL注入的风险的，所以一般来讲我们在开发的时候用的都是<code>#{}</code>字符串替换</p>\n</div>\n<h3 id="单个字面量类型的参数" tabindex="-1"><a class="header-anchor" href="#单个字面量类型的参数" aria-hidden="true">#</a> 单个字面量类型的参数</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="23.png" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/23.png" data="aurora"></p>\n<details class="custom-container details"><summary>使用${}方式传参，仅演示一次，因使用次数较少不过多演示</summary>\n<div class="language-xml ext-xml line-numbers-mode"><pre v-pre class="language-xml"><code><span class="token comment">&lt;!--Game selectGameByName(String name);--\x3e</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectGameByName<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Game<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  \n\tselect * from games where name = \'${name}\'  \n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></details>\n<h3 id="多个字面量类型的参数" tabindex="-1"><a class="header-anchor" href="#多个字面量类型的参数" aria-hidden="true">#</a> 多个字面量类型的参数</h3>\n<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>当mapper接口中的参数为多个时，mybatis会自动将这些参数放在一个map集合当中，在这个由参数组成的map集合里，key划分为两种，分别是：</p>\n<ol>\n<li>以<code>arg0</code>,<code>arg1</code>...为键（key），以参数为值（value）</li>\n<li>以<code>param1</code>，<code>param2</code>...为键（key），以参数为值（value）</li>\n</ol>\n<p>因此，我们只需要通过<code>${}</code>或<code>#{}</code>来访问map集合的键就可以获取到对应的值，注意如果你使用的是${}的话记得手动加上单引号</p>\n<p>使用arg或者param都行，但是要注意的是：</p>\n<ol>\n<li>arg是从起始索引0开始计算的，假设现在有两个参数需要调用，按照从左往右的顺序，第一个参数就是arg0，第二个参数就是arg1以此类推</li>\n<li>param是从参数位置1开始计算的，假设现在有两个参数需要调用，按照从左往右的顺序，第一个参数就是param1，第二个参数就是param2以此类推</li>\n</ol>\n</div>\n<div class="custom-container danger"><p class="custom-container-title">警告</p>\n<p>当你有多个参数，并且保持默认状态没有指定各参数的标识名称时，是无法直接使用参数名称来进行调用的，可调用方式仅局限于arg及param</p>\n</div>\n<p>使用arg的方式进行参数调用：</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="24.png" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/24.png" data="aurora"></p>\n<div class="language-xml ext-xml line-numbers-mode"><pre v-pre class="language-xml"><code><span class="token comment">&lt;!-- Game selectGameByName(String name,String type) --\x3e</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectGameByName<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cn.bdqn.model.Game<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    select * from games where username = #{arg0} and type = #{arg1}\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>使用param的方式进行参数调用：</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="25.png" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/25.png" data="aurora"></p>\n<div class="language-xml ext-xml line-numbers-mode"><pre v-pre class="language-xml"><code><span class="token comment">&lt;!-- Game selectGameByName(String name,String type) --\x3e</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectGameByName<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cn.bdqn.model.Game<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    select * from games where username = #{param1} and type = #{param2}\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/mybatis/Mybatis详解.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"Mybatis详解",filePath:"D:/blog/docs/mybatis/Mybatis详解.md",filePathRelative:"mybatis/Mybatis详解.md",componentFilePath:"D:/blog/docs/.vuepress/.temp/pages/mybatis/Mybatis详解.html.vue",componentFilePathRelative:"pages/mybatis/Mybatis详解.html.vue",componentFileChunkName:"v-435885cf",dataFilePath:"D:/blog/docs/.vuepress/.temp/pages/mybatis/Mybatis详解.html.js",dataFilePathRelative:"pages/mybatis/Mybatis详解.html.js",dataFileChunkName:"v-435885cf",htmlFilePath:"D:/blog/docs/.vuepress/dist/mybatis/Mybatis详解.html",htmlFilePathRelative:"mybatis/Mybatis详解.html"},{data:{key:"v-13c9aef5",path:"/vue/vue.html",title:"Vue基础",lang:"zh-CN",frontmatter:{title:"Vue基础",date:"2022/9/2 11:06",tag:["vue"],categories:["前端"],coverUrl:"https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210831004055590.png"},excerpt:"",headers:[{level:3,title:"vue技术栈",slug:"vue技术栈",children:[]},{level:3,title:"解决什么问题",slug:"解决什么问题",children:[]},{level:2,title:"1.安装",slug:"_1-安装",children:[{level:3,title:"VUE初体验",slug:"vue初体验",children:[]}]},{level:2,title:"2.Vue实例",slug:"_2-vue实例",children:[{level:3,title:"基本概念",slug:"基本概念",children:[]},{level:3,title:"创建",slug:"创建",children:[]},{level:3,title:"数据与方法",slug:"数据与方法",children:[]},{level:3,title:"生命周期钩子",slug:"生命周期钩子",children:[]}]},{level:2,title:"3.指令",slug:"_3-指令",children:[{level:3,title:"指令概念",slug:"指令概念",children:[]}]},{level:2,title:"4.过滤器",slug:"_4-过滤器",children:[{level:3,title:"作用",slug:"作用-9",children:[]},{level:3,title:"适用场景",slug:"适用场景-1",children:[]},{level:3,title:"语法",slug:"语法-1",children:[]},{level:3,title:"例子",slug:"例子",children:[]}]},{level:2,title:"5.计算属性",slug:"_5-计算属性",children:[]},{level:2,title:"6.侦听器",slug:"_6-侦听器",children:[]},{level:2,title:"7.Vue组件",slug:"_7-vue组件",children:[{level:3,title:"7-1.组件的定义",slug:"_7-1-组件的定义",children:[]},{level:3,title:"7-2.组件中的结构",slug:"_7-2-组件中的结构",children:[]},{level:3,title:"7-3.组件中的data只能是一个function",slug:"_7-3-组件中的data只能是一个function",children:[]},{level:3,title:"7-4.父组件向子组件传值(子组件使用父组件的数据)",slug:"_7-4-父组件向子组件传值-子组件使用父组件的数据",children:[]},{level:3,title:"7-5.子组件调用父组件的方法(父组件的方法传递给子组件)",slug:"_7-5-子组件调用父组件的方法-父组件的方法传递给子组件",children:[]},{level:3,title:"7-6.子组件调用父组件方法的时候传参",slug:"_7-6-子组件调用父组件方法的时候传参",children:[]},{level:3,title:"7-7.兄弟组件之间的通信",slug:"_7-7-兄弟组件之间的通信",children:[]},{level:3,title:"7-8.采用v-if来实现不同组件的切换",slug:"_7-8-采用v-if来实现不同组件的切换",children:[]},{level:3,title:"7-9.动态组件",slug:"_7-9-动态组件",children:[]},{level:3,title:"7-10.插槽",slug:"_7-10-插槽",children:[]},{level:3,title:"7-11.组件的嵌套",slug:"_7-11-组件的嵌套",children:[]},{level:3,title:"7-12.组件复用案例：购物车",slug:"_7-12-组件复用案例-购物车",children:[]}]},{level:2,title:"8.VUE路由",slug:"_8-vue路由",children:[{level:3,title:"8-0.路由原理",slug:"_8-0-路由原理",children:[]},{level:3,title:"8-1.路由概述",slug:"_8-1-路由概述",children:[]},{level:3,title:"8-2.定义一个基本的路由",slug:"_8-2-定义一个基本的路由",children:[]},{level:3,title:"8-3.路由重定向",slug:"_8-3-路由重定向",children:[]},{level:3,title:"8-4.编程式导航",slug:"_8-4-编程式导航",children:[]},{level:3,title:"8-5.路由传参",slug:"_8-5-路由传参",children:[]},{level:3,title:"8-6.嵌套路由",slug:"_8-6-嵌套路由",children:[]},{level:3,title:"8-7.命名路由",slug:"_8-7-命名路由",children:[]},{level:3,title:"8-8.命名视图",slug:"_8-8-命名视图",children:[]},{level:3,title:"8-9.路由中监视当前路由的路径",slug:"_8-9-路由中监视当前路由的路径",children:[]}]},{level:2,title:"9.前端工程化",slug:"_9-前端工程化",children:[{level:3,title:"各种方式搭建脚手架",slug:"各种方式搭建脚手架",children:[]},{level:3,title:"vue脚手架目录说明",slug:"vue脚手架目录说明",children:[]},{level:3,title:"9-0.项目基础配置",slug:"_9-0-项目基础配置",children:[]},{level:3,title:"9-1.导入less",slug:"_9-1-导入less",children:[]},{level:3,title:"9-2.导入element",slug:"_9-2-导入element",children:[]},{level:3,title:"9-3.两种不同的组件配置",slug:"_9-3-两种不同的组件配置",children:[]},{level:3,title:"9-4.较为全面的路由配置",slug:"_9-4-较为全面的路由配置",children:[]}]}],git:{}},key:"v-13c9aef5",path:"/vue/vue.html",title:"Vue基础",lang:"zh-CN",frontmatter:{title:"Vue基础",date:"2022/9/2 11:06",tag:["vue"],categories:["前端"],coverUrl:"https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210831004055590.png"},excerpt:"",headers:[{level:3,title:"vue技术栈",slug:"vue技术栈",children:[]},{level:3,title:"解决什么问题",slug:"解决什么问题",children:[]},{level:2,title:"1.安装",slug:"_1-安装",children:[{level:3,title:"VUE初体验",slug:"vue初体验",children:[]}]},{level:2,title:"2.Vue实例",slug:"_2-vue实例",children:[{level:3,title:"基本概念",slug:"基本概念",children:[]},{level:3,title:"创建",slug:"创建",children:[]},{level:3,title:"数据与方法",slug:"数据与方法",children:[]},{level:3,title:"生命周期钩子",slug:"生命周期钩子",children:[]}]},{level:2,title:"3.指令",slug:"_3-指令",children:[{level:3,title:"指令概念",slug:"指令概念",children:[]}]},{level:2,title:"4.过滤器",slug:"_4-过滤器",children:[{level:3,title:"作用",slug:"作用-9",children:[]},{level:3,title:"适用场景",slug:"适用场景-1",children:[]},{level:3,title:"语法",slug:"语法-1",children:[]},{level:3,title:"例子",slug:"例子",children:[]}]},{level:2,title:"5.计算属性",slug:"_5-计算属性",children:[]},{level:2,title:"6.侦听器",slug:"_6-侦听器",children:[]},{level:2,title:"7.Vue组件",slug:"_7-vue组件",children:[{level:3,title:"7-1.组件的定义",slug:"_7-1-组件的定义",children:[]},{level:3,title:"7-2.组件中的结构",slug:"_7-2-组件中的结构",children:[]},{level:3,title:"7-3.组件中的data只能是一个function",slug:"_7-3-组件中的data只能是一个function",children:[]},{level:3,title:"7-4.父组件向子组件传值(子组件使用父组件的数据)",slug:"_7-4-父组件向子组件传值-子组件使用父组件的数据",children:[]},{level:3,title:"7-5.子组件调用父组件的方法(父组件的方法传递给子组件)",slug:"_7-5-子组件调用父组件的方法-父组件的方法传递给子组件",children:[]},{level:3,title:"7-6.子组件调用父组件方法的时候传参",slug:"_7-6-子组件调用父组件方法的时候传参",children:[]},{level:3,title:"7-7.兄弟组件之间的通信",slug:"_7-7-兄弟组件之间的通信",children:[]},{level:3,title:"7-8.采用v-if来实现不同组件的切换",slug:"_7-8-采用v-if来实现不同组件的切换",children:[]},{level:3,title:"7-9.动态组件",slug:"_7-9-动态组件",children:[]},{level:3,title:"7-10.插槽",slug:"_7-10-插槽",children:[]},{level:3,title:"7-11.组件的嵌套",slug:"_7-11-组件的嵌套",children:[]},{level:3,title:"7-12.组件复用案例：购物车",slug:"_7-12-组件复用案例-购物车",children:[]}]},{level:2,title:"8.VUE路由",slug:"_8-vue路由",children:[{level:3,title:"8-0.路由原理",slug:"_8-0-路由原理",children:[]},{level:3,title:"8-1.路由概述",slug:"_8-1-路由概述",children:[]},{level:3,title:"8-2.定义一个基本的路由",slug:"_8-2-定义一个基本的路由",children:[]},{level:3,title:"8-3.路由重定向",slug:"_8-3-路由重定向",children:[]},{level:3,title:"8-4.编程式导航",slug:"_8-4-编程式导航",children:[]},{level:3,title:"8-5.路由传参",slug:"_8-5-路由传参",children:[]},{level:3,title:"8-6.嵌套路由",slug:"_8-6-嵌套路由",children:[]},{level:3,title:"8-7.命名路由",slug:"_8-7-命名路由",children:[]},{level:3,title:"8-8.命名视图",slug:"_8-8-命名视图",children:[]},{level:3,title:"8-9.路由中监视当前路由的路径",slug:"_8-9-路由中监视当前路由的路径",children:[]}]},{level:2,title:"9.前端工程化",slug:"_9-前端工程化",children:[{level:3,title:"各种方式搭建脚手架",slug:"各种方式搭建脚手架",children:[]},{level:3,title:"vue脚手架目录说明",slug:"vue脚手架目录说明",children:[]},{level:3,title:"9-0.项目基础配置",slug:"_9-0-项目基础配置",children:[]},{level:3,title:"9-1.导入less",slug:"_9-1-导入less",children:[]},{level:3,title:"9-2.导入element",slug:"_9-2-导入element",children:[]},{level:3,title:"9-3.两种不同的组件配置",slug:"_9-3-两种不同的组件配置",children:[]},{level:3,title:"9-4.较为全面的路由配置",slug:"_9-4-较为全面的路由配置",children:[]}]}],content:'\r\n# Vue.js简介\r\n\r\n- 一套用于构建用户界面的**渐进式框架**\r\n- Vue 被设计为可以自底向上逐层应用\r\n- Vue 的核心库只关注视图层\r\n\r\n**按需导入**\r\n\r\nVue是三大前端流行框架之一\r\n\r\n声明式编程，符合MVC的设计\r\n\r\n### `vue技术栈`\r\n\r\n| **`web技术栈`**                                              | **`移动端技术栈`**                                           |\r\n| ------------------------------------------------------------ | ------------------------------------------------------------ |\r\n| VUE基础(语法/组件)                                           | VUE基础(语法/组件)                                           |\r\n| VUE_Router----路由                                           | VUE_Router----路由                                           |\r\n| axios-----交互                                               | axios-----交互                                               |\r\n| webpakage----打包工具                                        | webpakage----打包工具                                        |\r\n| Element UI------UI框架(iview  UI \\| HeyUI \\| Ant Design of Vue \\|  AmazeUI \\| MuseUI ) | EEUI----UI框架(Vant https://vant-contrib.gitee.io/vant/#/zh-CN/ ) |\r\n| VUEX------数据共享                                           | VUEX------数据共享                                           |\r\n\r\n### `解决什么问题`\r\n\r\n> > 前端渲染的方式：\r\n> >\r\n> > 1.原生字符串拼接: 容易拼接出错，且不同的人代码风格不同，项目换人后，较难维护\r\n> >\r\n> > 2.模版引擎: 解决了代码可读性问题，但是仍然容易出错，且没有专门的事件机制\r\n> >\r\n> > 3.vue模版语法\r\n>\r\n> vue模版语法有效的解决了上述问题\r\n\r\n![image-20210827104742406](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210827104742406.png)\r\n\r\nvue工作原理\r\n\r\n![image-20210827171240521](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210827171240521.png)\r\n\r\n\r\n\r\n\r\n\r\n## 1.安装\r\n\r\n离线：使用页面的script标签进行导入下载好的vue.js文档(https://cn.vuejs.org/js/vue.js)\r\n\r\n```html\r\n<script src="文件路径/vue.js"><\/script>\r\n```\r\n\r\n在线:\r\n\r\n```html\r\n <script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"><\/script>\r\n```\r\n\r\n### `VUE初体验`\r\n\r\n![image-20210827101732307](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210827101732307.png)\r\n\r\n## 2.Vue实例\r\n\r\n### 基本概念\r\n\r\n>MVVM:\r\n>\r\n>m--model: 模型\r\n>\r\n>v--view： 视图\r\n>\r\n>vm--viewModel: 模型视图，介于模型和视图之间的东西，起到桥梁作用，使得模型和视图能够分开，也能保持通讯\r\n\r\n![image-20210831004055590](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210831004055590.png)\r\n\r\n### 创建\r\n\r\n每个 Vue 应用都是通过用 `Vue` 函数创建一个新的 **Vue 实例**开始的：\r\n\r\n```javascript\r\nconst\t vm = new Vue({\r\n  // 选项\r\n})\r\n```\r\n\r\n### 数据与方法\r\n\r\n```vue\r\ndata的两种方式:\r\n//数据对象\r\ndata:{\r\n    \r\n}\r\n\r\n//数据函数方法\r\ndata() {\r\n    return {}\r\n}\r\n```\r\n\r\n**对象必须是纯粹的对象 (含有零个或多个的 key/value 对)**\r\n\r\n```javascript\r\n// 我们的数据对象\r\nvar data = { a: 1 }\r\n\r\n// 该对象被加入到一个 Vue 实例中\r\nvar vm = new Vue({\r\n  data: data\r\n})\r\n\r\n// 获得这个实例上的 property\r\n// 返回源数据中对应的字段\r\nvm.a == data.a // => true\r\n\r\n// 设置 property 也会影响到原始数据\r\nvm.a = 2\r\ndata.a // => 2\r\n\r\n// ……反之亦然\r\ndata.a = 3\r\nvm.a // => 3\r\n```\r\n\r\n如果你知道你后面需要一个 property，但是一开始它为空或不存在，那么你仅需要设置一些初始值\r\n\r\n```javascript\r\ndata: {\r\n  newTodoText: \'\',\r\n  visitCount: 0,\r\n  hideCompletedTodos: false,\r\n  todos: [],\r\n  error: null\r\n}\r\n```\r\n\r\n如果要阻止修改现有的property的行为，那么可以使用Object.freeze()\r\n\r\n```javascript\r\nvar data = { a: 1 }\r\nvar vm = new Vue({\r\n  el: \'#example\',\r\n  data: data\r\n})\r\n\r\nvm.$data === data // => true\r\nvm.$el === document.getElementById(\'example\') // => true\r\n\r\n// $watch 是一个实例方法  监听该值\r\nvm.$watch(\'a\', function (newValue, oldValue) {\r\n  // 这个回调将在 `vm.a` 改变后调用\r\n})\r\n```\r\n\r\n\r\n\r\n### 生命周期钩子\r\n\r\n- created:在实例创建完成后立即执行，\r\n- beforeMount:在挂载之前被调用，相关的渲染函数首次被调用\r\n- mounted:el被新创建的vm.$el替换，挂载成功\r\n- beforeUpdate:数据更新的调用\r\n- updated:组件DOM已经更新，组件更新完毕\r\n\r\n**不要在选项 property 或回调上使用箭头函数  =>,因为这样无法使用this指向Vue实例**\r\n\r\n## 3.指令\r\n\r\n###  指令概念\r\n\r\n- 本质就是自定义属性 \r\n- Vue中指令都是以 v- 开头  \r\n\r\n#### 插值\r\n\r\n数据绑定最常见的形式就是使用“Mustache”语法 (双大括号) 的文本插值：\r\n\r\n```vue\r\n<span>Message: {{ msg }}</span>\r\n```\r\n\r\nvue的指令： v- 开头的特殊属性\r\n作用是：将dom和数据进行响应\r\n\r\n####  v-cloak\r\n\r\n- 防止页面加载时出现闪烁问题\r\n\r\n  ```html\r\n   <style type="text/css">\r\n    /* \r\n      1、通过属性选择器 选择到 带有属性 v-cloak的标签  让他隐藏\r\n   */\r\n    [v-cloak]{\r\n      /* 元素隐藏    */\r\n      display: none;\r\n    }\r\n    </style>\r\n  <body>\r\n    <div id="app">\r\n      \x3c!-- 2、 让带有插值 语法的   添加 v-cloak 属性 \r\n           在 数据渲染完场之后，v-cloak 属性会被自动去除，\r\n           v-cloak一旦移除也就是没有这个属性了  属性选择器就选择不到该标签\r\n  \t\t 也就是对应的标签会变为可见\r\n      --\x3e\r\n      <div  v-cloak  >{{msg}}</div>\r\n    </div>\r\n    <script type="text/javascript" src="js/vue.js"><\/script>\r\n    <script type="text/javascript">\r\n      var vm = new Vue({\r\n        //  el   指定元素 id 是 app 的元素  \r\n        el: \'#app\',\r\n        //  data  里面存储的是数据\r\n        data: {\r\n          msg: \'Hello Vue\'\r\n        }\r\n      });\r\n  <\/script>\r\n  </body>\r\n  </html>\r\n  ```\r\n\r\n####  v-pre\r\n\r\n- 显示原始信息跳过编译过程\r\n- 跳过这个元素和它的子元素的编译过程。\r\n- **一些静态的内容不需要编译加这个指令可以加快渲染**\r\n\r\n```html\r\n    <span v-pre>{{ this will not be compiled }}</span>    \r\n\t\x3c!--  显示的是{{ this will not be compiled }}  --\x3e\r\n\t<span v-pre>{{msg}}</span>  \r\n     \x3c!--   即使data里面定义了msg这里仍然是显示的{{msg}}  --\x3e\r\n<script>\r\n    new Vue({\r\n        el: \'#app\',\r\n        data: {\r\n            msg: \'Hello Vue.js\'\r\n        }\r\n    });\r\n\r\n<\/script>\r\n```\r\n\r\n#### **v-once**\r\n\r\n- 执行一次性的插值【当数据改变时，插值处的内容不会继续更新】\r\n\r\n```html\r\n  \x3c!-- 即使data里面定义了msg 后期我们修改了 仍然显示的是第一次data里面存储的数据即 Hello Vue.js  --\x3e\r\n     <span v-once>{{ msg}}</span>    \r\n<script>\r\n    new Vue({\r\n        el: \'#app\',\r\n        data: {\r\n            msg: \'Hello Vue.js\'\r\n        }\r\n    });\r\n<\/script>\r\n```\r\n\r\n\r\n\r\n#### v-text\r\n\r\nv-text:一定程度上等效于{{}}\r\n\r\n#####         作用\r\n\r\n​            将v-text=""内部的变量渲染(覆盖)到标签的内部\r\n\r\n#####         用法\r\n\r\n​            在标签内部给定v-text="绑定到data的键"\r\n\r\n#####         作用机理\r\n\r\n​            v-text实际上是将指定键的值给到元素的InnerText属性\r\n\r\n#####         注意事项\r\n\r\n​            只能用于元素的InnerText属性能够接收数据的元素\r\n\r\n#####  v-text和{{}}的区别\r\n\r\n- 里面都能够放置表达式|表达式\r\n- {{}}不会覆盖标签体中已有的数据，而v-text会将标签体进行覆盖\r\n- 在网络延迟高的情况下，{{}}会将未填充数据的格式直接显示出来，这样会导致用户体验不佳，而v-text会等数据加载完后再进行渲染\r\n- 如果非要用{{}}又要解决上面的显示表达式的问题，就在父元素上面添加v-cloak，然后再`<style>`里面设置`[v-cloak]{display:none;}`\r\n\r\n#### v-html\r\n\r\n##### 作用\r\n\r\n​\t将v-html=""内部的变量渲染到标签的内部\r\n\r\n##### 作用机理\r\n\r\n```html\r\nv-html实际上是将指定键的值给到元素的innerHtml属性\r\n```\r\n\r\n##### 注意事项\r\n\r\n​\t只能用给innerHtml能接收值得元素赋值\r\n\r\n​\tv-html会覆盖标签体的值\r\n\r\n#### v-model\r\n\r\n##### 作用\r\n\r\n​     **双向绑定指令**，限制在 `<input>、<select>、<textarea>、components`中使用\r\n\r\n> - 当数据发生变化的时候，视图也就发生变化\r\n> - 当视图发生变化的时候，数据也会跟着同步变化\r\n\r\n##### 注意事项\r\n\r\n​\t他不能用在纯展示信息的元素上，否则会报错\r\n\r\n##### 底层原理\r\n\r\n```vue\r\n<input :value="msg" @input="shuru">\r\n<input :value="msg" @input="msg = $event.target.value">\r\n\r\n<script>\r\n    const vm = new Vue({\r\n        el: "#app",\r\n        data: {\r\n            msg: "哈麻皮"\r\n        },\r\n        methods: {\r\n            shuru(event) { \r\n                console.log(event.target.value)\r\n            }\r\n        }\r\n    })\r\n<\/script>\r\n```\r\n\r\n#### v-if\r\n\r\n##### 作用\r\n\r\n​\t根据不同的条件对数据显示或隐藏\r\n\r\n##### 作用机理\r\n\r\n​\t当v-if条件满足时对应的元素或数据进行渲染\r\n\r\n##### 注意事项\r\n\r\n​\tv-else-if 或 v-else 依托于 v-if\r\n\r\n##### 适用场景\r\n\r\n​\t后台给的数据对应了不同的前端展示\r\n\r\n#### v-show\r\n\r\n##### 作用\r\n\r\n​\t判断条件是否成立，成立就显示，不成立则不显示\r\n\r\n##### 作用机理\r\n\r\n```html\r\nv-show是通过添加行内样式style="display:none"来隐藏\r\n```\r\n\r\n##### v-if和v-show的区别\r\n\r\n​\tv-if:先进行判断再渲染到dom中，如果没有满足就不渲染\r\n\r\n​\tv-show:不管是否满足，首先渲染在页面 然后通过判断来是否添加display:none\r\n\r\n##### 使用场景上的区别\r\n\r\n​\tv-if: **保密性较强时**，使用v-if\r\n\r\n​\t\t\t需要**反复渲染dom，对性能消耗较大**\r\n\r\n​\tv-show:**保密性较低**，使用v-show\r\n\r\n​\t\t\t**只是对dom的显示进行设置**，所以性能较高，但安全性不高\r\n\r\n#### v-on\r\n\r\n##### 缩写 @\r\n\r\n##### 作用\r\n\r\n​\t将事件绑定至vm的实例中\r\n\r\n##### 使用方式\r\n\r\n1. 绑定函数\r\n2. 绑定内联语句\r\n\r\n##### 参数\r\n\r\n​\t$event 就是事件本身  该形参的位置完全无关紧要\r\n\r\n##### 事件修饰符\r\n\r\n- 在事件处理程序中调用 `event.preventDefault()` 或 `event.stopPropagation()` 是非常常见的需求。\r\n- Vue 不推荐我们操作DOM    为了解决这个问题，Vue.js 为 `v-on` 提供了**事件修饰符**\r\n- 修饰符是由点开头的指令后缀来表示的\r\n\r\n```html\r\n\x3c!-- 阻止单击事件继续传播 --\x3e\r\n<a v-on:click.stop="doThis"></a>\r\n\r\n\x3c!-- 提交事件不再重载页面 --\x3e\r\n<form v-on:submit.prevent="onSubmit"></form>\r\n\r\n\x3c!-- 修饰符可以串联   即阻止冒泡也阻止默认事件 --\x3e\r\n<a v-on:click.stop.prevent="doThat"></a>\r\n\r\n\x3c!-- 只当在 event.target 是当前元素自身时触发处理函数 --\x3e\r\n\x3c!-- 即事件不是从内部元素触发的 --\x3e\r\n<div v-on:click.self="doThat">...</div>\r\n\r\n使用修饰符时，顺序很重要；相应的代码会以同样的顺序产生。因此，用 v-on:click.prevent.self 会阻止所有的点击，而 v-on:click.self.prevent 只会阻止对元素自身的点击。\r\n```\r\n\r\n\r\n\r\n##### 按键修饰符\r\n\r\n- 在做项目中有时会用到键盘事件，在监听键盘事件时，我们经常需要检查详细的按键。Vue 允许为 `v-on` 在监听键盘事件时添加按键修饰符\r\n\r\n```html\r\n\x3c!-- 只有在 `keyCode` 是 13 时调用 `vm.submit()` --\x3e\r\n<input v-on:keyup.13="submit">\r\n\r\n\x3c!-- -当点击enter 时调用 `vm.submit()` --\x3e\r\n<input v-on:keyup.enter="submit">\r\n\r\n\x3c!--当点击enter或者space时  时调用 `vm.alertMe()`   --\x3e\r\n<input type="text" v-on:keyup.enter.space="alertMe" >\r\n\r\n常用的按键修饰符\r\n.enter =>    enter键\r\n.tab => tab键\r\n.delete (捕获“删除”和“退格”按键) =>  删除键\r\n.esc => 取消键\r\n.space =>  空格键\r\n.up =>  上\r\n.down =>  下\r\n.left =>  左\r\n.right =>  右\r\n\r\n<script>\r\n\tvar vm = new Vue({\r\n        el:"#app",\r\n        methods: {\r\n              submit:function(){},\r\n              alertMe:function(){},\r\n        }\r\n    })\r\n\r\n<\/script>\r\n```\r\n\r\n##### 自定义按键修饰符别名\r\n\r\n- 在Vue中可以通过`config.keyCodes`自定义按键修饰符别名\r\n\r\n```html\r\n<div id="app">\r\n    预先定义了keycode 116（即F5）的别名为f5，因此在文字输入框中按下F5，会触发prompt方法\r\n    <input type="text" v-on:keydown.f5="prompt()">\r\n</div>\r\n\r\n<script>\r\n\t\r\n    Vue.config.keyCodes.f5 = 116;\r\n\r\n    let app = new Vue({\r\n        el: \'#app\',\r\n        methods: {\r\n            prompt: function() {\r\n                alert(\'我是 F5！\');\r\n            }\r\n        }\r\n    });\r\n<\/script>\r\n```\r\n\r\n\r\n\r\n\r\n\r\n#### v-bind\r\n\r\n##### 缩写 :\r\n\r\n##### 修饰符\r\n\r\n- `.prop` - 作为 DOM property 绑定而不是作为 attribute 绑定\r\n- `.camel` - 将 kebab-case attribute 名转换为 camelCase。\r\n- `.sync` 语法糖，会扩展成一个更新父组件绑定值的 `v-on` 侦听器。\r\n\r\n##### 作用\r\n\r\n​\t主要用于JavaScript Object绑定到属性,从而通过数据对元素操作属性\r\n\r\n​\t多个属性可以多个对象的方式来进行绑定，也可以通过数组来绑定\r\n\r\n​\t支持三元表达式\r\n\r\n#### 数组\r\n\r\n```javascript\r\nthis.arrays.push(this.bianliang);\r\n```\r\n\r\n##### 元素移除\r\n\r\n>###### pop 移除数组末尾的元素\r\n>\r\n>###### shift  从头移除\r\n>\r\n\r\n##### 元素增加\r\n\r\n>###### unshift 从头开始加\r\n>\r\n>###### push 向后追加元素\r\n>\r\n\r\n##### splice\r\n\r\nsplice(起始下标(0维数组),删除数量,删除后替换的变量)\r\n\r\n```javascript\r\nthis.arrays.splice(0,1,parseFloat(this.bianliang));\r\n```\r\n\r\n##### sort\r\n\r\n对数组进行排序，sort中如果需要乱序，就需要通过返回随机数实现\r\n\r\n```javascript\r\n//\r\nthis.arrays.sort((a, b) => {\r\n    a = Math.random();\r\n    b = Math.random();\r\n    return a - b;\r\n})\r\n```\r\n\r\n##### reverse\r\n\r\n将数组反转\r\n\r\n##### filter\r\n\r\n\r\n传入的元素符合条件就留下，否则清除，但不会影响原始数组的数据，它会返回解析过后的数组\r\n\r\n###### 语法\r\n\r\nfilter((元素)=>{\r\n    return 筛选条件;\r\n}):\r\n\r\n```javascript\r\nthis.arrays = this.arrays.filter((item) => {\r\n    return item % 2 === 0;\r\n})\r\n```\r\n\r\n#### v-for\r\n\r\n> - **不推荐**同时使用 `v-if` 和 `v-for`\r\n> - 当 `v-if` 与 `v-for` 一起使用时，`v-for` 具有比 `v-if` 更高的优先级。\r\n\r\n##### 作用\r\n\r\n​\t基于源数据多次渲染元素或模板块,被标记的元素就生成哪种元素\r\n\r\n##### 用法\r\n\r\n​\tv-for = \' () in 被遍历对象 \'\r\n\r\n##### 形参区别\r\n\r\n​        遍历数字: (元素,下标)\r\n​        遍历对象: (属性名,属性值,属性下标)\r\n​        遍历数组对象:(数组下标,元素对象)\r\n\r\n##### :key\r\n\r\n为避免有时未加:Key修饰符导致的Vue对Dom算法渲染错误,通过加上:Key修饰符(唯一的标识)来解决\r\n\r\n例如以下例子\r\n\r\n没有添加:key修饰符之前\r\n\r\n\r\n\r\n添加后:\r\n\r\n\r\n\r\n结论：\r\n\r\n​\t\t当用户随机选中一条数据后，单击添加，按照正常逻辑，增加后，单选按钮应该跟随之前选中的信息，而这里并没有按照合理的流程进行操作，这就是因为Vue对Dom的算法操作导致的渲染问题,所以根据需求进行添加:key修饰符，大部分情况下是添加的\r\n\r\n​\t:key使用的注意事项:\r\n\r\n​\t\t\t它的值不能是对象(Object)\r\n\r\n```html\r\n<div id="app">\r\n    <input v-model="newName" id="write">\r\n    <el-button type="info" @click="clickUnshift">增加</el-button>\r\n    \x3c!--这里演示加不加 :key=\'boy.id\'的区别--\x3e\r\n    <p v-for="(boy,index) in boys" >\r\n        <label><input type="radio" name="boyBox">{{boy}}——{{index}}</label>\r\n    </p>\r\n</div>\r\n</body>\r\n</html>\r\n<script>\r\n    const vue = new Vue({\r\n        el: "#app",\r\n        data: {\r\n            num: 9,\r\n            arrays: ["项1", "项2", "项3", "项4", "项5"],\r\n            newName: "翠花",\r\n            boys: [\r\n                {\r\n                    id: 0,\r\n                    name: "小毛",\r\n                    age: 18\r\n                },\r\n                {\r\n                    id: 1,\r\n                    name: "小巴",\r\n                    age: 16\r\n                },\r\n                {\r\n                    id: 2,\r\n                    name: "小李",\r\n                    age: 12\r\n                },\r\n                {\r\n                    id: 3,\r\n                    name: "小王",\r\n                    age: 24\r\n                }\r\n            ]\r\n        }, methods: {\r\n            clickUnshift() {\r\n                //先根据输入的值生成对象\r\n                let newBoy = {id: this.boys.length + 1, name: this.newName, age: Math.floor(Math.random())};\r\n                //将新生成的对象加入数组头部\r\n                this.boys.unshift(newBoy);\r\n            }\r\n        }\r\n    });\r\n<\/script>\r\n```\r\n\r\n#### 自定义指令\r\n\r\n##### 作用\r\n\r\n​\t自己注册一个指令到Vue全局或局部\r\n\r\n##### 用法\r\n\r\n​\t注册全局指令: Vue.directive( id, [definition] )\r\n\r\n​\t注册局部指令: \r\n\r\n在Vue选项中添加\r\n\r\n```html\r\ndirectives: {\r\n    指令名称(元素, 绑定, 新虚拟节点, 旧虚拟节点) {\r\n        \r\n    }\r\n}\r\n```\r\n\r\n##### **directives**和**directive**的区别\r\n\r\n###### 创建方式\r\n\r\n一个是用Vue大类进行创建，一个是通过Vue的选项进行创建的\r\n\r\n全局自定义指令的创建相对局部自定义指令的创建要复杂一点\r\n\r\n![image-20210429102407804](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210429102407804.png)\r\n\r\n###### 绑定的方式\r\n\r\n全局自定义指令绑定是可以将事件或属性进行分开绑定\r\n\r\n​\t关于事件(元素的聚焦、失焦、悬停等)的绑定在inserted中\r\n\r\n​\t关于属性(元素的样式、属性)的绑定在bind中\r\n\r\n局部自定义指令绑定是将update和bind合在一起\r\n\r\n## 4.过滤器\r\n\r\n###     作用\r\n\r\n​        可被用于文本格式化\r\n\r\n### 适用场景\r\n\r\n​        商品展示时的单位转换\r\n\r\n​\t\t日期的格式转换s\r\n\r\n### 语法\r\n\r\n​        通过花括号或者v-bind调用\r\n​        {{参数 | 处理参数的函数}}  返回处理后的结果\r\n​        处理函数的参数:第一个参数是管道符号前的结果\r\n​        多个过滤器链永远以最后一个过滤器输出的结果作为结果\r\n​        过滤器必须return  显示的值是最后一个过滤器return的结果\r\n\r\n### 例子\r\n\r\n```vue\r\n{{today| dateFilter}}\r\n\r\n------\r\nfilters: {\r\n    dateFilter(date) {\r\n        return moment(date).format(\'YYYY年MM月DD日 hh:mm:ss\');\r\n    }\r\n},\r\n```\r\n\r\n\r\n\r\n## 5.计算属性\r\n\r\n##### 解决问题\r\n\r\n> 在插值中使用表达式,可读性差，不利于维护\r\n>\r\n> 通过get() 获取相关属性的变化计算自己，通过set()监视自己的属性的主动变化(因此可以用来影响关联属性)\r\n\r\n##### 作用\r\n\r\n​\t\t通过关联属性对原始属性进行变更\r\n\r\n##### 用法\r\n\r\n​\tVue选项computed:{}\r\n\r\n![image-20210430085821451](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210430085821451.png)\r\n\r\n**计算属性是基于它们的响应式依赖进行缓存的,只在相关响应式依赖发生改变时它们才会重新求值。**\r\n\r\n**计算属性必须返回一个结果（计算过后的结果）**\r\n\r\n计算属性作为函数出现时默认的是：\r\n\r\n​\t这个属性对象的getter\r\n\r\n计算属性对象的setter其实是一个监视器，只要计算属性的本体发生变化,就会触发\r\n\r\n##### 应用场景\r\n\r\n​\t面向不同国家的一个商城，里面的价格只有一份，不同国家的人看到的货币都是经过汇率换算过的结果，这时就可以使用到计算属性进行计算\r\n\r\nPS:单选项中访问其他选项的属性或方法都需要通过this指向vm实例再通过实例得到其他选项中的属性或方法\r\n\r\n```vue\r\n<div id="app">\r\n    第一个输入框 <input v-model="input1"> <br>\r\n    第二个输入框 <input v-model="input2"> <br>\r\n    前两个数字相加的结果 <input v-model="result"> <br>\r\n</div>\r\n</body>\r\n</html>\r\n<script>\r\n    const app = new Vue({\r\n        el:"#app",\r\n        computed:{\r\n            result:{\r\n                //这其实是result属性的回调，回调的时机是获取当前属性值的时候，作用是将返回值作为属性值\r\n                get(){\r\n                    let regNum = /^\\d*$/ //申明数字的正则表达式\r\n                    let num1 = parseFloat(this.input1)\r\n                    let num2 = parseFloat(this.input2)\r\n                    if (regNum.test(num1) && regNum.test(num2)){\r\n                        return num1 + num2\r\n                    }else{\r\n                        return this.input1 + this.input2\r\n                    }\r\n                },\r\n                //这也是一个回调，回调的实际是属性值发生改变的时候，监视当前属性值的变化，同步更新相关属性值\r\n                set(value){\r\n                    let regNum = /^\\d*$/ //申明数字的正则表达式\r\n                    let num1 = parseFloat(this.input1)\r\n                    let num2 = parseFloat(this.input2)\r\n                    //如果是数字类型，就转化后相加\r\n                    if (regNum.test(num1) && regNum.test(num2)){\r\n                        this.input1 = value - this.input2\r\n                        this.input2 = value - this.input1\r\n                        value = num1 + num2\r\n                        //如果不是数字类型就拆分字符串\r\n                    }else{\r\n                        this.input1= value.split(this.input2)[0]\r\n                        this.input2= value.split(this.input1)[1]\r\n                        value = this.input1 + this.input2\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        data:{\r\n            input1:"",\r\n            input2:""\r\n        }\r\n\r\n    })\r\n<\/script>\r\n```\r\n\r\n\r\n\r\n## 6.侦听器\r\n\r\n观察和响应 Vue 实例上的数据变动,计算属性也是如此\r\n\r\n##### 侦听器的参数\r\n\r\n参数1：更改后的值,参数2:更改前的值\r\n\r\n##### 侦听器与计算属性的区别\r\n\r\n侦听器侦听对象的本身，并且在其他的选项中已经存在而计算属性不用\r\n\r\n1. 侦听器，侦听自己，当值发生变化的时候会触发，有两个参数（新值，旧值）\r\n2. 计算属性，侦听关联属性，当关联属性的值发生变化的时候，就得到一个值\r\n3. 计算属性具有缓存，证明方式是多次调用同一个计算属性，观察执行多少次，侦听器是每次变化都会执行\r\n4. 每个计算属性都有两个回调函数，一个是setter，一个是getter\r\n5. get用来返回当前属性的值，不会影响原始属性的值\r\n6. set用于监视属性，一旦属性改变，就会调用set，就会将新的值传入set(value)\r\n\r\n```vue\r\n<div id="app">\r\n    <p>现在的数字是:{{num}}</p>\r\n    <br>\r\n    <button @click="num++">num++</button>\r\n    <p>这个数字是一个{{result}}</p>\r\n</div>\r\n</body>\r\n</html>\r\n<script>\r\n    const vm = new Vue({\r\n        el: "#app",\r\n        data:{\r\n            num: 1,\r\n            result: "奇数"\r\n        },\r\n        watch: {\r\n            //监听某个值的变化\r\n            num(newValue, oldValue) {\r\n                if (newValue % 2 == 0) {\r\n                    return this.result = "偶数"\r\n                }\r\n                return this.result = "奇数"\r\n            }\r\n        }\r\n    })\r\n<\/script>\r\n```\r\n\r\n## 7.Vue组件\r\n\r\n> 模块：可复用的代码块\r\n>\r\n> 组件：可复用的UI\r\n\r\n用template声明一个需要复用的html结构 组件没有挂载点\r\n组件具有单根性,如果传入多个元素，就只渲染第一个元素，为了确保不出错，就直接使用div进行包裹\r\n全局组件 可以在不同的vue实例间进行调用\r\n\r\n```javascript\r\nVue.component("组件名称", {\r\n    template: `单标签`\r\n});\r\n```\r\n\r\n\r\n\r\n### 7-1.组件的定义\r\n\r\n组件的定义有三种方式：\r\n\r\n```javascript\r\n// 注册组件，传入一个扩展过的构造器\r\nVue.component(\'my-component\', Vue.extend({ /* ... */ }))\r\n\r\n// 注册组件，传入一个选项对象 (自动调用 Vue.extend)\r\nVue.component(\'my-component\', { /* ... */ })\r\n\r\n// 获取注册的组件 (始终返回构造器)\r\nvar MyComponent = Vue.component(\'my-component\')\r\n```\r\n\r\n#### 7-1-1.利用构造器创建子子类，再把子类注册到全局组件\r\n\r\n```html\r\n<div id="app">\r\n    \x3c!--使用组件--\x3e\r\n    <zujian></zujian>\r\n</div>\r\n</body>\r\n</html>\r\n<script>\r\n    //第一种方式,利用构造器 使用基础 Vue 构造器，创建一个“子类”。参数是一个包含组件选项的对象。\r\n    const zujian = Vue.extend({\r\n        template: `<div>\r\n           <p>美人不是母胎生</p>\r\n           <p>应是桃花树长成</p>\r\n        </div>`\r\n    })\r\n    //将zujian注册到全局组件\r\n    Vue.component("zujian",zujian)\r\n\r\n    const vm = new Vue({\r\n        el: "#app",\r\n        data: {}\r\n    })\r\n<\/script>\r\n```\r\n\r\n#### 7-1-2.直接注册\r\n\r\n```html\r\n<div id="app">\r\n  \x3c!--使用组件--\x3e\r\n    <zujian></zujian>\r\n</div>\r\n</body>\r\n</html>\r\n<script>\r\n  //直接注册全局组件\r\n  Vue.component(\'zujian\',{\r\n    template:`<div>\r\n    <p>人间四月芳菲尽</p>\r\n    <p>山寺桃花始盛开</p>\r\n    </div>`\r\n  })\r\n    const vm = new Vue({\r\n        el: "#app",\r\n        data: {}\r\n    })\r\n<\/script>\r\n```\r\n\r\n#### 7-1-3.通过选择器来定义\r\n\r\n```html\r\n<div id="app">\r\n    \x3c!--使用组件--\x3e\r\n    <zujian></zujian>\r\n</div>\r\n\x3c!--这里是一个template模板标签,专门定义UI结构的--\x3e\r\n<template id="xiakexing">\r\n  <div>\r\n    <p>十步杀一人,千里不留行</p>\r\n    <p>事了拂衣去,深藏功与名</p>\r\n  </div>\r\n</template>\r\n</body>\r\n</html>\r\n<script>\r\n    //通过引入上面<template>标签来注册组件\r\n    Vue.component(\'zujian\',{\r\n        //这里用的是反引号,如果用单引号,其实也没问题,就是爆红不好看\r\n        template:`#xiakexing`\r\n    })\r\n    const vm = new Vue({\r\n        el: "#app",\r\n        data: {}\r\n    })\r\n<\/script>\r\n```\r\n\r\n\r\n\r\n私有组件的定义方式：\r\n\r\n```javascript\r\nconst vm = new Vue({\r\n    el: "#app",\r\n    data: {\r\n    \r\n    },\r\n    components:{\r\n        组件名:{\r\n            template: "单根标签"\r\n        }\r\n    }\r\n})\r\n```\r\n\r\n\r\n\r\n### 7-2.组件中的结构\r\n\r\n由于组件本身就是一个vue实例，所以vue实例该有的它都有\r\n\r\n```html\r\n<div id="app">\r\n    <zujian></zujian>\r\n</div>\r\n</body>\r\n</html>\r\n<script>\r\n    //注册一个功能全面的组件\r\n    Vue.component(\'zujian\',{\r\n        template:`<div>\r\n        <el-button type="primary" @click="sayName">点击弹出诗人名字</el-button>\r\n        <p>安得世间两全法</p>\r\n        <p>不负如来不负卿</p>\r\n        <p>{{3.3 | priceFilter}}</p>\r\n        </div>`,\r\n        //方法\r\n        methods:{\r\n            sayName(){\r\n                this.$message.success(\'这首诗是大情圣仓央嘉措的作品\')\r\n            }\r\n        },\r\n        //过滤器\r\n        filters:{\r\n            priceFilter(value){\r\n                return "$" + value + "一个蛤蟆皮"\r\n            }\r\n        }\r\n    })\r\n    const vm = new Vue({\r\n        el: "#app",\r\n        data: {}\r\n    })\r\n<\/script>\r\n```\r\n\r\n\r\n\r\n### 7-3.组件中的data只能是一个function\r\n\r\n**一个组件的 `data` 选项必须是一个函数**，因此每个实例可以维护一份被返回对象的独立的拷贝：\r\n\r\n> 每次return都是一个新的对象\r\n\r\n```html\r\n<div id="app">\r\n    \x3c!--多个组件的num互不干扰--\x3e\r\n  <zujian></zujian>\r\n  <zujian></zujian>\r\n</div>\r\n</body>\r\n</html>\r\n<script>\r\n    //注册一个组件\r\n    Vue.component(\'zujian\', {\r\n        template:`<div>\r\n        <p>计数器:<el-button type="info" @click="num --">-</el-button> <input v-model="num"> <el-button type="info" @click="num ++">+</el-button> </p>\r\n        </div>`,\r\n        //组件中的data是函数才能互不影响\r\n        data(){\r\n            return{\r\n                num:1\r\n            }\r\n        },\r\n    })\r\n    const vm = new Vue({\r\n        el: "#app",\r\n        data: {}\r\n    })\r\n<\/script>\r\n```\r\n\r\n> data中的数据不是私有的时候的问题\r\n>\r\n> > 问题描述： 如下，在组件的data选项中return外部的obj，这样组件在调用的过程中，数据就会发生共享，这样也更加容易出错\r\n\r\n```html\r\n<div id="app">\r\n    <ok></ok>\r\n    <br>\r\n    <ok></ok>\r\n</div>\r\n</body>\r\n</html>\r\n<script>\r\n    //申明一个变量\r\n    let obj = {num: 0}\r\n    //申明一个组件\r\n    Vue.component(\'ok\', {\r\n        template: `\r\n          <div>\r\n          <el-tag>{{ num }}</el-tag>\r\n          <br>\r\n          <el-button @click="addSelf">点击</el-button>\r\n          </div>`,\r\n        data() {\r\n            return obj\r\n        },\r\n        methods: {\r\n            addSelf() {\r\n                this.num++\r\n            }\r\n        }\r\n    })\r\n    const vm = new Vue({\r\n        el: "#app",\r\n        data: {}\r\n    })\r\n<\/script>\r\n```\r\n\r\n### 7-4.父组件向子组件传值(子组件使用父组件的数据) \r\n\r\n> 注意：无论是子组件自定义事件还是子组件自定义方法，都不支持大小写的驼峰命名\r\n\r\n单纯传值：子组件中的props中自定义属性 ====>> 调用子组件标签的时候，通过v-bind绑定子组件自定义的属性实现传值 ===>> 子组件中正常使用值\r\n\r\nprops中申明的虽然只能是个字符串，但是这个字符串，可以接收对象/数组/字符串/数字\r\n\r\n```html\r\n<div id="app">\r\n    \x3c!--这里通过强制绑定子组件属性 v-bind:hamapi 对子组件进行传值--\x3e\r\n    <zujian :hamapi="msg"></zujian>\r\n</div>\r\n</body>\r\n</html>\r\n<script>\r\n    //父组件向子组件传值就是在子组件里面申明了子组件标签的一个特殊属性\r\n    Vue.component(\'zujian\',{\r\n        props:[\'hamapi\'],\r\n        template:`<div>\r\n        <p style="color: red">看看能不能调用到父组件的内容</p>\r\n        <p>{{hamapi}}</p>\r\n        </div>`\r\n    })\r\n    const vm = new Vue({\r\n        el: "#app",\r\n        data: {\r\n            msg:"父组件的内容"\r\n        }\r\n    })\r\n<\/script>\r\n```\r\n\r\n将父组件传入的值，赋值给子组件，赋值的时候，就直接在data里面，通过 this.$props里面申明的属性取父组件穿过来的值即可\r\n\r\n```htmL\r\n<div id="app">\r\n    \x3c!--这里通过强制绑定子组件属性 v-bind:hamapi 对子组件进行传值--\x3e\r\n    <zujian :hamapi="num"></zujian>\r\n</div>\r\n</body>\r\n</html>\r\n<script>\r\n    //父组件向子组件传值就是在子组件里面申明了子组件标签的一个特殊属性\r\n    Vue.component(\'zujian\',{\r\n        props:[\'hamapi\'],\r\n        template:`<div>\r\n        <p style="color: red">点击修改父组件传入的值</p>\r\n        <el-button type="primary" @click="subNum ++">+</el-button>\r\n        <p>{{subNum}}</p>\r\n        </div>`,\r\n        data(){\r\n            return{\r\n                //通过this 拿到hamapi的值,并给予msg\r\n                subNum:this.hamapi\r\n            }\r\n        }\r\n    })\r\n    const vm = new Vue({\r\n        el: "#app",\r\n        data: {\r\n            num:3\r\n        }\r\n    })\r\n<\/script>\r\n```\r\n\r\n### 7-5.子组件调用父组件的方法(父组件的方法传递给子组件)\r\n\r\n> 注意：无论是子组件自定义事件还是子组件自定义方法，都不支持大小写的驼峰命名\r\n\r\n```html\r\n<div id="app">\r\n    \x3c!--这里通过强制绑定子组件属性 @子组件自定义方法="父组件的方法" 实现子组件调用父组件的方法--\x3e\r\n    <zujian :hamapi="num" @subevent="parentMethod"></zujian>\r\n</div>\r\n</body>\r\n</html>\r\n<script>\r\n    //父组件向子组件传值就是在子组件里面申明了子组件标签的一个特殊属性\r\n    Vue.component(\'zujian\',{\r\n        props:[\'hamapi\'],\r\n        template:`<div>\r\n        <p style="color: red">点击触发父组件的方法</p>\r\n        <el-button type="primary" @click="sayParent">触发父组件的方法</el-button>\r\n        <p>{{subNum}}</p>\r\n        </div>`,\r\n        data(){\r\n            return{\r\n                //通过this 拿到hamapi的值,并给予msg\r\n                subNum:this.hamapi\r\n            }\r\n        },\r\n        methods:{\r\n            sayParent(){\r\n                //通过 this的$emit调用到子组件标签中定义的subevent事件 \r\n                //$emit\r\n                this.$emit(\'subevent\')\r\n            }\r\n        }\r\n    })\r\n    const vm = new Vue({\r\n        el: "#app",\r\n        data: {\r\n            num:3\r\n        },\r\n        methods:{\r\n            parentMethod(){\r\n                this.$message.success(\'大家都是蛤蟆皮\')\r\n            }\r\n        }\r\n    })\r\n<\/script>\r\n```\r\n\r\n### 7-6.子组件调用父组件方法的时候传参\r\n\r\n--子组件修改父组件的数据---\r\n\r\n```html\r\n<div id="app">\r\n父组件的num的值{{num}}\r\n    <zujian @addanum="change"></zujian>\r\n</div>\r\n</body>\r\n</html>\r\n<script>\r\n    //定义一个组件\r\n    Vue.component(\'zujian\',{\r\n        template:`<div>\r\n        <el-button type="info" @click="hamapi">点击给父组件加个数字</el-button>\r\n        </div>`,\r\n        methods:{\r\n            hamapi(){\r\n                let num = Math.floor(Math.random()*10)\r\n                //通过this.$emit(\'自定义方法\',arg1,arg2,arg3...)中的arg给父组件传参,并修改父组件\r\n                this.$emit("addanum",num)\r\n            }\r\n        }\r\n    })\r\n    const vm = new Vue({\r\n        el: "#app",\r\n        data: {\r\n            num:1\r\n        },\r\n        methods:{\r\n            change(num){\r\n                this.num = this.num + num\r\n            }\r\n        }\r\n    })\r\n<\/script>\r\n```\r\n\r\n### 7-7.兄弟组件之间的通信\r\n\r\n> 关键知识点：\r\n> 监听事件： 事件中心.$on(\'兄弟组件中$emit(中第一个参数)\',兄弟组件中$emit(中第2个参数))\r\n> 销毁事件： 事件中心.$off(被$emit()绑定过的第一个参数)\r\n> 触发事件： 事件中心.$emit(\'控制兄弟组件的方法\',传给兄弟组件的参数)\r\n> 监听事件要写在mounted(){}这个钩子方法里面\r\n\r\n\r\n\r\n![image-20210507235447237](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210507235447237.png)\r\n\r\n\r\n\r\n```html\r\n<div id="app">\r\n    \x3c!--在vm实例也就是事件中心的父组件里面进行注销--\x3e\r\n    <button @click="xiaohui">销毁组件间通讯</button>\r\n    \x3c!--a组件--\x3e\r\n    <azujian></azujian>\r\n    \x3c!--b组件--\x3e\r\n    <bzujian></bzujian>\r\n\r\n</div>\r\n</body>\r\n</html>\r\n<script>\r\n    //注册全局事件中心\r\n    let parent = new Vue();\r\n\r\n    //组件A\r\n    Vue.component("azujian",{\r\n        data(){\r\n            return {\r\n                num:0\r\n            }\r\n        },\r\n        template:`<div>\r\n            A组件的计数器读数:{{num}} <br>\r\n            <button @click="adomchange">操作B组件的计数器读数</button>\r\n        </div>`,\r\n        methods:{\r\n            //写本组件的方法\r\n            adomchange(){\r\n                let nums = [10,3,-6,1,2]\r\n                //使用事件中心监听兄弟对象\r\n                parent.$emit(\'bar\',nums[Math.floor(Math.random()*nums.length)])\r\n            }\r\n        },\r\n        //调用组件a的更新的钩子方法\r\n        mounted(){\r\n            //启用事件中心的监听,当bzujian被绑定了aar的那个事件被触发的时候,就调用这个方法\r\n            parent.$on(\'aar\',(num)=>{\r\n                this.num += num\r\n            })\r\n        }\r\n    })\r\n    //组件B\r\n    Vue.component("bzujian",{\r\n        props:["counter"],\r\n        template:`<div>\r\n            B组件的计数器读数:{{num}} <br>\r\n            <button @click="bdomchange">操作A组件的计数器读数</button>\r\n        </div>`,\r\n        data(){\r\n            return {\r\n                num:0\r\n            }\r\n        },\r\n        methods:{\r\n            //写本组件的方法\r\n            bdomchange(){\r\n                let nums = [-2,-1,1,2]\r\n                //给事件中心绑定一个aar的事件,传入参数\r\n                parent.$emit(\'aar\',nums[Math.floor(Math.random()*nums.length)])\r\n            }\r\n        },\r\n        //调用组件a的更新的钩子方法\r\n        mounted(){\r\n            //启用事件中心对azujian的bar的监听,当azujian里面的 bar触发的时候,就调用这个方法\r\n            parent.$on(\'bar\',(num)=>{\r\n                this.num += num\r\n            })\r\n        }\r\n    })\r\n    const app = new Vue({\r\n        el: "#app",\r\n        data: {},\r\n        methods:{\r\n            xiaohui(){\r\n                //销毁事件中心对不同事件的绑定\r\n                parent.$off(\'aar\')\r\n                parent.$off(\'bar\')\r\n            }\r\n        }\r\n    })\r\n<\/script>\r\n```\r\n\r\n\r\n\r\n### 7-8.采用v-if来实现不同组件的切换\r\n\r\n```html\r\n<div id="app">\r\n    \x3c!--点击不同的按钮,控制isdenglu的取值--\x3e\r\n    <el-button @click="isdenglu = true">登录</el-button>---<el-button @click="isdenglu = false">注册</el-button>\r\n    <denglu v-if="isdenglu"></denglu>\r\n    <zhuce v-else></zhuce>\r\n</div>\r\n</body>\r\n</html>\r\n<script>\r\n    //自定义登录组件\r\n    Vue.component(\'denglu\',{\r\n        template:`<div>\r\n          <el-card>\r\n          登录组件\r\n          </el-card>\r\n        </div>`\r\n    })\r\n    //自定义注册组件\r\n    Vue.component(\'zhuce\',{\r\n        template:`<div>\r\n          <el-card>\r\n          注册组件\r\n          </el-card>\r\n        </div>`\r\n    })\r\n    const vm = new Vue({\r\n        el: "#app",\r\n        data: {\r\n            isdenglu:true\r\n        }\r\n    })\r\n<\/script>\r\n```\r\n\r\n### 7-9.动态组件\r\n\r\n采用component标签结合is属性实现不同组件的切换 \r\n\r\n```html\r\n<div id="app">\r\n  \x3c!--点击修改componentName的值--\x3e\r\n<el-button type="text" @click="componentName = \'jin\'">金</el-button>\r\n<el-button type="text" @click="componentName = \'mu\'">木</el-button>\r\n<el-button type="text" @click="componentName = \'shui\'">水</el-button>\r\n<el-button type="text" @click="componentName = \'huo\'">火</el-button>\r\n<el-button type="text" @click="componentName = \'tu\'">土</el-button>\r\n\x3c!--通过引入component组件,实现不同组件的切换--\x3e\r\n  <component :is="componentName"></component>\r\n</div>\r\n</body>\r\n</html>\r\n<script>\r\n    //金\r\n    Vue.component(\'jin\',{\r\n      template:`<div>\r\n      <el-card>五行:金</el-card>\r\n      </div>`\r\n    })\r\n    //木\r\n    Vue.component(\'mu\',{\r\n      template:`<div>\r\n      <el-card>五行:木</el-card>\r\n      </div>`\r\n    })\r\n    //水\r\n    Vue.component(\'shui\',{\r\n      template:`<div>\r\n      <el-card>五行:水</el-card>\r\n      </div>`\r\n    })\r\n    //火\r\n    Vue.component(\'huo\',{\r\n      template:`<div>\r\n      <el-card>五行:火</el-card>\r\n      </div>`\r\n    })\r\n    //土\r\n    Vue.component(\'tu\',{\r\n      template:`<div>\r\n      <el-card>五行:土</el-card>\r\n      </div>`\r\n    })\r\n    const vm = new Vue({\r\n        el: "#app",\r\n        data: {\r\n          componentName:\'jin\'\r\n        }\r\n    })\r\n<\/script>\r\n```\r\n\r\n### 7-10.插槽\r\n\r\n![image-20210506003026446](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210506003026446.png)\r\n\r\n#### 7-10-1.匿名插槽\r\n\r\n> 1.使用插槽,插槽的标签名和slot的标签名将不会被渲染,kkl里面的内容会被夹在slot标签里面,\r\n>\r\n> 2.如果slot标签里面有值, 调用插槽的时候,如果不传值就会使用slot标签的默认值，如果传了值就覆盖掉原本的值,\r\n>\r\n> 3.VUE官方2.6之后的v-slot不能开槽，且不会覆盖，且会被渲染出来\r\n\r\n![image-20210506003351853](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210506003351853.png)\r\n\r\n```html\r\n<zujian>\r\n  \x3c!--这里的标签其实要不要无所谓--\x3e\r\n\x3c!--  <span>kkl</span>--\x3e\r\n  蛤蟆皮\r\n</zujian>\r\n</div>\r\n</body>\r\n</html>\r\n<script>\r\n  //定义一个组件  组件的模板里面留一个口子,这个口子就是父组件向里面传值的地方\r\n  Vue.component(\'zujian\',{\r\n    template:`<div>\r\n    <p>憨批的名字是<slot>杰杰</slot></p>\r\n    </div>`\r\n  })\r\n    const vm = new Vue({\r\n        el: "#app",\r\n        data: {}\r\n    })\r\n<\/script>\r\n```\r\n\r\n\r\n\r\n#### 7-10-2.具名插槽\r\n\r\n![image-20210911160440750](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210911160440750.png)\r\n\r\n\r\n\r\n\r\n\r\n```html\r\n<div id="app">\r\n<zujian>\r\n    <template v-slot:header>\r\n        <el-card>这是头部</el-card>\r\n    </template>\r\n\r\n    <p>你是风儿</p>\r\n    <p>我是沙</p>\r\n    <p>缠缠绵绵</p>\r\n    <p>到我家</p>\r\n    \r\n    <template v-slot:footer>\r\n        <el-card>这页脚</el-card>\r\n    </template>\r\n\r\n</zujian>\r\n</div>\r\n</body>\r\n</html>\r\n<script>\r\n    //注册一个全局的组件\r\n    Vue.component(\'zujian\',{\r\n        template:`<div>\r\n         <header>\r\n          <slot name="header"></slot>\r\n         </header>\r\n\r\n         <main>\r\n          <slot></slot>\r\n         </main>\r\n\r\n         <footer>\r\n         <slot name="footer"></slot>\r\n         </footer>\r\n        </div>`\r\n    })\r\n    const vm = new Vue({\r\n        el: "#app",\r\n        data: {}\r\n    })\r\n<\/script>\r\n```\r\n\r\n#### 7-10-3.插槽作用域\r\n\r\n> 插槽作用域的作用：方便父组件访问子组件的内容\r\n\r\n##### 简单案例\r\n\r\n```html\r\n<div id="app">\r\n\x3c!--使用子组件的作用域插槽   这里的scope显示的是{ "kkl": "哈麻皮" }这样的一个对象--\x3e\r\n<zizujian>\r\n    \x3c!--2.父组件通过 slot-scope接收子组件传递过来的对象 { "kkl": "哈麻皮" }--\x3e\r\n    <template slot-scope="scope">\r\n        {{scope}}\r\n    </template>\r\n</zizujian>\r\n</div>\r\n</body>\r\n</html>\r\n<script>\r\n    //申明一个子组件\r\n    Vue.component("zizujian",{\r\n        //1.在子组件的slot上使用v-bind的方式向父组件传递数据\r\n        template:`<div> 子组件\r\n         <slot :kkl="hamapi"></slot>\r\n        </div>`,\r\n        data(){\r\n            return{\r\n                hamapi:"哈麻皮"\r\n            }\r\n        }\r\n    })\r\n    const vm = new Vue({\r\n        el: "#app",\r\n        data: {}\r\n    })\r\n<\/script>\r\n```\r\n\r\n![image-20210913004713486](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210913004713486.png)\r\n\r\n##### 较为复杂的案例\r\n\r\n![image-20210506004202548](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210506004202548.png)\r\n\r\n```html\r\n<div id="app">\r\n  <chacao :doglist="doglist">\r\n    \x3c!-- 指定插槽的值的操作范围 这个scopeValue只是个变量名 --\x3e\r\n    <template slot-scope="scopeValue">\r\n      \x3c!-- 指定操作条件 --\x3e\r\n      <strong v-if="scopeValue.kkl.id %2 ==0">{{scopeValue.kkl.name}}</strong>\r\n      <span v-else>{{scopeValue.kkl.name}}</span>\r\n    </template>\r\n  </chacao>\r\n</div>\r\n</body>\r\n</html>\r\n<script>\r\n  //定义一个插槽\r\n  Vue.component(\'chacao\',{\r\n    props:[\'doglist\'],\r\n    template:` <div><ul>\r\n      <li v-for="item in doglist" :key="item.id">\r\n        <slot :kkl="item">\r\n          {{item.name}}\r\n        </slot>\r\n      </li>\r\n    </ul></div> `\r\n  })\r\n  const app = new Vue({\r\n    el: "#app",\r\n    data: {\r\n      doglist:[\r\n        {\r\n          name:\'小泉\',\r\n          id:1\r\n        },\r\n        {\r\n          name:\'小野寺梨纱\',\r\n          id:2\r\n        },\r\n        {\r\n          name:\'长濑茜\',\r\n          id:3\r\n        },\r\n        {\r\n          name:\'麻生希\',\r\n          id:4\r\n        },\r\n        {\r\n          name:\'北原多香子\',\r\n          id:5\r\n        }\r\n      ]\r\n    }\r\n  })\r\n<\/script>\r\n```\r\n\r\n![image-20210506012434509](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210506012434509.png)\r\n\r\n### 7-11.组件的嵌套\r\n\r\n> 一个组件里面可以嵌套另外的组件\r\n\r\n![image-20210507151206985](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210507151206985.png)\r\n\r\n```html\r\n<div id="app">\r\n<zujian></zujian>\r\n</div>\r\n</body>\r\n</html>\r\n<script>\r\n    //创建一个组件  将一个组件套入到另一个组件\r\n    Vue.component(\'zujian\',{\r\n        template:`<div>\r\n        <el-card>我是一只小小小鸟</el-card>\r\n        <wu></wu>\r\n        </div>`\r\n    })\r\n    Vue.component(\'wu\',{\r\n        template:`<div>\r\n        <el-card>我就不同了,我的鸟比较大</el-card>\r\n        </div>`\r\n    })\r\n    const vm = new Vue({\r\n        el: "#app",\r\n        data: {}\r\n    })\r\n<\/script>\r\n```\r\n\r\n\r\n\r\n### 7-12.组件复用案例：购物车\r\n\r\n```html\r\n<div id="app">\r\n    <zujian :price="appPrice" @tijiaors="countRs"></zujian>\r\n    <zujian :price="parPrice" @tijiaors="countRs"></zujian>\r\n    <div>总价:{{totalPrice}}</div>\r\n</div>\r\n</body>\r\n</html>\r\n<script>\r\n    //定义组件\r\n    Vue.component(\'zujian\', {\r\n        template: `\r\n          <div>\r\n          <el-row>\r\n            <el-col style="display: flex">\r\n              花椒 单价:{{ price }}\r\n              数量\r\n              <el-button @click="addNum">+</el-button>\r\n              <el-input style="width: 80px" v-model="num"></el-input>\r\n              <el-button @click="subNum">-</el-button>\r\n              总价: {{ rs }}\r\n            </el-col>\r\n          </el-row>\r\n          </div>`,\r\n        props: [\'price\'],\r\n        data() {\r\n            return {\r\n                num: 0,\r\n            }\r\n        },\r\n        computed:{\r\n            //根据价格和数量计算rs的值\r\n          rs(){\r\n              return parseInt(this.num) * this.price\r\n          }\r\n        },\r\n        watch: {\r\n            //根据rs的变化,提交新值和旧值\r\n            rs(newValue, oldValue) {\r\n                console.log(newValue,oldValue)\r\n                this.$emit(\'tijiaors\', oldValue, newValue)\r\n            }\r\n        },\r\n        methods: {\r\n            addNum() {\r\n                this.num++\r\n            },\r\n            subNum() {\r\n                this.num--\r\n            }\r\n        }\r\n    })\r\n    const vm = new Vue({\r\n        el: "#app",\r\n        data: {\r\n            //app的单价\r\n            appPrice: 3,\r\n            //par的单价\r\n            parPrice: 5,\r\n            totalPrice: 0\r\n        },\r\n        methods: {\r\n            //父组件减去旧值,再加上新值,然后赋值给总价\r\n            countRs(oldValue, newValue) {\r\n               this.totalPrice =  this.totalPrice - oldValue + newValue\r\n            }\r\n        }\r\n    })\r\n<\/script>\r\n```\r\n\r\n\r\n\r\n## 8.VUE路由\r\n\r\n### 8-0.路由原理\r\n\r\n#### 8-0.0.复习锚点知识\r\n\r\n> ```html\r\n> <body>\r\n> \x3c!--1设置锚点链接--\x3e\r\n> <a href="#hamapi">点击直接跳转到哈麻皮</a>\r\n> \x3c!--设置锚点链接与锚点之间的阻拦--\x3e\r\n> <div style="width: 30px;height: 2000px;background: rebeccapurple"></div>\r\n> \x3c!--1定义锚点--\x3e\r\n> <a name="hamapi">这就是锚点</a>\r\n> </body>\r\n> </html>\r\n> ```\r\n\r\n#### 8-0-1.使用vue组件知识自己实现一个路由\r\n\r\n方式一：\r\n\r\n```html\r\n<div id="app">\r\n    \x3c!--提供链接--\x3e\r\n    <a href="#a">组件a</a>\r\n    <a href="#b">组件b</a>\r\n    <a href="#c">组件c</a>\r\n    \x3c!-- 按照链接里面的路径渲染组件 --\x3e\r\n    <comment :is="compName"></comment>\r\n</div>\r\n</body>\r\n</html>\r\n<script>\r\n    //1.定义组件\r\n    Vue.component(\'zujianA\', {\r\n        template: `<div>组件a</div>`\r\n    })\r\n    Vue.component(\'zujianB\', {\r\n        template: `<div>组件B</div>`\r\n    })\r\n    Vue.component(\'zujianC\', {\r\n        template: `<div>组件C</div>`\r\n    })\r\n\r\n    const vm = new Vue({\r\n        el: "#app",\r\n        data: {\r\n            compName: "zujianA"\r\n        },\r\n        mounted() {\r\n            //监听hash的变化       当hash变化后，触发此函数\r\n            window.onhashchange = () => {\r\n                //从location中取出hash\r\n                const hash = location.hash\r\n                //申明路由对象，直接一个对象就是一个键值对\r\n                let routers = {\r\n                    "#a": \'zujianA\',\r\n                    "#b": \'zujianB\',\r\n                    "#c": \'zujianC\'\r\n                }\r\n                //遍历对象的key\r\n                for (let routersKey in routers) {\r\n                    //如果hash的字符串和路由对象的key一致\r\n                    if (hash === routersKey) {\r\n                        //就将这个key对应的value赋值给全局的组件名compName\r\n                        return this.compName =  routers[routersKey]\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    })\r\n<\/script>\r\n```\r\n\r\n方式二：\r\n\r\n```html\r\n<div id="app">\r\n    \x3c!--提供链接--\x3e\r\n    <a href="#a">组件a</a>\r\n    <a href="#b">组件b</a>\r\n    <a href="#c">组件c</a>\r\n    \x3c!-- 按照链接里面的路径渲染组件 --\x3e\r\n    <comment :is="compName"></comment>\r\n</div>\r\n</body>\r\n</html>\r\n<script>\r\n    //1.定义组件\r\n    Vue.component(\'zujianA\', {\r\n        template: `<div>组件a</div>`\r\n    })\r\n    Vue.component(\'zujianB\', {\r\n        template: `<div>组件B</div>`\r\n    })\r\n    Vue.component(\'zujianC\', {\r\n        template: `<div>组件C</div>`\r\n    })\r\n\r\n    const vm = new Vue({\r\n        el: "#app",\r\n        data: {\r\n            compName: "zujianA"\r\n        },\r\n        mounted() {\r\n            //监听hash的变更事件    这里是hash变更后执行的函数\r\n            window.onhashchange = () => {\r\n                //从window.location中取出hash\r\n                const hash = location.hash\r\n                //定义路由数组对象\r\n                let router = [{"#a": \'zujianA\'}, {"#b": \'zujianB\'}, {"#c": \'zujianC\'}]\r\n                //声明组件名字\r\n                let zujianName;\r\n                //遍历路由对象数组\r\n                router.forEach(item => {\r\n                    //从每个路由对象中拿出key\r\n                    for (let itemKey in item) {\r\n                        //判断key和hash是否一致\r\n                        if (itemKey === hash) {\r\n                            //如果key和hash一致，就将key对应的value赋值给组件名\r\n                            zujianName = item[itemKey]\r\n                        }\r\n                    }\r\n                })\r\n                console.log(zujianName)\r\n                //将组件名赋值给vue的全局compName\r\n                this.compName = zujianName\r\n            }          \r\n        }\r\n    })\r\n<\/script>\r\n```\r\n\r\n### 8-1.路由概述 \r\n\r\n官方原文：\r\n\r\n用 Vue.js + Vue Router 创建单页应用，感觉很自然：使用 Vue.js ，我们已经可以通过组合组件来组成应用程序，当你要把 Vue Router 添加进来，我们需要做的是，将组件 (components) 映射到路由 (routes)，然后告诉 Vue Router 在哪里渲染它们。\r\n\r\n> 要解决的问题：更加方便的创建单页面应用\r\n>\r\n> 创建方式： 1引入vue.js >>> 2引入VueRouter>>>>3创建路由组件>>>>4创建VueRouter实例>>>在VueRouter里面\r\n\r\n#### 前后端路由的差别：\r\n\r\n> 后端路由：\r\n>       根据不同的URL请求，返回不同的服务器资源---增加服务器负荷，导致性能问题\r\n> 前端路由：\r\n>       根据不同的用户事件，显示不同的页面内容(显示的是不同的组件，路由的本质就是把不同的组件回显给不同的用户事件)\r\n>       采用前端路由，可以解决ajax技术导致的浏览器不支持前进后退的问题，实现单页面应用程序(SPA)，也就是整个网站只有一个页面，不过这种技术不利于提高SEO，不利于商业推广\r\n\r\n#### 路由的渲染原理：-\r\n\r\n> vue-router.js渲染的原理\r\n> 1、router-link 这个标签会被渲染为a标签\r\n> 2、router-link 的to属性会被渲染为href属性\r\n> 3、router-link 的to属性的值会被渲染为herf属性的值，就是以#开头的hash地址\r\n\r\n### 8-2.定义一个基本的路由\r\n\r\n```html\r\n1、引入vue.js后引入vue-router\r\n\r\n<script src="../js/vue.js"><\/script>\r\n<script src="../js/vue-router.js"><\/script>\r\n\r\n2、定义路由组件\r\n//1、定义路由组件\r\nconst biaoyu1 = {\r\n    template: `<h1>天大地大,明教最大</h1>`\r\n}\r\nconst baioyu2 = {\r\n    template: ` <h1>红莲圣火,燃我残躯</h1>  `\r\n}\r\n\r\n3、配置路由规则，创建路由实例\r\n//2、配置路由规则创建路由实例\r\nlet router = new VueRouter({\r\n    //配置规则数组  注意 这个单词容易写错\r\n    routes: [\r\n        {path: \'/baioyu1\', component: biaoyu1},\r\n        {path: \'/baioyu2\', component: baioyu2}\r\n    ]\r\n});\r\n\r\n4、把路由器挂载到根实例中\r\nconst app = new Vue({\r\n    el: "#app",\r\n    data: {},\r\n    //3挂载路由  如果属性名与属性值一值,可以只写一个\r\n    router\r\n})\r\n\r\n5、添加路由链接\r\n\x3c!-- 配置好路由组件,并且把路由规则搞出来后,并挂载上去之后,就可以在这里添加路由链接了--\x3e\r\n<router-link to="/baioyu1">点击我看星星</router-link>\r\n<br>\r\n<router-link to="/baioyu2">点击我看月亮</router-link>\r\n<br>\r\n6、设置路由占位符----就是路由内容要渲染的位置\r\n<div style="border: 1px solid red;width: 300px;height: 100px" >\r\n\x3c!-- 这是使用路由的最后一步 就是让路由的内容显示到这里--\x3e\r\n<router-view></router-view>\r\n</div>\r\n```\r\n\r\n\r\n\r\n### 8-3.路由重定向\r\n\r\n> 应用场景：比如说我们的很多项目有个根路径“/”,但是我们希望用户一进来根路径，就可以看到“/home”里面的东西展示到页面，而不是看到一个白板，这个时候就要用到路由重定向\r\n\r\n官方说法：就是访问一个路径的时候，其实是强制跳转到另一个路径的，这样就可以展示特定组件的内容了。\r\n\r\n![image-20210506121027434](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210506121027434.png)\r\n\r\n![image-20210506121129967](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210506121129967.png)\r\n\r\n### 8-4.编程式导航\r\n\r\n> 导航定义：\r\n>    就是从一个路由组件跳转到另一个路由组件的行为\r\n> 导航的方式：\r\n>    申明式导航：比如a标签跳转，`<router-link>`方式跳转，都是由明确的申明的\r\n>    编程式导航：比如调用 location.href 的方式进行跳转，这都是通过调用js的API实现导航的\r\n>\r\n> VueRouter中的编程式导航的API\r\n>     this.$router.push(\'跳转路径\')  -------------跳转到别的地方\r\n>     this.$router.go(\'数字\')            ------跳转到浏览器里面有记录的地方   负数就是往回调，正数就是往后跳，但跳转的地方必须在浏览器里面有记录\r\n\r\n```html\r\n<div id="app">\r\n    \x3c!--此处的to必须加上 v-bind ,否则无法将后面的对象读取出来--\x3e\r\n <router-link :to="{name:\'a\'}">到a</router-link>\r\n <router-link :to="{name:\'b\'}">到b</router-link>\r\n  <router-view></router-view>\r\n</div>\r\n</body>\r\n</html>\r\n<script>\r\n    const a = {\r\n      template:`<div>\r\n      <el-button type="danger" @click="gob">点击到b</el-button>\r\n      </div>`,\r\n      methods:{\r\n        gob(){\r\n          this.$router.push("/b")\r\n        }\r\n      }\r\n    }\r\n    const b = {\r\n      template:`<div>\r\n      <el-button type="danger" @click="goa">点击到a</el-button>\r\n      </div>`,\r\n      methods:{\r\n        goa(){\r\n          this.$router.push("/a")\r\n        }\r\n      }\r\n    }\r\n   const router =  new VueRouter({\r\n     routes:[\r\n       {path:"/a",name:"a",component:a},\r\n       {path:"/b",name:"b",component:b},\r\n     ]\r\n   })\r\n    const vm = new Vue({\r\n        el: "#app",\r\n        data: {},\r\n      router\r\n    })\r\n<\/script>\r\n```\r\n\r\n### 8-5.路由传参\r\n\r\n> 应用场景：\r\n> 当我们需要在父组件向路由组件跳转的时候，就需要传递参数过去，比如说：我们点击一个按钮，要带信息查询一些数据显示到展示区的时候，父组件的参数就要一起传给子组件，在子组件处于created阶段的时候，就带着信息去数据库查询数据，查询到数据后，展示出来\r\n\r\n#### 8-5-1.传统的?+键值对传参\r\n\r\n> 传值：<router-link to="/path?键=值"          取值：  $route.query.键    这个耦合比较高，少用\r\n>\r\n> 1.用传统的方式传参,并不影响路由的跳转\r\n> 2.通过uri传入的键值对,存放在当前路由的query对象里面,通过this.$route.query可以取到所有键值对的集合\r\n\r\n```html\r\n<div id="app">\r\n    <router-link to="/hamapi?name=2233">点击看蛤蟆皮</router-link>\r\n    <router-view></router-view>\r\n</div>\r\n</body>\r\n</html>\r\n<script>\r\n    //创建路由组件\r\n    const hamapi = {\r\n        template: `<div>\r\n        哈哈\r\n        </div>`,\r\n        //路由组件的本质就是组件,组件的本质就是vue实例,所以路由组件也有路由组件的生命周期\r\n        created() {\r\n            console.log("路由组件")\r\n            console.log(this)\r\n            //可以发现这个this.$route里面有一堆东西\r\n            console.log(this.$route.query)\r\n        }\r\n    }\r\n    //注册路由\r\n    const router = new VueRouter({\r\n        //指定路由规则\r\n        routes: [\r\n            {path: "/hamapi", component: hamapi}\r\n        ]\r\n    })\r\n    const vm = new Vue({\r\n        el: "#app",\r\n        data: {},\r\n        mounted() {\r\n            console.log("实例")\r\n            console.log(this)\r\n        },\r\n        router\r\n    })\r\n```\r\n\r\n\r\n\r\n####  8-5-2.params占位符传参\r\n\r\n> 传值  <router-link to="/path/:占位"             取值： $route.params.占位    这个耦合比较高，少用\r\n>\r\n> 1.要想通过restful风格带参访问子路由，则必须在路由规则的path里面申明占位符，用:占位\r\n\r\n![image-20210506122403389](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210506122403389.png)\r\n\r\n#### 8-5-3.{props:true}传参\r\n\r\n> 布尔模式  通过设置props:true 解耦，可以像正常组件一样传参\r\n\r\n![image-20210506122523250](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210506122523250.png)\r\n\r\n#### 8-5-4.{props:{对象}}传参\r\n\r\n> 对象模式，可以像正常组件一样传参\r\n\r\n![image-20210506122609238](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210506122609238.png)\r\n\r\n#### 8-5-5.函数模式传参\r\n\r\n> 函数模式，传动态对象\r\n\r\n![image-20210506122644831](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210506122644831.png)\r\n\r\n\r\n\r\n#### 8-5-6.总结\r\n\r\n> 以上所有的传参方式，首推props的函数模式，因为它既能从restful风格的URI里面取值，又能从对象里面取值，同时还能解耦.\r\n>\r\n> 5-1和5-2有耦合度高的问题，\r\n>\r\n> 5-3只能读取restful风格里面的传参\r\n>\r\n> 5-4不能读取restful风格的URI里面的传参\r\n>\r\n> 5-5是完美的\r\n\r\n### 8-6.嵌套路由\r\n\r\n> 应用场景：\r\n> 当我们进入一个页面的时候，只需要用户看到几个大的模块化的分类，而不应该让用户看到所有的分类细节，例如我们做的思维导图笔记，点击一个，可以弹出下面的一系列的东西，不点击就不展示。\r\n\r\n![image-20210508002918455](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210508002918455.png)\r\n\r\n实现方式：\r\n\r\n![image-20210508003023155](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210508003023155.png)\r\n\r\n具体代码\r\n\r\n```html\r\n<div id="app">\r\n    \x3c!--父路由--\x3e\r\n    <router-link to="/a">弓箭手</router-link>\r\n    <router-link to="/b">法师团</router-link>\r\n    <router-view></router-view>\r\n</div>\r\n</body>\r\n</html>\r\n<script>\r\n    //定义父级路由模块\r\n    const routerA = {\r\n        template: ` <div>\r\n           <div>弓箭营</div>\r\n           <router-link to="/a/a1">火系弓箭手</router-link>\r\n           <router-link to="/a/a2">冰系弓箭手</router-link>\r\n           <router-link to="/a/a3">强弩手</router-link>\r\n           <div style="border: 1px solid red;width: 300px;height: 100px">\r\n             <router-view></router-view>\r\n           </div>\r\n          </div> `\r\n    }\r\n    const routerB = {\r\n        template: `<div>\r\n          <div>法师营</div>\r\n           <router-link to="/b/b1">五行法师</router-link>\r\n           <router-link to="/b/b2">亡灵法师</router-link>\r\n           <router-link to="/b/b3">剧毒法师</router-link>\r\n           <div style="border: 1px solid red;width: 300px;height: 100px">\r\n             <router-view></router-view>\r\n           </div>\r\n         </div> `\r\n    }\r\n    //定义次级路由模块\r\n    const routerAa1 = {\r\n        template: `<div> <p>火系弓箭手,英勇无敌</p> </div>`\r\n    }\r\n    const routerAa2 = {\r\n        template: `<div> <p>冰系弓箭手,神勇无双</p> </div>`\r\n    }\r\n    const routerAa3 = {\r\n        template: `<div> <p>强弩手,火力强劲</p> </div>`\r\n    }\r\n    const routerBb1 = {\r\n        template: `<div> <p>五行法师,能力诡异</p> </div>`\r\n    }\r\n    const routerBb2 = {\r\n        template: `<div> <p>亡灵法师,与骷髅为伍</p> </div>`\r\n    }\r\n    const routerBb3 = {\r\n        template: `<div> <p>剧毒法师,毒术无双</p> </div>`\r\n    }\r\n\r\n    //注册路由组件\r\n    let router = new VueRouter({\r\n        routes: [\r\n            {\r\n                path: \'/a\', component: routerA, children: [\r\n                    {path: \'/a/a1\', component: routerAa1},\r\n                    {path: \'/a/a2\', component: routerAa2},\r\n                    {path: \'/a/a3\', component: routerAa3},\r\n                ]\r\n            },\r\n            {\r\n                //在配置路由路线规则的时候,配置children属性,在里面写一堆子组件即可\r\n                path: \'/b\', component: routerB, children: [\r\n                    {path: \'/b/b1\', component: routerBb1},\r\n                    {path: \'/b/b2\', component: routerBb2},\r\n                    {path: \'/b/b3\', component: routerBb3},\r\n                ]\r\n            }\r\n        ]\r\n    });\r\n\r\n\r\n    const app = new Vue({\r\n        el: "#app",\r\n        data: {},\r\n        //将路由挂载到实例\r\n        router\r\n    })\r\n<\/script>\r\n\r\n```\r\n\r\n### 8-7.命名路由\r\n\r\n> 要解决的问题：\r\n>\r\n> 不记得或者不想写路由的路径，这个时候就可以给`<router-link >`的to属性传入一个对象，在传入对象的同时，也可以进行传参，传参要解耦，得在路由规则里面配置`props:true`, 如果传入query对象，`this.$route.query`仍可读取query里面的东西\r\n\r\n```html\r\n<div id="app">\r\n  \x3c!--注意,组件名必须是字符串--\x3e\r\n<router-link :to="{name:\'denglu\',query:{\'hamapi\':\'哈麻皮\'}}">登录</router-link>\r\n<router-link :to="{name:\'zhuce\'}">注册</router-link>\r\n  \x3c!--出口--\x3e\r\n  <router-view></router-view>\r\n</div>\r\n</body>\r\n</html>\r\n<script>\r\n  //定义路由组件\r\n  const denglu = {\r\n    template:`<div>登录</div>`\r\n  }\r\n  const zhuce = {\r\n    template:`<div>注册</div>`\r\n  }\r\n  //实例化路由\r\n  const  router = new VueRouter({\r\n    //定义路由规则\r\n    routes:[\r\n            /*注意,被命名的路由必须是字符串*/\r\n      {path:"/denglu",component:denglu,name:\'denglu\'},\r\n      {path:"/zhuce",component: zhuce,name:\'zhuce\'}\r\n    ]\r\n  })\r\n    const vm = new Vue({\r\n        el: "#app",\r\n        data: {},\r\n        router\r\n    })\r\n<\/script>\r\n```\r\n\r\n\r\n\r\n### 8-8.命名视图\r\n\r\n> 要解决的问题：\r\n>\r\n> 使用同一个路径，跳转不同的视图，比如路径为"/"的时候，要展示侧边栏，头部，尾部，主视图\r\n\r\n页面结构\r\n\r\n```html\r\n<div id="app">\r\n\x3c!--入口--\x3e\r\n    <router-link to="/"></router-link>\r\n    \x3c!--出口--\x3e\r\n    <router-view name="tou"></router-view>\r\n<div class="zhuye">\r\n    <router-view name="leftsider"></router-view>\r\n    <router-view name="rightsider"></router-view>\r\n</div>\r\n    <router-view name="wei"></router-view>\r\n</div>\r\n</body>\r\n</html>\r\n<script>\r\n    //定义路由\r\n    const tou = {\r\n        template:`<div class="tou">头部</div>`\r\n    }\r\n    const wei = {\r\n        template: `<div class="wei">尾部</div>`\r\n    }\r\n    const leftsider = {\r\n        template: `<div class="leftsider">左侧</div>`\r\n    }\r\n    const rightsider = {\r\n        template: `<div class="rightsider">主视图</div>`\r\n    }\r\n    //实例化路由,定义路由规则\r\n    const router = new VueRouter({\r\n        //定义规则\r\n        routes:[\r\n            {path:\'/\',components:{\r\n                default:rightsider,\r\n                    tou,\r\n                    wei,\r\n                    leftsider,\r\n                    rightsider\r\n                }}\r\n        ]\r\n    })\r\n    const vm = new Vue({\r\n        el: "#app",\r\n        data: {},\r\n        router\r\n    })\r\n<\/script>\r\n```\r\n\r\n样式\r\n\r\n```less\r\n/*样式*/\r\n.tou{\r\n  width: 100%;\r\n   background: darkmagenta;\r\n  display: flex;\r\n  align-self: center;\r\n}\r\n.zhuye{\r\n  width: 100%;\r\n  display: flex;\r\n  .leftsider{\r\n    flex: 1;\r\n    background: #5daf34;\r\n    height: 300px;\r\n  }\r\n  .rightsider{\r\n    flex: 9;\r\n    background: #bcbec2;\r\n    height: 300px;\r\n  }\r\n}\r\n.wei{\r\n  width: 100%;\r\n  background: #f750c6;\r\n}\r\n```\r\n\r\n### 8-9.路由中监视当前路由的路径\r\n\r\n```html\r\n<div id="app">\r\n\x3c!--7设置路由链接--\x3e\r\n    <router-link active-class="hamapi" tag="button"  to="/login">登录</router-link>\r\n    <hr>\r\n    \x3c!--8设置路由出口--\x3e\r\n    <router-view></router-view>\r\n</div>\r\n</body>\r\n</html>\r\n<script>\r\n    //3定义一个路由组件\r\n    const luyou1 = {\r\n        template:`<div>这是个路由组件</div>`\r\n    }\r\n    //4实例化路由\r\n    let router = new  VueRouter({\r\n        //5.定义路由规则\r\n        routes:[\r\n            {path:"/login",component:luyou1}\r\n        ]\r\n    })\r\n\r\n    const vm = new Vue({\r\n        el: "#app",\r\n        data: {},\r\n        //6.挂载路由\r\n        router,\r\n        mounted(){\r\n            //这里是刷新的时候就可以监视得到\r\n            console.log("mounted中监视到的当前路由的路径:  ",this.$route.path)\r\n        },\r\n        watch:{\r\n            //监视当前路由的路径===这种监视,只能是在切换的瞬间才能监视得到\r\n           \'$route.path\': (newValue)=>{\r\n               console.log("watch侦听器中监视到的当前路由的路径: ",newValue)\r\n           }\r\n        }\r\n    })\r\n<\/script>\r\n```\r\n\r\n\r\n\r\n## 9.前端工程化\r\n\r\n### 各种方式搭建脚手架\r\n\r\n\r\n\r\n#### 1使用命令行创建项目\r\n\r\n> 官网资料：https://cli.vuejs.org/zh/guide/prototyping.html\r\n\r\n```shell\r\n#安装vue-cli\r\nnpm install -g @vue/cli\r\n#安装完毕可以通过 vue --version查看版本号，不要纠结具体的版本号，因为这里的版本经常更新，每次都不一样\r\n```\r\n\r\n![image-20210513103209616](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210513103209616.png)\r\n\r\n> 使用：\r\n> 1、在一个空的文件夹，按住shift+鼠标右键，选择在此处打开powershell\r\n\r\n![image-20210513103652342](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210513103652342.png)\r\n\r\n> 2、输入    vue create  工程名(只能小写)\r\n\r\n![image-20210513103902067](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210513103902067.png)\r\n\r\n> 3、选择  后来的版本要求选择vue版本，就选2.x   回车，这里这个use history选n\r\n\r\n![image-20210513103940295](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210513103940295.png)\r\n\r\n> 4、创建成功\r\n> 可以按最下方提示的命令进入目录和启动项目\r\n\r\n![image-20210513104053079](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210513104053079.png)\r\n\r\n> 5、观察目录\r\n> 目录比vue-cli  2.xx这个版本更加精简\r\n\r\n![image-20210513104313944](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210513104313944.png)\r\n\r\n> 6、npm run serve  # 启动项目 这个是vue-cli 创建完毕后自己会提醒你的\r\n>\r\n> 7、但是作为后台开发人员一般使用下面的方式\r\n\r\n![image-20210513104201661](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210513104201661.png)\r\n\r\n![image-20210513104612115](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210513104612115.png)\r\n\r\n> 8、启动项目后，可以看到以下页面\r\n\r\n![image-20210513104753378](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210513104753378.png)\r\n\r\n#### 2使用GUI搭建脚手架\r\n\r\n> 不推荐这种方式，因为这种方式搭建的脚手架，容易出问题\r\n\r\n> 1在命令行输入指令  vue  ui\r\n\r\n![image-20210513105015914](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210513105015914.png)\r\n\r\n> 2然后一路跟着提示往下操作即可，注意，使用webstrom开发的话，就不要选择eslint了\r\n\r\n![image-20210513105101375](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210513105101375.png)\r\n\r\n#### 3使用IDEA webstorm等jetbrains系列软件搭建脚手架\r\n\r\n![image-20210513105353026](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210513105353026.png)\r\n\r\n![image-20210513105410370](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210513105410370.png)\r\n\r\n#### 4使用HBuilder创建搭建脚手架\r\n\r\n> 直接使用HBuilderX，创建一个工程，然后使用IDEA或者webstorm打开\r\n\r\n#### 5使用POWERSHELL的时候的坑\r\n\r\n> 如果出现以下画面，就表明powershell没有操作权限\r\n\r\n![image-20210513105616040](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210513105616040.png)\r\n\r\n> 处理方法：\r\n>\r\n> 1.随便找个文件夹，点击文件，以管理员身份打开powershell\r\n\r\n![image-20210513105647789](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210513105647789.png)\r\n\r\n> 2.输入指令： set-ExecutionPolicy RemoteSigned\r\n\r\n![image-20210513105747953](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210513105747953.png)\r\n\r\n### vue脚手架目录说明\r\n\r\n![image-20210513150835320](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210513150835320.png)\r\n\r\n### 9-0.项目基础配置\r\n\r\n官方原文\r\n\r\nhttps://cli.vuejs.org/zh/config/#vue-config-js\r\n\r\n> `vue.config.js` 是一个可选的配置文件，如果项目的 (和 `package.json` 同级的) 根目录中存在这个文件，那么它会被 `@vue/cli-service` 自动加载。你也可以使用 `package.json` 中的 `vue` 字段，但是注意这种写法需要你严格遵照 JSON 的格式来写。\r\n\r\n范例代码---vue.config.js\r\n\r\n```javascript\r\n//导出模块\r\nmodule.exports={\r\n    //开发时的配置\r\n    devServer:{\r\n        //指定端口号\r\n        port:9000,\r\n        //自动打开默认浏览器\r\n        open:true\r\n    }\r\n}\r\n```\r\n\r\n\r\n\r\n### 9-1.导入less\r\n\r\n> 一般的方式不能导入less，因为版本不匹配，以下版本的less可以正常匹配 @vue/cli 4.5.11 \r\n>\r\n> 命令行：\r\n\r\n```shell\r\nnpm install less-loader@5.0.0 -s\r\nnpm install less@3.9.0 -s\r\n```\r\n\r\n> main.js \r\n\r\n```javascript\r\nimport less from \'less\'\r\nVue.use(less);\r\n```\r\n\r\n> vue单文件组件\r\n\r\n```vue\r\n<style lang="less" scoped>\r\n/* lang是所用的语言   scoped表示只在当前组件生效 */\r\n</style>\r\n```\r\n\r\n\r\n\r\n### 9-2.导入element\r\n\r\n> 控制台\r\n\r\n```shell\r\nnpm i element-ui -S\r\n```\r\n\r\n> main.js\r\n\r\n```javascript\r\nimport ElementUI from \'element-ui\';\r\nimport \'element-ui/lib/theme-chalk/index.css\';\r\nVue.use(ElementUI);\r\n```\r\n\r\n\r\n\r\n### 9-3.两种不同的组件配置\r\n\r\n#### 9-3-1.显示路由组件\r\n\r\n> 编写组件\r\n\r\n![image-20210513165615517](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210513165615517.png)\r\n\r\n> 将路由组件组装到路由器\r\n\r\n![image-20210513171036712](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210513171036712.png)\r\n\r\n#### 9-3-2.显示普通组件\r\n\r\n> 编写自定义组件\r\n\r\n![image-20210513165206156](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210513165206156.png)\r\n\r\n> 将自定义组件组装到视图\r\n\r\n![image-20210513165322013](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210513165322013.png)\r\n\r\n### 9-4.较为全面的路由配置\r\n\r\n> 下面是  /router/index.js   或者  router.js 里面的内容  这两种命名方式比较符合见名知意的规则\r\n\r\n```javascript\r\nimport Vue from \'vue\'\r\nimport VueRouter from \'vue-router\'\r\nimport Login from "../views/Login";\r\n//引入home页面\r\nimport Home from "../views/Home";\r\n//引入welcome组件\r\nimport Welcome from "../components/Welcome";\r\n/*\r\n省略一大堆的其他组件的引入\r\n*/\r\n\r\nVue.use(VueRouter)\r\n\r\n//配置路由规则\r\nconst routes = [\r\n    {path: "/", redirect: "/login"},\r\n    {path: "/login", component: Login},\r\n    //将home添加到路由规则---下面就是个纯粹的单页面应用\r\n    {\r\n        path: "/home", component: Home,\r\n        redirect: "/welcome",\r\n        children: [\r\n            {path:"/welcome",component:Welcome},\r\n            //配置用户管理的路由\r\n            {path: "/users",component: Users},\r\n            /*\r\n            省略一大堆其他子路由的配置\r\n            */\r\n        ]\r\n    }\r\n]\r\n//命名实例化后的路由\r\nconst router = new VueRouter({\r\n    routes\r\n})\r\n//配置全局前置守卫 对请求进行拦截\r\nrouter.beforeEach((to, from, next) => {\r\n    /*\r\n    * to: Route: 即将要进入的目标 路由对象\r\n      from: Route: 当前导航正要离开的路由\r\n      next: Function: 一定要调用该方法来 resolve 这个钩子。执行效果依赖 next 方法的调用参数。\r\n    * */\r\n    //如果访问的是登陆页面,就直接放行\r\n    if (to.path === "/login") {\r\n        return next()\r\n    }\r\n    //如果要访问其他页面,就先获取token,如果token不为空,就放行,否则就强制跳转到登录页面\r\n    const token = window.sessionStorage.getItem(\'token\');\r\n    //判断token是否为空\r\n    if (!token) {\r\n        // Message.error("你没有登陆,无权访问本页面,已为你跳转到登陆页面")\r\n        return next("login")\r\n    } else {\r\n        //dochain\r\n        return next()\r\n    }\r\n})\r\n//导出路由\r\nexport default router\r\n```\r\n\r\n> main.js的路由相关处理\r\n\r\n```javascript\r\n//从router文件引入路由\r\nimport router from \'./router\'\r\n//使用路由\r\nnew Vue({\r\n    router,\r\n    render: h => h(App)\r\n}).$mount(\'#app\')\r\n```\r\n\r\n9-4.导入组件\r\n\r\n```vue\r\n<template>\r\n\x3c!-- 为了确保单根性,这里直接在template标签里面放置DIV防止出错  --\x3e\r\n  <div>\r\n    \x3c!-- 组件在这里使用  --\x3e\r\n    <jiacheng></jiacheng>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n//一个组件要想被使用,得先import进来\r\nimport Jiacheng from "./components/Jiacheng";\r\n\r\nexport default {\r\n  /*这里面都是写vue的各种选项的,什么data,components,methods...之类的*/\r\n  name: \'App\',\r\n  //components 里面放上面import 进来的组件\r\n  components: {\r\n    Jiacheng\r\n  }\r\n}\r\n<\/script>\r\n\r\n<style lang="less" scoped>\r\n/*这里面都是写样式的 */\r\n</style>\r\n```\r\n\r\n',contentRendered:'<h1 id="vue-js简介" tabindex="-1"><a class="header-anchor" href="#vue-js简介" aria-hidden="true">#</a> Vue.js简介</h1>\n<ul>\n<li>一套用于构建用户界面的<strong>渐进式框架</strong></li>\n<li>Vue 被设计为可以自底向上逐层应用</li>\n<li>Vue 的核心库只关注视图层</li>\n</ul>\n<p><strong>按需导入</strong></p>\n<p>Vue是三大前端流行框架之一</p>\n<p>声明式编程，符合MVC的设计</p>\n<h3 id="vue技术栈" tabindex="-1"><a class="header-anchor" href="#vue技术栈" aria-hidden="true">#</a> <code>vue技术栈</code></h3>\n<table>\n<thead>\n<tr>\n<th><strong><code>web技术栈</code></strong></th>\n<th><strong><code>移动端技术栈</code></strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>VUE基础(语法/组件)</td>\n<td>VUE基础(语法/组件)</td>\n</tr>\n<tr>\n<td>VUE_Router----路由</td>\n<td>VUE_Router----路由</td>\n</tr>\n<tr>\n<td>axios-----交互</td>\n<td>axios-----交互</td>\n</tr>\n<tr>\n<td>webpakage----打包工具</td>\n<td>webpakage----打包工具</td>\n</tr>\n<tr>\n<td>Element UI------UI框架(iview  UI | HeyUI | Ant Design of Vue |  AmazeUI | MuseUI )</td>\n<td>EEUI----UI框架(Vant https://vant-contrib.gitee.io/vant/#/zh-CN/ )</td>\n</tr>\n<tr>\n<td>VUEX------数据共享</td>\n<td>VUEX------数据共享</td>\n</tr>\n</tbody>\n</table>\n<h3 id="解决什么问题" tabindex="-1"><a class="header-anchor" href="#解决什么问题" aria-hidden="true">#</a> <code>解决什么问题</code></h3>\n<blockquote>\n<blockquote>\n<p>前端渲染的方式：</p>\n<p>1.原生字符串拼接: 容易拼接出错，且不同的人代码风格不同，项目换人后，较难维护</p>\n<p>2.模版引擎: 解决了代码可读性问题，但是仍然容易出错，且没有专门的事件机制</p>\n<p>3.vue模版语法</p>\n</blockquote>\n<p>vue模版语法有效的解决了上述问题</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210827104742406" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210827104742406.png" data="aurora"></p>\n<p>vue工作原理</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210827171240521" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210827171240521.png" data="aurora"></p>\n<h2 id="_1-安装" tabindex="-1"><a class="header-anchor" href="#_1-安装" aria-hidden="true">#</a> 1.安装</h2>\n<p>离线：使用页面的script标签进行导入下载好的vue.js文档(https://cn.vuejs.org/js/vue.js)</p>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>文件路径/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>在线:</p>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="vue初体验" tabindex="-1"><a class="header-anchor" href="#vue初体验" aria-hidden="true">#</a> <code>VUE初体验</code></h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210827101732307" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210827101732307.png" data="aurora"></p>\n<h2 id="_2-vue实例" tabindex="-1"><a class="header-anchor" href="#_2-vue实例" aria-hidden="true">#</a> 2.Vue实例</h2>\n<h3 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念" aria-hidden="true">#</a> 基本概念</h3>\n<blockquote>\n<p>MVVM:</p>\n<p>m--model: 模型</p>\n<p>v--view： 视图</p>\n<p>vm--viewModel: 模型视图，介于模型和视图之间的东西，起到桥梁作用，使得模型和视图能够分开，也能保持通讯</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210831004055590" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210831004055590.png" data="aurora"></p>\n<h3 id="创建" tabindex="-1"><a class="header-anchor" href="#创建" aria-hidden="true">#</a> 创建</h3>\n<p>每个 Vue 应用都是通过用 <code>Vue</code> 函数创建一个新的 <strong>Vue 实例</strong>开始的：</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span>\t vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token comment">// 选项</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="数据与方法" tabindex="-1"><a class="header-anchor" href="#数据与方法" aria-hidden="true">#</a> 数据与方法</h3>\n<div class="language-vue ext-vue line-numbers-mode"><pre v-pre class="language-vue"><code>data的两种方式:\n//数据对象\ndata:{\n    \n}\n\n//数据函数方法\ndata() {\n    return {}\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p><strong>对象必须是纯粹的对象 (含有零个或多个的 key/value 对)</strong></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// 我们的数据对象</span>\n<span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span>\n\n<span class="token comment">// 该对象被加入到一个 Vue 实例中</span>\n<span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">data</span><span class="token operator">:</span> data\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 获得这个实例上的 property</span>\n<span class="token comment">// 返回源数据中对应的字段</span>\nvm<span class="token punctuation">.</span>a <span class="token operator">==</span> data<span class="token punctuation">.</span>a <span class="token comment">// => true</span>\n\n<span class="token comment">// 设置 property 也会影响到原始数据</span>\nvm<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">2</span>\ndata<span class="token punctuation">.</span>a <span class="token comment">// => 2</span>\n\n<span class="token comment">// ……反之亦然</span>\ndata<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">3</span>\nvm<span class="token punctuation">.</span>a <span class="token comment">// => 3</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>如果你知道你后面需要一个 property，但是一开始它为空或不存在，那么你仅需要设置一些初始值</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">newTodoText</span><span class="token operator">:</span> <span class="token string">\'\'</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">visitCount</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">hideCompletedTodos</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">todos</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">error</span><span class="token operator">:</span> <span class="token keyword">null</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>如果要阻止修改现有的property的行为，那么可以使用Object.freeze()</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span>\n<span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">\'#example\'</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">data</span><span class="token operator">:</span> data\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\nvm<span class="token punctuation">.</span>$data <span class="token operator">===</span> data <span class="token comment">// => true</span>\nvm<span class="token punctuation">.</span>$el <span class="token operator">===</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">\'example\'</span><span class="token punctuation">)</span> <span class="token comment">// => true</span>\n\n<span class="token comment">// $watch 是一个实例方法  监听该值</span>\nvm<span class="token punctuation">.</span><span class="token function">$watch</span><span class="token punctuation">(</span><span class="token string">\'a\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span> oldValue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 这个回调将在 `vm.a` 改变后调用</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="生命周期钩子" tabindex="-1"><a class="header-anchor" href="#生命周期钩子" aria-hidden="true">#</a> 生命周期钩子</h3>\n<ul>\n<li>created:在实例创建完成后立即执行，</li>\n<li>beforeMount:在挂载之前被调用，相关的渲染函数首次被调用</li>\n<li>mounted:el被新创建的vm.$el替换，挂载成功</li>\n<li>beforeUpdate:数据更新的调用</li>\n<li>updated:组件DOM已经更新，组件更新完毕</li>\n</ul>\n<p><strong>不要在选项 property 或回调上使用箭头函数  =&gt;,因为这样无法使用this指向Vue实例</strong></p>\n<h2 id="_3-指令" tabindex="-1"><a class="header-anchor" href="#_3-指令" aria-hidden="true">#</a> 3.指令</h2>\n<h3 id="指令概念" tabindex="-1"><a class="header-anchor" href="#指令概念" aria-hidden="true">#</a> 指令概念</h3>\n<ul>\n<li>本质就是自定义属性</li>\n<li>Vue中指令都是以 v- 开头</li>\n</ul>\n<h4 id="插值" tabindex="-1"><a class="header-anchor" href="#插值" aria-hidden="true">#</a> 插值</h4>\n<p>数据绑定最常见的形式就是使用“Mustache”语法 (双大括号) 的文本插值：</p>\n<div class="language-vue ext-vue line-numbers-mode"><pre v-pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>Message: {{ msg }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>vue的指令： v- 开头的特殊属性\n作用是：将dom和数据进行响应</p>\n<h4 id="v-cloak" tabindex="-1"><a class="header-anchor" href="#v-cloak" aria-hidden="true">#</a> v-cloak</h4>\n<ul>\n<li>\n<p>防止页面加载时出现闪烁问题</p>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">\n  <span class="token comment">/* \n    1、通过属性选择器 选择到 带有属性 v-cloak的标签  让他隐藏\n */</span>\n  <span class="token selector">[v-cloak]</span><span class="token punctuation">{</span>\n    <span class="token comment">/* 元素隐藏    */</span>\n    <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token comment">&lt;!-- 2、 让带有插值 语法的   添加 v-cloak 属性 \n         在 数据渲染完场之后，v-cloak 属性会被自动去除，\n         v-cloak一旦移除也就是没有这个属性了  属性选择器就选择不到该标签\n\t\t 也就是对应的标签会变为可见\n    --\x3e</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>  <span class="token attr-name">v-cloak</span>  <span class="token punctuation">></span></span>{{msg}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      <span class="token comment">//  el   指定元素 id 是 app 的元素  </span>\n      <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">\'#app\'</span><span class="token punctuation">,</span>\n      <span class="token comment">//  data  里面存储的是数据</span>\n      <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">\'Hello Vue\'</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div></li>\n</ul>\n<h4 id="v-pre" tabindex="-1"><a class="header-anchor" href="#v-pre" aria-hidden="true">#</a> v-pre</h4>\n<ul>\n<li>显示原始信息跳过编译过程</li>\n<li>跳过这个元素和它的子元素的编译过程。</li>\n<li><strong>一些静态的内容不需要编译加这个指令可以加快渲染</strong></li>\n</ul>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-pre</span><span class="token punctuation">></span></span>{{ this will not be compiled }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    \n\t<span class="token comment">&lt;!--  显示的是{{ this will not be compiled }}  --\x3e</span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-pre</span><span class="token punctuation">></span></span>{{msg}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>  \n     <span class="token comment">&lt;!--   即使data里面定义了msg这里仍然是显示的{{msg}}  --\x3e</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">\'#app\'</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n            <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">\'Hello Vue.js\'</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h4 id="v-once" tabindex="-1"><a class="header-anchor" href="#v-once" aria-hidden="true">#</a> <strong>v-once</strong></h4>\n<ul>\n<li>执行一次性的插值【当数据改变时，插值处的内容不会继续更新】</li>\n</ul>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code>  <span class="token comment">&lt;!-- 即使data里面定义了msg 后期我们修改了 仍然显示的是第一次data里面存储的数据即 Hello Vue.js  --\x3e</span>\n     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-once</span><span class="token punctuation">></span></span>{{ msg}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    \n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">\'#app\'</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n            <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">\'Hello Vue.js\'</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h4 id="v-text" tabindex="-1"><a class="header-anchor" href="#v-text" aria-hidden="true">#</a> v-text</h4>\n<p>v-text:一定程度上等效于{{}}</p>\n<h5 id="作用" tabindex="-1"><a class="header-anchor" href="#作用" aria-hidden="true">#</a> 作用</h5>\n<p>​            将v-text=&quot;&quot;内部的变量渲染(覆盖)到标签的内部</p>\n<h5 id="用法" tabindex="-1"><a class="header-anchor" href="#用法" aria-hidden="true">#</a> 用法</h5>\n<p>​            在标签内部给定v-text=&quot;绑定到data的键&quot;</p>\n<h5 id="作用机理" tabindex="-1"><a class="header-anchor" href="#作用机理" aria-hidden="true">#</a> 作用机理</h5>\n<p>​            v-text实际上是将指定键的值给到元素的InnerText属性</p>\n<h5 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项" aria-hidden="true">#</a> 注意事项</h5>\n<p>​            只能用于元素的InnerText属性能够接收数据的元素</p>\n<h5 id="v-text和-的区别" tabindex="-1"><a class="header-anchor" href="#v-text和-的区别" aria-hidden="true">#</a> v-text和{{}}的区别</h5>\n<ul>\n<li>里面都能够放置表达式|表达式</li>\n<li>{{}}不会覆盖标签体中已有的数据，而v-text会将标签体进行覆盖</li>\n<li>在网络延迟高的情况下，{{}}会将未填充数据的格式直接显示出来，这样会导致用户体验不佳，而v-text会等数据加载完后再进行渲染</li>\n<li>如果非要用{{}}又要解决上面的显示表达式的问题，就在父元素上面添加v-cloak，然后再<code>&lt;style&gt;</code>里面设置<code>[v-cloak]{display:none;}</code></li>\n</ul>\n<h4 id="v-html" tabindex="-1"><a class="header-anchor" href="#v-html" aria-hidden="true">#</a> v-html</h4>\n<h5 id="作用-1" tabindex="-1"><a class="header-anchor" href="#作用-1" aria-hidden="true">#</a> 作用</h5>\n<p>​\t将v-html=&quot;&quot;内部的变量渲染到标签的内部</p>\n<h5 id="作用机理-1" tabindex="-1"><a class="header-anchor" href="#作用机理-1" aria-hidden="true">#</a> 作用机理</h5>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code>v-html实际上是将指定键的值给到元素的innerHtml属性\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h5 id="注意事项-1" tabindex="-1"><a class="header-anchor" href="#注意事项-1" aria-hidden="true">#</a> 注意事项</h5>\n<p>​\t只能用给innerHtml能接收值得元素赋值</p>\n<p>​\tv-html会覆盖标签体的值</p>\n<h4 id="v-model" tabindex="-1"><a class="header-anchor" href="#v-model" aria-hidden="true">#</a> v-model</h4>\n<h5 id="作用-2" tabindex="-1"><a class="header-anchor" href="#作用-2" aria-hidden="true">#</a> 作用</h5>\n<p>​     <strong>双向绑定指令</strong>，限制在 <code>&lt;input&gt;、&lt;select&gt;、&lt;textarea&gt;、components</code>中使用</p>\n<blockquote>\n<ul>\n<li>当数据发生变化的时候，视图也就发生变化</li>\n<li>当视图发生变化的时候，数据也会跟着同步变化</li>\n</ul>\n</blockquote>\n<h5 id="注意事项-2" tabindex="-1"><a class="header-anchor" href="#注意事项-2" aria-hidden="true">#</a> 注意事项</h5>\n<p>​\t他不能用在纯展示信息的元素上，否则会报错</p>\n<h5 id="底层原理" tabindex="-1"><a class="header-anchor" href="#底层原理" aria-hidden="true">#</a> 底层原理</h5>\n<div class="language-vue ext-vue line-numbers-mode"><pre v-pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span> <span class="token attr-name">@input</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>shuru<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span> <span class="token attr-name">@input</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>msg = $event.target.value<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n    <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n            <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">"哈麻皮"</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n            <span class="token function">shuru</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h4 id="v-if" tabindex="-1"><a class="header-anchor" href="#v-if" aria-hidden="true">#</a> v-if</h4>\n<h5 id="作用-3" tabindex="-1"><a class="header-anchor" href="#作用-3" aria-hidden="true">#</a> 作用</h5>\n<p>​\t根据不同的条件对数据显示或隐藏</p>\n<h5 id="作用机理-2" tabindex="-1"><a class="header-anchor" href="#作用机理-2" aria-hidden="true">#</a> 作用机理</h5>\n<p>​\t当v-if条件满足时对应的元素或数据进行渲染</p>\n<h5 id="注意事项-3" tabindex="-1"><a class="header-anchor" href="#注意事项-3" aria-hidden="true">#</a> 注意事项</h5>\n<p>​\tv-else-if 或 v-else 依托于 v-if</p>\n<h5 id="适用场景" tabindex="-1"><a class="header-anchor" href="#适用场景" aria-hidden="true">#</a> 适用场景</h5>\n<p>​\t后台给的数据对应了不同的前端展示</p>\n<h4 id="v-show" tabindex="-1"><a class="header-anchor" href="#v-show" aria-hidden="true">#</a> v-show</h4>\n<h5 id="作用-4" tabindex="-1"><a class="header-anchor" href="#作用-4" aria-hidden="true">#</a> 作用</h5>\n<p>​\t判断条件是否成立，成立就显示，不成立则不显示</p>\n<h5 id="作用机理-3" tabindex="-1"><a class="header-anchor" href="#作用机理-3" aria-hidden="true">#</a> 作用机理</h5>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code>v-show是通过添加行内样式style="display:none"来隐藏\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h5 id="v-if和v-show的区别" tabindex="-1"><a class="header-anchor" href="#v-if和v-show的区别" aria-hidden="true">#</a> v-if和v-show的区别</h5>\n<p>​\tv-if:先进行判断再渲染到dom中，如果没有满足就不渲染</p>\n<p>​\tv-show:不管是否满足，首先渲染在页面 然后通过判断来是否添加display:none</p>\n<h5 id="使用场景上的区别" tabindex="-1"><a class="header-anchor" href="#使用场景上的区别" aria-hidden="true">#</a> 使用场景上的区别</h5>\n<p>​\tv-if: <strong>保密性较强时</strong>，使用v-if</p>\n<p>​\t\t\t需要<strong>反复渲染dom，对性能消耗较大</strong></p>\n<p>​\tv-show:<strong>保密性较低</strong>，使用v-show</p>\n<p>​\t\t\t<strong>只是对dom的显示进行设置</strong>，所以性能较高，但安全性不高</p>\n<h4 id="v-on" tabindex="-1"><a class="header-anchor" href="#v-on" aria-hidden="true">#</a> v-on</h4>\n<h5 id="缩写" tabindex="-1"><a class="header-anchor" href="#缩写" aria-hidden="true">#</a> 缩写 @</h5>\n<h5 id="作用-5" tabindex="-1"><a class="header-anchor" href="#作用-5" aria-hidden="true">#</a> 作用</h5>\n<p>​\t将事件绑定至vm的实例中</p>\n<h5 id="使用方式" tabindex="-1"><a class="header-anchor" href="#使用方式" aria-hidden="true">#</a> 使用方式</h5>\n<ol>\n<li>绑定函数</li>\n<li>绑定内联语句</li>\n</ol>\n<h5 id="参数" tabindex="-1"><a class="header-anchor" href="#参数" aria-hidden="true">#</a> 参数</h5>\n<p>​\t$event 就是事件本身  该形参的位置完全无关紧要</p>\n<h5 id="事件修饰符" tabindex="-1"><a class="header-anchor" href="#事件修饰符" aria-hidden="true">#</a> 事件修饰符</h5>\n<ul>\n<li>在事件处理程序中调用 <code>event.preventDefault()</code> 或 <code>event.stopPropagation()</code> 是非常常见的需求。</li>\n<li>Vue 不推荐我们操作DOM    为了解决这个问题，Vue.js 为 <code>v-on</code> 提供了<strong>事件修饰符</strong></li>\n<li>修饰符是由点开头的指令后缀来表示的</li>\n</ul>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token comment">&lt;!-- 阻止单击事件继续传播 --\x3e</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click.stop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>doThis<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>\n\n<span class="token comment">&lt;!-- 提交事件不再重载页面 --\x3e</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name"><span class="token namespace">v-on:</span>submit.prevent</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>onSubmit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>\n\n<span class="token comment">&lt;!-- 修饰符可以串联   即阻止冒泡也阻止默认事件 --\x3e</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click.stop.prevent</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>doThat<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>\n\n<span class="token comment">&lt;!-- 只当在 event.target 是当前元素自身时触发处理函数 --\x3e</span>\n<span class="token comment">&lt;!-- 即事件不是从内部元素触发的 --\x3e</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click.self</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>doThat<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n\n使用修饰符时，顺序很重要；相应的代码会以同样的顺序产生。因此，用 v-on:click.prevent.self 会阻止所有的点击，而 v-on:click.self.prevent 只会阻止对元素自身的点击。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h5 id="按键修饰符" tabindex="-1"><a class="header-anchor" href="#按键修饰符" aria-hidden="true">#</a> 按键修饰符</h5>\n<ul>\n<li>在做项目中有时会用到键盘事件，在监听键盘事件时，我们经常需要检查详细的按键。Vue 允许为 <code>v-on</code> 在监听键盘事件时添加按键修饰符</li>\n</ul>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token comment">&lt;!-- 只有在 `keyCode` 是 13 时调用 `vm.submit()` --\x3e</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name"><span class="token namespace">v-on:</span>keyup.13</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n\n<span class="token comment">&lt;!-- -当点击enter 时调用 `vm.submit()` --\x3e</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name"><span class="token namespace">v-on:</span>keyup.enter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n\n<span class="token comment">&lt;!--当点击enter或者space时  时调用 `vm.alertMe()`   --\x3e</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-on:</span>keyup.enter.space</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>alertMe<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>\n\n常用的按键修饰符\n.enter =>    enter键\n.tab => tab键\n.delete (捕获“删除”和“退格”按键) =>  删除键\n.esc => 取消键\n.space =>  空格键\n.up =>  上\n.down =>  下\n.left =>  左\n.right =>  右\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n\t<span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n              <span class="token function-variable function">submit</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n              <span class="token function-variable function">alertMe</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><h5 id="自定义按键修饰符别名" tabindex="-1"><a class="header-anchor" href="#自定义按键修饰符别名" aria-hidden="true">#</a> 自定义按键修饰符别名</h5>\n<ul>\n<li>在Vue中可以通过<code>config.keyCodes</code>自定义按键修饰符别名</li>\n</ul>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    预先定义了keycode 116（即F5）的别名为f5，因此在文字输入框中按下F5，会触发prompt方法\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-on:</span>keydown.f5</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prompt()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n\t\n    Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>keyCodes<span class="token punctuation">.</span>f5 <span class="token operator">=</span> <span class="token number">116</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">\'#app\'</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n            <span class="token function-variable function">prompt</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">\'我是 F5！\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h4 id="v-bind" tabindex="-1"><a class="header-anchor" href="#v-bind" aria-hidden="true">#</a> v-bind</h4>\n<h5 id="缩写-1" tabindex="-1"><a class="header-anchor" href="#缩写-1" aria-hidden="true">#</a> 缩写 :</h5>\n<h5 id="修饰符" tabindex="-1"><a class="header-anchor" href="#修饰符" aria-hidden="true">#</a> 修饰符</h5>\n<ul>\n<li><code>.prop</code> - 作为 DOM property 绑定而不是作为 attribute 绑定</li>\n<li><code>.camel</code> - 将 kebab-case attribute 名转换为 camelCase。</li>\n<li><code>.sync</code> 语法糖，会扩展成一个更新父组件绑定值的 <code>v-on</code> 侦听器。</li>\n</ul>\n<h5 id="作用-6" tabindex="-1"><a class="header-anchor" href="#作用-6" aria-hidden="true">#</a> 作用</h5>\n<p>​\t主要用于JavaScript Object绑定到属性,从而通过数据对元素操作属性</p>\n<p>​\t多个属性可以多个对象的方式来进行绑定，也可以通过数组来绑定</p>\n<p>​\t支持三元表达式</p>\n<h4 id="数组" tabindex="-1"><a class="header-anchor" href="#数组" aria-hidden="true">#</a> 数组</h4>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span>arrays<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>bianliang<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h5 id="元素移除" tabindex="-1"><a class="header-anchor" href="#元素移除" aria-hidden="true">#</a> 元素移除</h5>\n<blockquote>\n<h6 id="pop-移除数组末尾的元素" tabindex="-1"><a class="header-anchor" href="#pop-移除数组末尾的元素" aria-hidden="true">#</a> pop 移除数组末尾的元素</h6>\n<h6 id="shift-从头移除" tabindex="-1"><a class="header-anchor" href="#shift-从头移除" aria-hidden="true">#</a> shift  从头移除</h6>\n</blockquote>\n<h5 id="元素增加" tabindex="-1"><a class="header-anchor" href="#元素增加" aria-hidden="true">#</a> 元素增加</h5>\n<blockquote>\n<h6 id="unshift-从头开始加" tabindex="-1"><a class="header-anchor" href="#unshift-从头开始加" aria-hidden="true">#</a> unshift 从头开始加</h6>\n<h6 id="push-向后追加元素" tabindex="-1"><a class="header-anchor" href="#push-向后追加元素" aria-hidden="true">#</a> push 向后追加元素</h6>\n</blockquote>\n<h5 id="splice" tabindex="-1"><a class="header-anchor" href="#splice" aria-hidden="true">#</a> splice</h5>\n<p>splice(起始下标(0维数组),删除数量,删除后替换的变量)</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span>arrays<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>bianliang<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h5 id="sort" tabindex="-1"><a class="header-anchor" href="#sort" aria-hidden="true">#</a> sort</h5>\n<p>对数组进行排序，sort中如果需要乱序，就需要通过返回随机数实现</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">//</span>\n<span class="token keyword">this</span><span class="token punctuation">.</span>arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    a <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    b <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h5 id="reverse" tabindex="-1"><a class="header-anchor" href="#reverse" aria-hidden="true">#</a> reverse</h5>\n<p>将数组反转</p>\n<h5 id="filter" tabindex="-1"><a class="header-anchor" href="#filter" aria-hidden="true">#</a> filter</h5>\n<p>传入的元素符合条件就留下，否则清除，但不会影响原始数组的数据，它会返回解析过后的数组</p>\n<h6 id="语法" tabindex="-1"><a class="header-anchor" href="#语法" aria-hidden="true">#</a> 语法</h6>\n<p>filter((元素)=&gt;{\nreturn 筛选条件;\n}):</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span>arrays <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>arrays<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> item <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="v-for" tabindex="-1"><a class="header-anchor" href="#v-for" aria-hidden="true">#</a> v-for</h4>\n<blockquote>\n<ul>\n<li><strong>不推荐</strong>同时使用 <code>v-if</code> 和 <code>v-for</code></li>\n<li>当 <code>v-if</code> 与 <code>v-for</code> 一起使用时，<code>v-for</code> 具有比 <code>v-if</code> 更高的优先级。</li>\n</ul>\n</blockquote>\n<h5 id="作用-7" tabindex="-1"><a class="header-anchor" href="#作用-7" aria-hidden="true">#</a> 作用</h5>\n<p>​\t基于源数据多次渲染元素或模板块,被标记的元素就生成哪种元素</p>\n<h5 id="用法-1" tabindex="-1"><a class="header-anchor" href="#用法-1" aria-hidden="true">#</a> 用法</h5>\n<p>​\tv-for = \' () in 被遍历对象 \'</p>\n<h5 id="形参区别" tabindex="-1"><a class="header-anchor" href="#形参区别" aria-hidden="true">#</a> 形参区别</h5>\n<p>​        遍历数字: (元素,下标)\n​        遍历对象: (属性名,属性值,属性下标)\n​        遍历数组对象:(数组下标,元素对象)</p>\n<h5 id="key" tabindex="-1"><a class="header-anchor" href="#key" aria-hidden="true">#</a> :key</h5>\n<p>为避免有时未加:Key修饰符导致的Vue对Dom算法渲染错误,通过加上:Key修饰符(唯一的标识)来解决</p>\n<p>例如以下例子</p>\n<p>没有添加:key修饰符之前</p>\n<p>添加后:</p>\n<p>结论：</p>\n<p>​\t\t当用户随机选中一条数据后，单击添加，按照正常逻辑，增加后，单选按钮应该跟随之前选中的信息，而这里并没有按照合理的流程进行操作，这就是因为Vue对Dom的算法操作导致的渲染问题,所以根据需求进行添加:key修饰符，大部分情况下是添加的</p>\n<p>​\t:key使用的注意事项:</p>\n<p>​\t\t\t它的值不能是对象(Object)</p>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>newName<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>write<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clickUnshift<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>增加<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>\n    <span class="token comment">&lt;!--这里演示加不加 :key=\'boy.id\'的区别--\x3e</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(boy,index) in boys<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>boyBox<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{boy}}——{{index}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n    <span class="token keyword">const</span> vue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n            <span class="token literal-property property">num</span><span class="token operator">:</span> <span class="token number">9</span><span class="token punctuation">,</span>\n            <span class="token literal-property property">arrays</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"项1"</span><span class="token punctuation">,</span> <span class="token string">"项2"</span><span class="token punctuation">,</span> <span class="token string">"项3"</span><span class="token punctuation">,</span> <span class="token string">"项4"</span><span class="token punctuation">,</span> <span class="token string">"项5"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n            <span class="token literal-property property">newName</span><span class="token operator">:</span> <span class="token string">"翠花"</span><span class="token punctuation">,</span>\n            <span class="token literal-property property">boys</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n                <span class="token punctuation">{</span>\n                    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n                    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"小毛"</span><span class="token punctuation">,</span>\n                    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span>\n                <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                <span class="token punctuation">{</span>\n                    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n                    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"小巴"</span><span class="token punctuation">,</span>\n                    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">16</span>\n                <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                <span class="token punctuation">{</span>\n                    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n                    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"小李"</span><span class="token punctuation">,</span>\n                    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">12</span>\n                <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                <span class="token punctuation">{</span>\n                    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>\n                    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"小王"</span><span class="token punctuation">,</span>\n                    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">24</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">]</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n            <span class="token function">clickUnshift</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token comment">//先根据输入的值生成对象</span>\n                <span class="token keyword">let</span> newBoy <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>boys<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>newName<span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n                <span class="token comment">//将新生成的对象加入数组头部</span>\n                <span class="token keyword">this</span><span class="token punctuation">.</span>boys<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>newBoy<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br></div></div><h4 id="自定义指令" tabindex="-1"><a class="header-anchor" href="#自定义指令" aria-hidden="true">#</a> 自定义指令</h4>\n<h5 id="作用-8" tabindex="-1"><a class="header-anchor" href="#作用-8" aria-hidden="true">#</a> 作用</h5>\n<p>​\t自己注册一个指令到Vue全局或局部</p>\n<h5 id="用法-2" tabindex="-1"><a class="header-anchor" href="#用法-2" aria-hidden="true">#</a> 用法</h5>\n<p>​\t注册全局指令: Vue.directive( id, [definition] )</p>\n<p>​\t注册局部指令:</p>\n<p>在Vue选项中添加</p>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code>directives: {\n    指令名称(元素, 绑定, 新虚拟节点, 旧虚拟节点) {\n        \n    }\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h5 id="directives和directive的区别" tabindex="-1"><a class="header-anchor" href="#directives和directive的区别" aria-hidden="true">#</a> <strong>directives</strong>和<strong>directive</strong>的区别</h5>\n<h6 id="创建方式" tabindex="-1"><a class="header-anchor" href="#创建方式" aria-hidden="true">#</a> 创建方式</h6>\n<p>一个是用Vue大类进行创建，一个是通过Vue的选项进行创建的</p>\n<p>全局自定义指令的创建相对局部自定义指令的创建要复杂一点</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210429102407804" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210429102407804.png" data="aurora"></p>\n<h6 id="绑定的方式" tabindex="-1"><a class="header-anchor" href="#绑定的方式" aria-hidden="true">#</a> 绑定的方式</h6>\n<p>全局自定义指令绑定是可以将事件或属性进行分开绑定</p>\n<p>​\t关于事件(元素的聚焦、失焦、悬停等)的绑定在inserted中</p>\n<p>​\t关于属性(元素的样式、属性)的绑定在bind中</p>\n<p>局部自定义指令绑定是将update和bind合在一起</p>\n<h2 id="_4-过滤器" tabindex="-1"><a class="header-anchor" href="#_4-过滤器" aria-hidden="true">#</a> 4.过滤器</h2>\n<h3 id="作用-9" tabindex="-1"><a class="header-anchor" href="#作用-9" aria-hidden="true">#</a> 作用</h3>\n<p>​        可被用于文本格式化</p>\n<h3 id="适用场景-1" tabindex="-1"><a class="header-anchor" href="#适用场景-1" aria-hidden="true">#</a> 适用场景</h3>\n<p>​        商品展示时的单位转换</p>\n<p>​\t\t日期的格式转换s</p>\n<h3 id="语法-1" tabindex="-1"><a class="header-anchor" href="#语法-1" aria-hidden="true">#</a> 语法</h3>\n<p>​        通过花括号或者v-bind调用\n​        {{参数 | 处理参数的函数}}  返回处理后的结果\n​        处理函数的参数:第一个参数是管道符号前的结果\n​        多个过滤器链永远以最后一个过滤器输出的结果作为结果\n​        过滤器必须return  显示的值是最后一个过滤器return的结果</p>\n<h3 id="例子" tabindex="-1"><a class="header-anchor" href="#例子" aria-hidden="true">#</a> 例子</h3>\n<div class="language-vue ext-vue line-numbers-mode"><pre v-pre class="language-vue"><code>{{today| dateFilter}}\n\n------\nfilters: {\n    dateFilter(date) {\n        return moment(date).format(\'YYYY年MM月DD日 hh:mm:ss\');\n    }\n},\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="_5-计算属性" tabindex="-1"><a class="header-anchor" href="#_5-计算属性" aria-hidden="true">#</a> 5.计算属性</h2>\n<h5 id="解决问题" tabindex="-1"><a class="header-anchor" href="#解决问题" aria-hidden="true">#</a> 解决问题</h5>\n<blockquote>\n<p>在插值中使用表达式,可读性差，不利于维护</p>\n<p>通过get() 获取相关属性的变化计算自己，通过set()监视自己的属性的主动变化(因此可以用来影响关联属性)</p>\n</blockquote>\n<h5 id="作用-10" tabindex="-1"><a class="header-anchor" href="#作用-10" aria-hidden="true">#</a> 作用</h5>\n<p>​\t\t通过关联属性对原始属性进行变更</p>\n<h5 id="用法-3" tabindex="-1"><a class="header-anchor" href="#用法-3" aria-hidden="true">#</a> 用法</h5>\n<p>​\tVue选项computed:{}</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210430085821451" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210430085821451.png" data="aurora"></p>\n<p><strong>计算属性是基于它们的响应式依赖进行缓存的,只在相关响应式依赖发生改变时它们才会重新求值。</strong></p>\n<p><strong>计算属性必须返回一个结果（计算过后的结果）</strong></p>\n<p>计算属性作为函数出现时默认的是：</p>\n<p>​\t这个属性对象的getter</p>\n<p>计算属性对象的setter其实是一个监视器，只要计算属性的本体发生变化,就会触发</p>\n<h5 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景" aria-hidden="true">#</a> 应用场景</h5>\n<p>​\t面向不同国家的一个商城，里面的价格只有一份，不同国家的人看到的货币都是经过汇率换算过的结果，这时就可以使用到计算属性进行计算</p>\n<p>PS:单选项中访问其他选项的属性或方法都需要通过this指向vm实例再通过实例得到其他选项中的属性或方法</p>\n<div class="language-vue ext-vue line-numbers-mode"><pre v-pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    第一个输入框 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>input1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>\n    第二个输入框 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>input2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>\n    前两个数字相加的结果 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>result<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n    <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">computed</span><span class="token operator">:</span><span class="token punctuation">{</span>\n            <span class="token literal-property property">result</span><span class="token operator">:</span><span class="token punctuation">{</span>\n                <span class="token comment">//这其实是result属性的回调，回调的时机是获取当前属性值的时候，作用是将返回值作为属性值</span>\n                <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                    <span class="token keyword">let</span> regNum <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\d*$</span><span class="token regex-delimiter">/</span></span> <span class="token comment">//申明数字的正则表达式</span>\n                    <span class="token keyword">let</span> num1 <span class="token operator">=</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>input1<span class="token punctuation">)</span>\n                    <span class="token keyword">let</span> num2 <span class="token operator">=</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>input2<span class="token punctuation">)</span>\n                    <span class="token keyword">if</span> <span class="token punctuation">(</span>regNum<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> regNum<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                        <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2\n                    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>\n                        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>input1 <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>input2\n                    <span class="token punctuation">}</span>\n                <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                <span class="token comment">//这也是一个回调，回调的实际是属性值发生改变的时候，监视当前属性值的变化，同步更新相关属性值</span>\n                <span class="token function">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>\n                    <span class="token keyword">let</span> regNum <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\d*$</span><span class="token regex-delimiter">/</span></span> <span class="token comment">//申明数字的正则表达式</span>\n                    <span class="token keyword">let</span> num1 <span class="token operator">=</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>input1<span class="token punctuation">)</span>\n                    <span class="token keyword">let</span> num2 <span class="token operator">=</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>input2<span class="token punctuation">)</span>\n                    <span class="token comment">//如果是数字类型，就转化后相加</span>\n                    <span class="token keyword">if</span> <span class="token punctuation">(</span>regNum<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> regNum<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                        <span class="token keyword">this</span><span class="token punctuation">.</span>input1 <span class="token operator">=</span> value <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>input2\n                        <span class="token keyword">this</span><span class="token punctuation">.</span>input2 <span class="token operator">=</span> value <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>input1\n                        value <span class="token operator">=</span> num1 <span class="token operator">+</span> num2\n                        <span class="token comment">//如果不是数字类型就拆分字符串</span>\n                    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>\n                        <span class="token keyword">this</span><span class="token punctuation">.</span>input1<span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>input2<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>\n                        <span class="token keyword">this</span><span class="token punctuation">.</span>input2<span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>input1<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>\n                        value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>input1 <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>input2\n                    <span class="token punctuation">}</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">{</span>\n            <span class="token literal-property property">input1</span><span class="token operator">:</span><span class="token string">""</span><span class="token punctuation">,</span>\n            <span class="token literal-property property">input2</span><span class="token operator">:</span><span class="token string">""</span>\n        <span class="token punctuation">}</span>\n\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br></div></div><h2 id="_6-侦听器" tabindex="-1"><a class="header-anchor" href="#_6-侦听器" aria-hidden="true">#</a> 6.侦听器</h2>\n<p>观察和响应 Vue 实例上的数据变动,计算属性也是如此</p>\n<h5 id="侦听器的参数" tabindex="-1"><a class="header-anchor" href="#侦听器的参数" aria-hidden="true">#</a> 侦听器的参数</h5>\n<p>参数1：更改后的值,参数2:更改前的值</p>\n<h5 id="侦听器与计算属性的区别" tabindex="-1"><a class="header-anchor" href="#侦听器与计算属性的区别" aria-hidden="true">#</a> 侦听器与计算属性的区别</h5>\n<p>侦听器侦听对象的本身，并且在其他的选项中已经存在而计算属性不用</p>\n<ol>\n<li>侦听器，侦听自己，当值发生变化的时候会触发，有两个参数（新值，旧值）</li>\n<li>计算属性，侦听关联属性，当关联属性的值发生变化的时候，就得到一个值</li>\n<li>计算属性具有缓存，证明方式是多次调用同一个计算属性，观察执行多少次，侦听器是每次变化都会执行</li>\n<li>每个计算属性都有两个回调函数，一个是setter，一个是getter</li>\n<li>get用来返回当前属性的值，不会影响原始属性的值</li>\n<li>set用于监视属性，一旦属性改变，就会调用set，就会将新的值传入set(value)</li>\n</ol>\n<div class="language-vue ext-vue line-numbers-mode"><pre v-pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>现在的数字是:{{num}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>num++<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>num++<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>这个数字是一个{{result}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n    <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">{</span>\n            <span class="token literal-property property">num</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n            <span class="token literal-property property">result</span><span class="token operator">:</span> <span class="token string">"奇数"</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">watch</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n            <span class="token comment">//监听某个值的变化</span>\n            <span class="token function">num</span><span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span> oldValue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>newValue <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>result <span class="token operator">=</span> <span class="token string">"偶数"</span>\n                <span class="token punctuation">}</span>\n                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>result <span class="token operator">=</span> <span class="token string">"奇数"</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h2 id="_7-vue组件" tabindex="-1"><a class="header-anchor" href="#_7-vue组件" aria-hidden="true">#</a> 7.Vue组件</h2>\n<blockquote>\n<p>模块：可复用的代码块</p>\n<p>组件：可复用的UI</p>\n</blockquote>\n<p>用template声明一个需要复用的html结构 组件没有挂载点\n组件具有单根性,如果传入多个元素，就只渲染第一个元素，为了确保不出错，就直接使用div进行包裹\n全局组件 可以在不同的vue实例间进行调用</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"组件名称"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">单标签</span><span class="token template-punctuation string">`</span></span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_7-1-组件的定义" tabindex="-1"><a class="header-anchor" href="#_7-1-组件的定义" aria-hidden="true">#</a> 7-1.组件的定义</h3>\n<p>组件的定义有三种方式：</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// 注册组件，传入一个扩展过的构造器</span>\nVue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">\'my-component\'</span><span class="token punctuation">,</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 注册组件，传入一个选项对象 (自动调用 Vue.extend)</span>\nVue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">\'my-component\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 获取注册的组件 (始终返回构造器)</span>\n<span class="token keyword">var</span> MyComponent <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">\'my-component\'</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h4 id="_7-1-1-利用构造器创建子子类-再把子类注册到全局组件" tabindex="-1"><a class="header-anchor" href="#_7-1-1-利用构造器创建子子类-再把子类注册到全局组件" aria-hidden="true">#</a> 7-1-1.利用构造器创建子子类，再把子类注册到全局组件</h4>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token comment">&lt;!--使用组件--\x3e</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>zujian</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>zujian</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n    <span class="token comment">//第一种方式,利用构造器 使用基础 Vue 构造器，创建一个“子类”。参数是一个包含组件选项的对象。</span>\n    <span class="token keyword">const</span> zujian <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div>\n           &lt;p>美人不是母胎生&lt;/p>\n           &lt;p>应是桃花树长成&lt;/p>\n        &lt;/div></span><span class="token template-punctuation string">`</span></span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token comment">//将zujian注册到全局组件</span>\n    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"zujian"</span><span class="token punctuation">,</span>zujian<span class="token punctuation">)</span>\n\n    <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h4 id="_7-1-2-直接注册" tabindex="-1"><a class="header-anchor" href="#_7-1-2-直接注册" aria-hidden="true">#</a> 7-1-2.直接注册</h4>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token comment">&lt;!--使用组件--\x3e</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>zujian</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>zujian</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n  <span class="token comment">//直接注册全局组件</span>\n  Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">\'zujian\'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>\n    <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div>\n    &lt;p>人间四月芳菲尽&lt;/p>\n    &lt;p>山寺桃花始盛开&lt;/p>\n    &lt;/div></span><span class="token template-punctuation string">`</span></span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h4 id="_7-1-3-通过选择器来定义" tabindex="-1"><a class="header-anchor" href="#_7-1-3-通过选择器来定义" aria-hidden="true">#</a> 7-1-3.通过选择器来定义</h4>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token comment">&lt;!--使用组件--\x3e</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>zujian</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>zujian</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token comment">&lt;!--这里是一个template模板标签,专门定义UI结构的--\x3e</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xiakexing<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>十步杀一人,千里不留行<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>事了拂衣去,深藏功与名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n    <span class="token comment">//通过引入上面&lt;template>标签来注册组件</span>\n    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">\'zujian\'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>\n        <span class="token comment">//这里用的是反引号,如果用单引号,其实也没问题,就是爆红不好看</span>\n        <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">#xiakexing</span><span class="token template-punctuation string">`</span></span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p>私有组件的定义方式：</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    \n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">components</span><span class="token operator">:</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">组件名</span><span class="token operator">:</span><span class="token punctuation">{</span>\n            <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">"单根标签"</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="_7-2-组件中的结构" tabindex="-1"><a class="header-anchor" href="#_7-2-组件中的结构" aria-hidden="true">#</a> 7-2.组件中的结构</h3>\n<p>由于组件本身就是一个vue实例，所以vue实例该有的它都有</p>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>zujian</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>zujian</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n    <span class="token comment">//注册一个功能全面的组件</span>\n    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">\'zujian\'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div>\n        &lt;el-button type="primary" @click="sayName">点击弹出诗人名字&lt;/el-button>\n        &lt;p>安得世间两全法&lt;/p>\n        &lt;p>不负如来不负卿&lt;/p>\n        &lt;p>{{3.3 | priceFilter}}&lt;/p>\n        &lt;/div></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n        <span class="token comment">//方法</span>\n        <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>\n            <span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                <span class="token keyword">this</span><span class="token punctuation">.</span>$message<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string">\'这首诗是大情圣仓央嘉措的作品\'</span><span class="token punctuation">)</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token comment">//过滤器</span>\n        <span class="token literal-property property">filters</span><span class="token operator">:</span><span class="token punctuation">{</span>\n            <span class="token function">priceFilter</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                <span class="token keyword">return</span> <span class="token string">"$"</span> <span class="token operator">+</span> value <span class="token operator">+</span> <span class="token string">"一个蛤蟆皮"</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><h3 id="_7-3-组件中的data只能是一个function" tabindex="-1"><a class="header-anchor" href="#_7-3-组件中的data只能是一个function" aria-hidden="true">#</a> 7-3.组件中的data只能是一个function</h3>\n<p><strong>一个组件的 <code>data</code> 选项必须是一个函数</strong>，因此每个实例可以维护一份被返回对象的独立的拷贝：</p>\n<blockquote>\n<p>每次return都是一个新的对象</p>\n</blockquote>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token comment">&lt;!--多个组件的num互不干扰--\x3e</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>zujian</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>zujian</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>zujian</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>zujian</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n    <span class="token comment">//注册一个组件</span>\n    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">\'zujian\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div>\n        &lt;p>计数器:&lt;el-button type="info" @click="num --">-&lt;/el-button> &lt;input v-model="num"> &lt;el-button type="info" @click="num ++">+&lt;/el-button> &lt;/p>\n        &lt;/div></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n        <span class="token comment">//组件中的data是函数才能互不影响</span>\n        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">return</span><span class="token punctuation">{</span>\n                <span class="token literal-property property">num</span><span class="token operator">:</span><span class="token number">1</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><blockquote>\n<p>data中的数据不是私有的时候的问题</p>\n<blockquote>\n<p>问题描述： 如下，在组件的data选项中return外部的obj，这样组件在调用的过程中，数据就会发生共享，这样也更加容易出错</p>\n</blockquote>\n</blockquote>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ok</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ok</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ok</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ok</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n    <span class="token comment">//申明一个变量</span>\n    <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">num</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">}</span>\n    <span class="token comment">//申明一个组件</span>\n    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">\'ok\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n          &lt;div>\n          &lt;el-tag>{{ num }}&lt;/el-tag>\n          &lt;br>\n          &lt;el-button @click="addSelf">点击&lt;/el-button>\n          &lt;/div></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> obj\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n            <span class="token function">addSelf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">this</span><span class="token punctuation">.</span>num<span class="token operator">++</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><h3 id="_7-4-父组件向子组件传值-子组件使用父组件的数据" tabindex="-1"><a class="header-anchor" href="#_7-4-父组件向子组件传值-子组件使用父组件的数据" aria-hidden="true">#</a> 7-4.父组件向子组件传值(子组件使用父组件的数据)</h3>\n<blockquote>\n<p>注意：无论是子组件自定义事件还是子组件自定义方法，都不支持大小写的驼峰命名</p>\n</blockquote>\n<p>单纯传值：子组件中的props中自定义属性 ====&gt;&gt; 调用子组件标签的时候，通过v-bind绑定子组件自定义的属性实现传值 ===&gt;&gt; 子组件中正常使用值</p>\n<p>props中申明的虽然只能是个字符串，但是这个字符串，可以接收对象/数组/字符串/数字</p>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token comment">&lt;!--这里通过强制绑定子组件属性 v-bind:hamapi 对子组件进行传值--\x3e</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>zujian</span> <span class="token attr-name">:hamapi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>zujian</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n    <span class="token comment">//父组件向子组件传值就是在子组件里面申明了子组件标签的一个特殊属性</span>\n    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">\'zujian\'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">props</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">\'hamapi\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div>\n        &lt;p style="color: red">看看能不能调用到父组件的内容&lt;/p>\n        &lt;p>{{hamapi}}&lt;/p>\n        &lt;/div></span><span class="token template-punctuation string">`</span></span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n            <span class="token literal-property property">msg</span><span class="token operator">:</span><span class="token string">"父组件的内容"</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p>将父组件传入的值，赋值给子组件，赋值的时候，就直接在data里面，通过 this.$props里面申明的属性取父组件穿过来的值即可</p>\n<div class="language-htmL ext-htmL line-numbers-mode"><pre v-pre class="language-htmL"><code>&lt;div id=&quot;app&quot;&gt;\n    &lt;!--这里通过强制绑定子组件属性 v-bind:hamapi 对子组件进行传值--&gt;\n    &lt;zujian :hamapi=&quot;num&quot;&gt;&lt;/zujian&gt;\n&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n&lt;script&gt;\n    //父组件向子组件传值就是在子组件里面申明了子组件标签的一个特殊属性\n    Vue.component(\'zujian\',{\n        props:[\'hamapi\'],\n        template:`&lt;div&gt;\n        &lt;p style=&quot;color: red&quot;&gt;点击修改父组件传入的值&lt;/p&gt;\n        &lt;el-button type=&quot;primary&quot; @click=&quot;subNum ++&quot;&gt;+&lt;/el-button&gt;\n        &lt;p&gt;{{subNum}}&lt;/p&gt;\n        &lt;/div&gt;`,\n        data(){\n            return{\n                //通过this 拿到hamapi的值,并给予msg\n                subNum:this.hamapi\n            }\n        }\n    })\n    const vm = new Vue({\n        el: &quot;#app&quot;,\n        data: {\n            num:3\n        }\n    })\n&lt;/script&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><h3 id="_7-5-子组件调用父组件的方法-父组件的方法传递给子组件" tabindex="-1"><a class="header-anchor" href="#_7-5-子组件调用父组件的方法-父组件的方法传递给子组件" aria-hidden="true">#</a> 7-5.子组件调用父组件的方法(父组件的方法传递给子组件)</h3>\n<blockquote>\n<p>注意：无论是子组件自定义事件还是子组件自定义方法，都不支持大小写的驼峰命名</p>\n</blockquote>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token comment">&lt;!--这里通过强制绑定子组件属性 @子组件自定义方法="父组件的方法" 实现子组件调用父组件的方法--\x3e</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>zujian</span> <span class="token attr-name">:hamapi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>num<span class="token punctuation">"</span></span> <span class="token attr-name">@subevent</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parentMethod<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>zujian</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n    <span class="token comment">//父组件向子组件传值就是在子组件里面申明了子组件标签的一个特殊属性</span>\n    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">\'zujian\'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">props</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">\'hamapi\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div>\n        &lt;p style="color: red">点击触发父组件的方法&lt;/p>\n        &lt;el-button type="primary" @click="sayParent">触发父组件的方法&lt;/el-button>\n        &lt;p>{{subNum}}&lt;/p>\n        &lt;/div></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">return</span><span class="token punctuation">{</span>\n                <span class="token comment">//通过this 拿到hamapi的值,并给予msg</span>\n                <span class="token literal-property property">subNum</span><span class="token operator">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>hamapi\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>\n            <span class="token function">sayParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                <span class="token comment">//通过 this的$emit调用到子组件标签中定义的subevent事件 </span>\n                <span class="token comment">//$emit</span>\n                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">\'subevent\'</span><span class="token punctuation">)</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n            <span class="token literal-property property">num</span><span class="token operator">:</span><span class="token number">3</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>\n            <span class="token function">parentMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                <span class="token keyword">this</span><span class="token punctuation">.</span>$message<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string">\'大家都是蛤蟆皮\'</span><span class="token punctuation">)</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br></div></div><h3 id="_7-6-子组件调用父组件方法的时候传参" tabindex="-1"><a class="header-anchor" href="#_7-6-子组件调用父组件方法的时候传参" aria-hidden="true">#</a> 7-6.子组件调用父组件方法的时候传参</h3>\n<p>--子组件修改父组件的数据---</p>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n父组件的num的值{{num}}\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>zujian</span> <span class="token attr-name">@addanum</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>change<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>zujian</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n    <span class="token comment">//定义一个组件</span>\n    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">\'zujian\'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div>\n        &lt;el-button type="info" @click="hamapi">点击给父组件加个数字&lt;/el-button>\n        &lt;/div></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n        <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>\n            <span class="token function">hamapi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                <span class="token keyword">let</span> num <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">)</span>\n                <span class="token comment">//通过this.$emit(\'自定义方法\',arg1,arg2,arg3...)中的arg给父组件传参,并修改父组件</span>\n                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">"addanum"</span><span class="token punctuation">,</span>num<span class="token punctuation">)</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n            <span class="token literal-property property">num</span><span class="token operator">:</span><span class="token number">1</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>\n            <span class="token function">change</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                <span class="token keyword">this</span><span class="token punctuation">.</span>num <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>num <span class="token operator">+</span> num\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><h3 id="_7-7-兄弟组件之间的通信" tabindex="-1"><a class="header-anchor" href="#_7-7-兄弟组件之间的通信" aria-hidden="true">#</a> 7-7.兄弟组件之间的通信</h3>\n<blockquote>\n<p>关键知识点：\n监听事件： 事件中心.$on(\'兄弟组件中$emit(中第一个参数)\',兄弟组件中$emit(中第2个参数))\n销毁事件： 事件中心.$off(被$emit()绑定过的第一个参数)\n触发事件： 事件中心.$emit(\'控制兄弟组件的方法\',传给兄弟组件的参数)\n监听事件要写在mounted(){}这个钩子方法里面</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210507235447237" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210507235447237.png" data="aurora"></p>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token comment">&lt;!--在vm实例也就是事件中心的父组件里面进行注销--\x3e</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xiaohui<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>销毁组件间通讯<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n    <span class="token comment">&lt;!--a组件--\x3e</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>azujian</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>azujian</span><span class="token punctuation">></span></span>\n    <span class="token comment">&lt;!--b组件--\x3e</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bzujian</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bzujian</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n    <span class="token comment">//注册全局事件中心</span>\n    <span class="token keyword">let</span> parent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">//组件A</span>\n    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"azujian"</span><span class="token punctuation">,</span><span class="token punctuation">{</span>\n        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token punctuation">{</span>\n                <span class="token literal-property property">num</span><span class="token operator">:</span><span class="token number">0</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div>\n            A组件的计数器读数:{{num}} &lt;br>\n            &lt;button @click="adomchange">操作B组件的计数器读数&lt;/button>\n        &lt;/div></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n        <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>\n            <span class="token comment">//写本组件的方法</span>\n            <span class="token function">adomchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                <span class="token keyword">let</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>\n                <span class="token comment">//使用事件中心监听兄弟对象</span>\n                parent<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">\'bar\'</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token comment">//调用组件a的更新的钩子方法</span>\n        <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token comment">//启用事件中心的监听,当bzujian被绑定了aar的那个事件被触发的时候,就调用这个方法</span>\n            parent<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">\'aar\'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">{</span>\n                <span class="token keyword">this</span><span class="token punctuation">.</span>num <span class="token operator">+=</span> num\n            <span class="token punctuation">}</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token comment">//组件B</span>\n    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"bzujian"</span><span class="token punctuation">,</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">props</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"counter"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div>\n            B组件的计数器读数:{{num}} &lt;br>\n            &lt;button @click="bdomchange">操作A组件的计数器读数&lt;/button>\n        &lt;/div></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token punctuation">{</span>\n                <span class="token literal-property property">num</span><span class="token operator">:</span><span class="token number">0</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>\n            <span class="token comment">//写本组件的方法</span>\n            <span class="token function">bdomchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                <span class="token keyword">let</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>\n                <span class="token comment">//给事件中心绑定一个aar的事件,传入参数</span>\n                parent<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">\'aar\'</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token comment">//调用组件a的更新的钩子方法</span>\n        <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token comment">//启用事件中心对azujian的bar的监听,当azujian里面的 bar触发的时候,就调用这个方法</span>\n            parent<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">\'bar\'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">{</span>\n                <span class="token keyword">this</span><span class="token punctuation">.</span>num <span class="token operator">+=</span> num\n            <span class="token punctuation">}</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>\n            <span class="token function">xiaohui</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                <span class="token comment">//销毁事件中心对不同事件的绑定</span>\n                parent<span class="token punctuation">.</span><span class="token function">$off</span><span class="token punctuation">(</span><span class="token string">\'aar\'</span><span class="token punctuation">)</span>\n                parent<span class="token punctuation">.</span><span class="token function">$off</span><span class="token punctuation">(</span><span class="token string">\'bar\'</span><span class="token punctuation">)</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br></div></div><h3 id="_7-8-采用v-if来实现不同组件的切换" tabindex="-1"><a class="header-anchor" href="#_7-8-采用v-if来实现不同组件的切换" aria-hidden="true">#</a> 7-8.采用v-if来实现不同组件的切换</h3>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token comment">&lt;!--点击不同的按钮,控制isdenglu的取值--\x3e</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>isdenglu = true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>---<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>isdenglu = false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>注册<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>denglu</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>isdenglu<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>denglu</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>zhuce</span> <span class="token attr-name">v-else</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>zhuce</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n    <span class="token comment">//自定义登录组件</span>\n    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">\'denglu\'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div>\n          &lt;el-card>\n          登录组件\n          &lt;/el-card>\n        &lt;/div></span><span class="token template-punctuation string">`</span></span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token comment">//自定义注册组件</span>\n    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">\'zhuce\'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div>\n          &lt;el-card>\n          注册组件\n          &lt;/el-card>\n        &lt;/div></span><span class="token template-punctuation string">`</span></span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n            <span class="token literal-property property">isdenglu</span><span class="token operator">:</span><span class="token boolean">true</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><h3 id="_7-9-动态组件" tabindex="-1"><a class="header-anchor" href="#_7-9-动态组件" aria-hidden="true">#</a> 7-9.动态组件</h3>\n<p>采用component标签结合is属性实现不同组件的切换</p>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token comment">&lt;!--点击修改componentName的值--\x3e</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>componentName = <span class="token punctuation">\'</span>jin<span class="token punctuation">\'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>金<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>componentName = <span class="token punctuation">\'</span>mu<span class="token punctuation">\'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>木<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>componentName = <span class="token punctuation">\'</span>shui<span class="token punctuation">\'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>水<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>componentName = <span class="token punctuation">\'</span>huo<span class="token punctuation">\'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>火<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>componentName = <span class="token punctuation">\'</span>tu<span class="token punctuation">\'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>土<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>\n<span class="token comment">&lt;!--通过引入component组件,实现不同组件的切换--\x3e</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name">:is</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>componentName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n    <span class="token comment">//金</span>\n    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">\'jin\'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>\n      <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div>\n      &lt;el-card>五行:金&lt;/el-card>\n      &lt;/div></span><span class="token template-punctuation string">`</span></span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token comment">//木</span>\n    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">\'mu\'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>\n      <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div>\n      &lt;el-card>五行:木&lt;/el-card>\n      &lt;/div></span><span class="token template-punctuation string">`</span></span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token comment">//水</span>\n    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">\'shui\'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>\n      <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div>\n      &lt;el-card>五行:水&lt;/el-card>\n      &lt;/div></span><span class="token template-punctuation string">`</span></span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token comment">//火</span>\n    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">\'huo\'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>\n      <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div>\n      &lt;el-card>五行:火&lt;/el-card>\n      &lt;/div></span><span class="token template-punctuation string">`</span></span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token comment">//土</span>\n    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">\'tu\'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>\n      <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div>\n      &lt;el-card>五行:土&lt;/el-card>\n      &lt;/div></span><span class="token template-punctuation string">`</span></span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n          <span class="token literal-property property">componentName</span><span class="token operator">:</span><span class="token string">\'jin\'</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br></div></div><h3 id="_7-10-插槽" tabindex="-1"><a class="header-anchor" href="#_7-10-插槽" aria-hidden="true">#</a> 7-10.插槽</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210506003026446" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210506003026446.png" data="aurora"></p>\n<h4 id="_7-10-1-匿名插槽" tabindex="-1"><a class="header-anchor" href="#_7-10-1-匿名插槽" aria-hidden="true">#</a> 7-10-1.匿名插槽</h4>\n<blockquote>\n<p>1.使用插槽,插槽的标签名和slot的标签名将不会被渲染,kkl里面的内容会被夹在slot标签里面,</p>\n<p>2.如果slot标签里面有值, 调用插槽的时候,如果不传值就会使用slot标签的默认值，如果传了值就覆盖掉原本的值,</p>\n<p>3.VUE官方2.6之后的v-slot不能开槽，且不会覆盖，且会被渲染出来</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210506003351853" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210506003351853.png" data="aurora"></p>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>zujian</span><span class="token punctuation">></span></span>\n  <span class="token comment">&lt;!--这里的标签其实要不要无所谓--\x3e</span>\n<span class="token comment">&lt;!--  &lt;span>kkl&lt;/span>--\x3e</span>\n  蛤蟆皮\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>zujian</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n  <span class="token comment">//定义一个组件  组件的模板里面留一个口子,这个口子就是父组件向里面传值的地方</span>\n  Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">\'zujian\'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>\n    <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div>\n    &lt;p>憨批的名字是&lt;slot>杰杰&lt;/slot>&lt;/p>\n    &lt;/div></span><span class="token template-punctuation string">`</span></span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h4 id="_7-10-2-具名插槽" tabindex="-1"><a class="header-anchor" href="#_7-10-2-具名插槽" aria-hidden="true">#</a> 7-10-2.具名插槽</h4>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210911160440750" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210911160440750.png" data="aurora"></p>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>zujian</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>header</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-card</span><span class="token punctuation">></span></span>这是头部<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-card</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>你是风儿<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>我是沙<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>缠缠绵绵<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>到我家<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n    \n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>footer</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-card</span><span class="token punctuation">></span></span>这页脚<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-card</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>zujian</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n    <span class="token comment">//注册一个全局的组件</span>\n    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">\'zujian\'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div>\n         &lt;header>\n          &lt;slot name="header">&lt;/slot>\n         &lt;/header>\n\n         &lt;main>\n          &lt;slot>&lt;/slot>\n         &lt;/main>\n\n         &lt;footer>\n         &lt;slot name="footer">&lt;/slot>\n         &lt;/footer>\n        &lt;/div></span><span class="token template-punctuation string">`</span></span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br></div></div><h4 id="_7-10-3-插槽作用域" tabindex="-1"><a class="header-anchor" href="#_7-10-3-插槽作用域" aria-hidden="true">#</a> 7-10-3.插槽作用域</h4>\n<blockquote>\n<p>插槽作用域的作用：方便父组件访问子组件的内容</p>\n</blockquote>\n<h5 id="简单案例" tabindex="-1"><a class="header-anchor" href="#简单案例" aria-hidden="true">#</a> 简单案例</h5>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n<span class="token comment">&lt;!--使用子组件的作用域插槽   这里的scope显示的是{ "kkl": "哈麻皮" }这样的一个对象--\x3e</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>zizujian</span><span class="token punctuation">></span></span>\n    <span class="token comment">&lt;!--2.父组件通过 slot-scope接收子组件传递过来的对象 { "kkl": "哈麻皮" }--\x3e</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot-scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>scope<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n        {{scope}}\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>zizujian</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n    <span class="token comment">//申明一个子组件</span>\n    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"zizujian"</span><span class="token punctuation">,</span><span class="token punctuation">{</span>\n        <span class="token comment">//1.在子组件的slot上使用v-bind的方式向父组件传递数据</span>\n        <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div> 子组件\n         &lt;slot :kkl="hamapi">&lt;/slot>\n        &lt;/div></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">return</span><span class="token punctuation">{</span>\n                <span class="token literal-property property">hamapi</span><span class="token operator">:</span><span class="token string">"哈麻皮"</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210913004713486" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210913004713486.png" data="aurora"></p>\n<h5 id="较为复杂的案例" tabindex="-1"><a class="header-anchor" href="#较为复杂的案例" aria-hidden="true">#</a> 较为复杂的案例</h5>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210506004202548" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210506004202548.png" data="aurora"></p>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>chacao</span> <span class="token attr-name">:doglist</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>doglist<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token comment">&lt;!-- 指定插槽的值的操作范围 这个scopeValue只是个变量名 --\x3e</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot-scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>scopeValue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n      <span class="token comment">&lt;!-- 指定操作条件 --\x3e</span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>scopeValue.kkl.id %2 ==0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{scopeValue.kkl.name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-else</span><span class="token punctuation">></span></span>{{scopeValue.kkl.name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>chacao</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n  <span class="token comment">//定义一个插槽</span>\n  Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">\'chacao\'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>\n    <span class="token literal-property property">props</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">\'doglist\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"> &lt;div>&lt;ul>\n      &lt;li v-for="item in doglist" :key="item.id">\n        &lt;slot :kkl="item">\n          {{item.name}}\n        &lt;/slot>\n      &lt;/li>\n    &lt;/ul>&lt;/div> </span><span class="token template-punctuation string">`</span></span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">doglist</span><span class="token operator">:</span><span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n          <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">\'小泉\'</span><span class="token punctuation">,</span>\n          <span class="token literal-property property">id</span><span class="token operator">:</span><span class="token number">1</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">{</span>\n          <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">\'小野寺梨纱\'</span><span class="token punctuation">,</span>\n          <span class="token literal-property property">id</span><span class="token operator">:</span><span class="token number">2</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">{</span>\n          <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">\'长濑茜\'</span><span class="token punctuation">,</span>\n          <span class="token literal-property property">id</span><span class="token operator">:</span><span class="token number">3</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">{</span>\n          <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">\'麻生希\'</span><span class="token punctuation">,</span>\n          <span class="token literal-property property">id</span><span class="token operator">:</span><span class="token number">4</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">{</span>\n          <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">\'北原多香子\'</span><span class="token punctuation">,</span>\n          <span class="token literal-property property">id</span><span class="token operator">:</span><span class="token number">5</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br></div></div><p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210506012434509" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210506012434509.png" data="aurora"></p>\n<h3 id="_7-11-组件的嵌套" tabindex="-1"><a class="header-anchor" href="#_7-11-组件的嵌套" aria-hidden="true">#</a> 7-11.组件的嵌套</h3>\n<blockquote>\n<p>一个组件里面可以嵌套另外的组件</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210507151206985" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210507151206985.png" data="aurora"></p>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>zujian</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>zujian</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n    <span class="token comment">//创建一个组件  将一个组件套入到另一个组件</span>\n    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">\'zujian\'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div>\n        &lt;el-card>我是一只小小小鸟&lt;/el-card>\n        &lt;wu>&lt;/wu>\n        &lt;/div></span><span class="token template-punctuation string">`</span></span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">\'wu\'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div>\n        &lt;el-card>我就不同了,我的鸟比较大&lt;/el-card>\n        &lt;/div></span><span class="token template-punctuation string">`</span></span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h3 id="_7-12-组件复用案例-购物车" tabindex="-1"><a class="header-anchor" href="#_7-12-组件复用案例-购物车" aria-hidden="true">#</a> 7-12.组件复用案例：购物车</h3>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>zujian</span> <span class="token attr-name">:price</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>appPrice<span class="token punctuation">"</span></span> <span class="token attr-name">@tijiaors</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>countRs<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>zujian</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>zujian</span> <span class="token attr-name">:price</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parPrice<span class="token punctuation">"</span></span> <span class="token attr-name">@tijiaors</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>countRs<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>zujian</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>总价:{{totalPrice}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n    <span class="token comment">//定义组件</span>\n    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">\'zujian\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n          &lt;div>\n          &lt;el-row>\n            &lt;el-col style="display: flex">\n              花椒 单价:{{ price }}\n              数量\n              &lt;el-button @click="addNum">+&lt;/el-button>\n              &lt;el-input style="width: 80px" v-model="num">&lt;/el-input>\n              &lt;el-button @click="subNum">-&lt;/el-button>\n              总价: {{ rs }}\n            &lt;/el-col>\n          &lt;/el-row>\n          &lt;/div></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n        <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'price\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token punctuation">{</span>\n                <span class="token literal-property property">num</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">computed</span><span class="token operator">:</span><span class="token punctuation">{</span>\n            <span class="token comment">//根据价格和数量计算rs的值</span>\n          <span class="token function">rs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n              <span class="token keyword">return</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>num<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>price\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">watch</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n            <span class="token comment">//根据rs的变化,提交新值和旧值</span>\n            <span class="token function">rs</span><span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span> oldValue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newValue<span class="token punctuation">,</span>oldValue<span class="token punctuation">)</span>\n                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">\'tijiaors\'</span><span class="token punctuation">,</span> oldValue<span class="token punctuation">,</span> newValue<span class="token punctuation">)</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n            <span class="token function">addNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">this</span><span class="token punctuation">.</span>num<span class="token operator">++</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token function">subNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">this</span><span class="token punctuation">.</span>num<span class="token operator">--</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n            <span class="token comment">//app的单价</span>\n            <span class="token literal-property property">appPrice</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>\n            <span class="token comment">//par的单价</span>\n            <span class="token literal-property property">parPrice</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>\n            <span class="token literal-property property">totalPrice</span><span class="token operator">:</span> <span class="token number">0</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n            <span class="token comment">//父组件减去旧值,再加上新值,然后赋值给总价</span>\n            <span class="token function">countRs</span><span class="token punctuation">(</span><span class="token parameter">oldValue<span class="token punctuation">,</span> newValue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n               <span class="token keyword">this</span><span class="token punctuation">.</span>totalPrice <span class="token operator">=</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>totalPrice <span class="token operator">-</span> oldValue <span class="token operator">+</span> newValue\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br></div></div><h2 id="_8-vue路由" tabindex="-1"><a class="header-anchor" href="#_8-vue路由" aria-hidden="true">#</a> 8.VUE路由</h2>\n<h3 id="_8-0-路由原理" tabindex="-1"><a class="header-anchor" href="#_8-0-路由原理" aria-hidden="true">#</a> 8-0.路由原理</h3>\n<h4 id="_8-0-0-复习锚点知识" tabindex="-1"><a class="header-anchor" href="#_8-0-0-复习锚点知识" aria-hidden="true">#</a> 8-0.0.复习锚点知识</h4>\n<blockquote>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>\n<span class="token comment">&lt;!--1设置锚点链接--\x3e</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#hamapi<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点击直接跳转到哈麻皮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>\n<span class="token comment">&lt;!--设置锚点链接与锚点之间的阻拦--\x3e</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">width</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 2000px<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span> rebeccapurple</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token comment">&lt;!--1定义锚点--\x3e</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hamapi<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>这就是锚点<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div></blockquote>\n<h4 id="_8-0-1-使用vue组件知识自己实现一个路由" tabindex="-1"><a class="header-anchor" href="#_8-0-1-使用vue组件知识自己实现一个路由" aria-hidden="true">#</a> 8-0-1.使用vue组件知识自己实现一个路由</h4>\n<p>方式一：</p>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token comment">&lt;!--提供链接--\x3e</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>组件a<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#b<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>组件b<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#c<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>组件c<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>\n    <span class="token comment">&lt;!-- 按照链接里面的路径渲染组件 --\x3e</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>comment</span> <span class="token attr-name">:is</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>compName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>comment</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n    <span class="token comment">//1.定义组件</span>\n    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">\'zujianA\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div>组件a&lt;/div></span><span class="token template-punctuation string">`</span></span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">\'zujianB\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div>组件B&lt;/div></span><span class="token template-punctuation string">`</span></span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">\'zujianC\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div>组件C&lt;/div></span><span class="token template-punctuation string">`</span></span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n    <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n            <span class="token literal-property property">compName</span><span class="token operator">:</span> <span class="token string">"zujianA"</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">//监听hash的变化       当hash变化后，触发此函数</span>\n            window<span class="token punctuation">.</span><span class="token function-variable function">onhashchange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n                <span class="token comment">//从location中取出hash</span>\n                <span class="token keyword">const</span> hash <span class="token operator">=</span> location<span class="token punctuation">.</span>hash\n                <span class="token comment">//申明路由对象，直接一个对象就是一个键值对</span>\n                <span class="token keyword">let</span> routers <span class="token operator">=</span> <span class="token punctuation">{</span>\n                    <span class="token string-property property">"#a"</span><span class="token operator">:</span> <span class="token string">\'zujianA\'</span><span class="token punctuation">,</span>\n                    <span class="token string-property property">"#b"</span><span class="token operator">:</span> <span class="token string">\'zujianB\'</span><span class="token punctuation">,</span>\n                    <span class="token string-property property">"#c"</span><span class="token operator">:</span> <span class="token string">\'zujianC\'</span>\n                <span class="token punctuation">}</span>\n                <span class="token comment">//遍历对象的key</span>\n                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> routersKey <span class="token keyword">in</span> routers<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token comment">//如果hash的字符串和路由对象的key一致</span>\n                    <span class="token keyword">if</span> <span class="token punctuation">(</span>hash <span class="token operator">===</span> routersKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                        <span class="token comment">//就将这个key对应的value赋值给全局的组件名compName</span>\n                        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>compName <span class="token operator">=</span>  routers<span class="token punctuation">[</span>routersKey<span class="token punctuation">]</span>\n                    <span class="token punctuation">}</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br></div></div><p>方式二：</p>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token comment">&lt;!--提供链接--\x3e</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>组件a<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#b<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>组件b<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#c<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>组件c<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>\n    <span class="token comment">&lt;!-- 按照链接里面的路径渲染组件 --\x3e</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>comment</span> <span class="token attr-name">:is</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>compName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>comment</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n    <span class="token comment">//1.定义组件</span>\n    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">\'zujianA\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div>组件a&lt;/div></span><span class="token template-punctuation string">`</span></span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">\'zujianB\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div>组件B&lt;/div></span><span class="token template-punctuation string">`</span></span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">\'zujianC\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div>组件C&lt;/div></span><span class="token template-punctuation string">`</span></span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n    <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n            <span class="token literal-property property">compName</span><span class="token operator">:</span> <span class="token string">"zujianA"</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">//监听hash的变更事件    这里是hash变更后执行的函数</span>\n            window<span class="token punctuation">.</span><span class="token function-variable function">onhashchange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n                <span class="token comment">//从window.location中取出hash</span>\n                <span class="token keyword">const</span> hash <span class="token operator">=</span> location<span class="token punctuation">.</span>hash\n                <span class="token comment">//定义路由数组对象</span>\n                <span class="token keyword">let</span> router <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string-property property">"#a"</span><span class="token operator">:</span> <span class="token string">\'zujianA\'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string-property property">"#b"</span><span class="token operator">:</span> <span class="token string">\'zujianB\'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string-property property">"#c"</span><span class="token operator">:</span> <span class="token string">\'zujianC\'</span><span class="token punctuation">}</span><span class="token punctuation">]</span>\n                <span class="token comment">//声明组件名字</span>\n                <span class="token keyword">let</span> zujianName<span class="token punctuation">;</span>\n                <span class="token comment">//遍历路由对象数组</span>\n                router<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n                    <span class="token comment">//从每个路由对象中拿出key</span>\n                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> itemKey <span class="token keyword">in</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                        <span class="token comment">//判断key和hash是否一致</span>\n                        <span class="token keyword">if</span> <span class="token punctuation">(</span>itemKey <span class="token operator">===</span> hash<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                            <span class="token comment">//如果key和hash一致，就将key对应的value赋值给组件名</span>\n                            zujianName <span class="token operator">=</span> item<span class="token punctuation">[</span>itemKey<span class="token punctuation">]</span>\n                        <span class="token punctuation">}</span>\n                    <span class="token punctuation">}</span>\n                <span class="token punctuation">}</span><span class="token punctuation">)</span>\n                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>zujianName<span class="token punctuation">)</span>\n                <span class="token comment">//将组件名赋值给vue的全局compName</span>\n                <span class="token keyword">this</span><span class="token punctuation">.</span>compName <span class="token operator">=</span> zujianName\n            <span class="token punctuation">}</span>          \n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br></div></div><h3 id="_8-1-路由概述" tabindex="-1"><a class="header-anchor" href="#_8-1-路由概述" aria-hidden="true">#</a> 8-1.路由概述</h3>\n<p>官方原文：</p>\n<p>用 Vue.js + Vue Router 创建单页应用，感觉很自然：使用 Vue.js ，我们已经可以通过组合组件来组成应用程序，当你要把 Vue Router 添加进来，我们需要做的是，将组件 (components) 映射到路由 (routes)，然后告诉 Vue Router 在哪里渲染它们。</p>\n<blockquote>\n<p>要解决的问题：更加方便的创建单页面应用</p>\n<p>创建方式： 1引入vue.js &gt;&gt;&gt; 2引入VueRouter&gt;&gt;&gt;&gt;3创建路由组件&gt;&gt;&gt;&gt;4创建VueRouter实例&gt;&gt;&gt;在VueRouter里面</p>\n</blockquote>\n<h4 id="前后端路由的差别" tabindex="-1"><a class="header-anchor" href="#前后端路由的差别" aria-hidden="true">#</a> 前后端路由的差别：</h4>\n<blockquote>\n<p>后端路由：\n根据不同的URL请求，返回不同的服务器资源---增加服务器负荷，导致性能问题\n前端路由：\n根据不同的用户事件，显示不同的页面内容(显示的是不同的组件，路由的本质就是把不同的组件回显给不同的用户事件)\n采用前端路由，可以解决ajax技术导致的浏览器不支持前进后退的问题，实现单页面应用程序(SPA)，也就是整个网站只有一个页面，不过这种技术不利于提高SEO，不利于商业推广</p>\n</blockquote>\n<h4 id="路由的渲染原理" tabindex="-1"><a class="header-anchor" href="#路由的渲染原理" aria-hidden="true">#</a> 路由的渲染原理：-</h4>\n<blockquote>\n<p>vue-router.js渲染的原理\n1、router-link 这个标签会被渲染为a标签\n2、router-link 的to属性会被渲染为href属性\n3、router-link 的to属性的值会被渲染为herf属性的值，就是以#开头的hash地址</p>\n</blockquote>\n<h3 id="_8-2-定义一个基本的路由" tabindex="-1"><a class="header-anchor" href="#_8-2-定义一个基本的路由" aria-hidden="true">#</a> 8-2.定义一个基本的路由</h3>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code>1、引入vue.js后引入vue-router\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../js/vue-router.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\n2、定义路由组件\n//1、定义路由组件\nconst biaoyu1 = {\n    template: `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>天大地大,明教最大<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>`\n}\nconst baioyu2 = {\n    template: ` <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>红莲圣火,燃我残躯<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>  `\n}\n\n3、配置路由规则，创建路由实例\n//2、配置路由规则创建路由实例\nlet router = new VueRouter({\n    //配置规则数组  注意 这个单词容易写错\n    routes: [\n        {path: \'/baioyu1\', component: biaoyu1},\n        {path: \'/baioyu2\', component: baioyu2}\n    ]\n});\n\n4、把路由器挂载到根实例中\nconst app = new Vue({\n    el: "#app",\n    data: {},\n    //3挂载路由  如果属性名与属性值一值,可以只写一个\n    router\n})\n\n5、添加路由链接\n<span class="token comment">&lt;!-- 配置好路由组件,并且把路由规则搞出来后,并挂载上去之后,就可以在这里添加路由链接了--\x3e</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/baioyu1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点击我看星星<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/baioyu2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点击我看月亮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>\n6、设置路由占位符----就是路由内容要渲染的位置\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">border</span><span class="token punctuation">:</span> 1px solid red<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 100px</span><span class="token punctuation">"</span></span></span> <span class="token punctuation">></span></span>\n<span class="token comment">&lt;!-- 这是使用路由的最后一步 就是让路由的内容显示到这里--\x3e</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br></div></div><h3 id="_8-3-路由重定向" tabindex="-1"><a class="header-anchor" href="#_8-3-路由重定向" aria-hidden="true">#</a> 8-3.路由重定向</h3>\n<blockquote>\n<p>应用场景：比如说我们的很多项目有个根路径“/”,但是我们希望用户一进来根路径，就可以看到“/home”里面的东西展示到页面，而不是看到一个白板，这个时候就要用到路由重定向</p>\n</blockquote>\n<p>官方说法：就是访问一个路径的时候，其实是强制跳转到另一个路径的，这样就可以展示特定组件的内容了。</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210506121027434" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210506121027434.png" data="aurora"></p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210506121129967" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210506121129967.png" data="aurora"></p>\n<h3 id="_8-4-编程式导航" tabindex="-1"><a class="header-anchor" href="#_8-4-编程式导航" aria-hidden="true">#</a> 8-4.编程式导航</h3>\n<blockquote>\n<p>导航定义：\n就是从一个路由组件跳转到另一个路由组件的行为\n导航的方式：\n申明式导航：比如a标签跳转，<code>&lt;router-link&gt;</code>方式跳转，都是由明确的申明的\n编程式导航：比如调用 location.href 的方式进行跳转，这都是通过调用js的API实现导航的</p>\n<p>VueRouter中的编程式导航的API\nthis.$router.push(\'跳转路径\')  -------------跳转到别的地方\nthis.$router.go(\'数字\')            ------跳转到浏览器里面有记录的地方   负数就是往回调，正数就是往后跳，但跳转的地方必须在浏览器里面有记录</p>\n</blockquote>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token comment">&lt;!--此处的to必须加上 v-bind ,否则无法将后面的对象读取出来--\x3e</span>\n <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{name:<span class="token punctuation">\'</span>a<span class="token punctuation">\'</span>}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>到a<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>\n <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{name:<span class="token punctuation">\'</span>b<span class="token punctuation">\'</span>}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>到b<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n    <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div>\n      &lt;el-button type="danger" @click="gob">点击到b&lt;/el-button>\n      &lt;/div></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n      <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>\n        <span class="token function">gob</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n          <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"/b"</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div>\n      &lt;el-button type="danger" @click="goa">点击到a&lt;/el-button>\n      &lt;/div></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n      <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>\n        <span class="token function">goa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n          <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"/a"</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n   <span class="token keyword">const</span> router <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n     <span class="token literal-property property">routes</span><span class="token operator">:</span><span class="token punctuation">[</span>\n       <span class="token punctuation">{</span><span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">"/a"</span><span class="token punctuation">,</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token literal-property property">component</span><span class="token operator">:</span>a<span class="token punctuation">}</span><span class="token punctuation">,</span>\n       <span class="token punctuation">{</span><span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">"/b"</span><span class="token punctuation">,</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token literal-property property">component</span><span class="token operator">:</span>b<span class="token punctuation">}</span><span class="token punctuation">,</span>\n     <span class="token punctuation">]</span>\n   <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n      router\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br></div></div><h3 id="_8-5-路由传参" tabindex="-1"><a class="header-anchor" href="#_8-5-路由传参" aria-hidden="true">#</a> 8-5.路由传参</h3>\n<blockquote>\n<p>应用场景：\n当我们需要在父组件向路由组件跳转的时候，就需要传递参数过去，比如说：我们点击一个按钮，要带信息查询一些数据显示到展示区的时候，父组件的参数就要一起传给子组件，在子组件处于created阶段的时候，就带着信息去数据库查询数据，查询到数据后，展示出来</p>\n</blockquote>\n<h4 id="_8-5-1-传统的-键值对传参" tabindex="-1"><a class="header-anchor" href="#_8-5-1-传统的-键值对传参" aria-hidden="true">#</a> 8-5-1.传统的?+键值对传参</h4>\n<blockquote>\n<p>传值：&lt;router-link to=&quot;/path?键=值&quot;          取值：  $route.query.键    这个耦合比较高，少用</p>\n<p>1.用传统的方式传参,并不影响路由的跳转\n2.通过uri传入的键值对,存放在当前路由的query对象里面,通过this.$route.query可以取到所有键值对的集合</p>\n</blockquote>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/hamapi?name=2233<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点击看蛤蟆皮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span>\n    //创建路由组件\n    const hamapi = {\n        template: `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n        哈哈\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>`,\n        //路由组件的本质就是组件,组件的本质就是vue实例,所以路由组件也有路由组件的生命周期\n        created() {\n            console.log("路由组件")\n            console.log(this)\n            //可以发现这个this.$route里面有一堆东西\n            console.log(this.$route.query)\n        }\n    }\n    //注册路由\n    const router = new VueRouter({\n        //指定路由规则\n        routes: [\n            {path: "/hamapi", component: hamapi}\n        ]\n    })\n    const vm = new Vue({\n        el: "#app",\n        data: {},\n        mounted() {\n            console.log("实例")\n            console.log(this)\n        },\n        router\n    })\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div><h4 id="_8-5-2-params占位符传参" tabindex="-1"><a class="header-anchor" href="#_8-5-2-params占位符传参" aria-hidden="true">#</a> 8-5-2.params占位符传参</h4>\n<blockquote>\n<p>传值  &lt;router-link to=&quot;/path/:占位&quot;             取值： $route.params.占位    这个耦合比较高，少用</p>\n<p>1.要想通过restful风格带参访问子路由，则必须在路由规则的path里面申明占位符，用:占位</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210506122403389" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210506122403389.png" data="aurora"></p>\n<h4 id="_8-5-3-props-true-传参" tabindex="-1"><a class="header-anchor" href="#_8-5-3-props-true-传参" aria-hidden="true">#</a> 8-5-3.{props:true}传参</h4>\n<blockquote>\n<p>布尔模式  通过设置props:true 解耦，可以像正常组件一样传参</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210506122523250" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210506122523250.png" data="aurora"></p>\n<h4 id="_8-5-4-props-对象-传参" tabindex="-1"><a class="header-anchor" href="#_8-5-4-props-对象-传参" aria-hidden="true">#</a> 8-5-4.{props:{对象}}传参</h4>\n<blockquote>\n<p>对象模式，可以像正常组件一样传参</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210506122609238" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210506122609238.png" data="aurora"></p>\n<h4 id="_8-5-5-函数模式传参" tabindex="-1"><a class="header-anchor" href="#_8-5-5-函数模式传参" aria-hidden="true">#</a> 8-5-5.函数模式传参</h4>\n<blockquote>\n<p>函数模式，传动态对象</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210506122644831" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210506122644831.png" data="aurora"></p>\n<h4 id="_8-5-6-总结" tabindex="-1"><a class="header-anchor" href="#_8-5-6-总结" aria-hidden="true">#</a> 8-5-6.总结</h4>\n<blockquote>\n<p>以上所有的传参方式，首推props的函数模式，因为它既能从restful风格的URI里面取值，又能从对象里面取值，同时还能解耦.</p>\n<p>5-1和5-2有耦合度高的问题，</p>\n<p>5-3只能读取restful风格里面的传参</p>\n<p>5-4不能读取restful风格的URI里面的传参</p>\n<p>5-5是完美的</p>\n</blockquote>\n<h3 id="_8-6-嵌套路由" tabindex="-1"><a class="header-anchor" href="#_8-6-嵌套路由" aria-hidden="true">#</a> 8-6.嵌套路由</h3>\n<blockquote>\n<p>应用场景：\n当我们进入一个页面的时候，只需要用户看到几个大的模块化的分类，而不应该让用户看到所有的分类细节，例如我们做的思维导图笔记，点击一个，可以弹出下面的一系列的东西，不点击就不展示。</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210508002918455" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210508002918455.png" data="aurora"></p>\n<p>实现方式：</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210508003023155" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210508003023155.png" data="aurora"></p>\n<p>具体代码</p>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token comment">&lt;!--父路由--\x3e</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>弓箭手<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/b<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>法师团<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n    <span class="token comment">//定义父级路由模块</span>\n    <span class="token keyword">const</span> routerA <span class="token operator">=</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"> &lt;div>\n           &lt;div>弓箭营&lt;/div>\n           &lt;router-link to="/a/a1">火系弓箭手&lt;/router-link>\n           &lt;router-link to="/a/a2">冰系弓箭手&lt;/router-link>\n           &lt;router-link to="/a/a3">强弩手&lt;/router-link>\n           &lt;div style="border: 1px solid red;width: 300px;height: 100px">\n             &lt;router-view>&lt;/router-view>\n           &lt;/div>\n          &lt;/div> </span><span class="token template-punctuation string">`</span></span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">const</span> routerB <span class="token operator">=</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div>\n          &lt;div>法师营&lt;/div>\n           &lt;router-link to="/b/b1">五行法师&lt;/router-link>\n           &lt;router-link to="/b/b2">亡灵法师&lt;/router-link>\n           &lt;router-link to="/b/b3">剧毒法师&lt;/router-link>\n           &lt;div style="border: 1px solid red;width: 300px;height: 100px">\n             &lt;router-view>&lt;/router-view>\n           &lt;/div>\n         &lt;/div> </span><span class="token template-punctuation string">`</span></span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">//定义次级路由模块</span>\n    <span class="token keyword">const</span> routerAa1 <span class="token operator">=</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div> &lt;p>火系弓箭手,英勇无敌&lt;/p> &lt;/div></span><span class="token template-punctuation string">`</span></span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">const</span> routerAa2 <span class="token operator">=</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div> &lt;p>冰系弓箭手,神勇无双&lt;/p> &lt;/div></span><span class="token template-punctuation string">`</span></span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">const</span> routerAa3 <span class="token operator">=</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div> &lt;p>强弩手,火力强劲&lt;/p> &lt;/div></span><span class="token template-punctuation string">`</span></span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">const</span> routerBb1 <span class="token operator">=</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div> &lt;p>五行法师,能力诡异&lt;/p> &lt;/div></span><span class="token template-punctuation string">`</span></span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">const</span> routerBb2 <span class="token operator">=</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div> &lt;p>亡灵法师,与骷髅为伍&lt;/p> &lt;/div></span><span class="token template-punctuation string">`</span></span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">const</span> routerBb3 <span class="token operator">=</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div> &lt;p>剧毒法师,毒术无双&lt;/p> &lt;/div></span><span class="token template-punctuation string">`</span></span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">//注册路由组件</span>\n    <span class="token keyword">let</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">routes</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n            <span class="token punctuation">{</span>\n                <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">\'/a\'</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> routerA<span class="token punctuation">,</span> <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n                    <span class="token punctuation">{</span><span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">\'/a/a1\'</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> routerAa1<span class="token punctuation">}</span><span class="token punctuation">,</span>\n                    <span class="token punctuation">{</span><span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">\'/a/a2\'</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> routerAa2<span class="token punctuation">}</span><span class="token punctuation">,</span>\n                    <span class="token punctuation">{</span><span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">\'/a/a3\'</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> routerAa3<span class="token punctuation">}</span><span class="token punctuation">,</span>\n                <span class="token punctuation">]</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token punctuation">{</span>\n                <span class="token comment">//在配置路由路线规则的时候,配置children属性,在里面写一堆子组件即可</span>\n                <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">\'/b\'</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> routerB<span class="token punctuation">,</span> <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n                    <span class="token punctuation">{</span><span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">\'/b/b1\'</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> routerBb1<span class="token punctuation">}</span><span class="token punctuation">,</span>\n                    <span class="token punctuation">{</span><span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">\'/b/b2\'</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> routerBb2<span class="token punctuation">}</span><span class="token punctuation">,</span>\n                    <span class="token punctuation">{</span><span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">\'/b/b3\'</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> routerBb3<span class="token punctuation">}</span><span class="token punctuation">,</span>\n                <span class="token punctuation">]</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">]</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\n    <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token comment">//将路由挂载到实例</span>\n        router\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br></div></div><h3 id="_8-7-命名路由" tabindex="-1"><a class="header-anchor" href="#_8-7-命名路由" aria-hidden="true">#</a> 8-7.命名路由</h3>\n<blockquote>\n<p>要解决的问题：</p>\n<p>不记得或者不想写路由的路径，这个时候就可以给<code>&lt;router-link &gt;</code>的to属性传入一个对象，在传入对象的同时，也可以进行传参，传参要解耦，得在路由规则里面配置<code>props:true</code>, 如果传入query对象，<code>this.$route.query</code>仍可读取query里面的东西</p>\n</blockquote>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token comment">&lt;!--注意,组件名必须是字符串--\x3e</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{name:<span class="token punctuation">\'</span>denglu<span class="token punctuation">\'</span>,query:{<span class="token punctuation">\'</span>hamapi<span class="token punctuation">\'</span>:<span class="token punctuation">\'</span>哈麻皮<span class="token punctuation">\'</span>}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{name:<span class="token punctuation">\'</span>zhuce<span class="token punctuation">\'</span>}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>注册<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>\n  <span class="token comment">&lt;!--出口--\x3e</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n  <span class="token comment">//定义路由组件</span>\n  <span class="token keyword">const</span> denglu <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div>登录&lt;/div></span><span class="token template-punctuation string">`</span></span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">const</span> zhuce <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div>注册&lt;/div></span><span class="token template-punctuation string">`</span></span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">//实例化路由</span>\n  <span class="token keyword">const</span>  router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token comment">//定义路由规则</span>\n    <span class="token literal-property property">routes</span><span class="token operator">:</span><span class="token punctuation">[</span>\n            <span class="token comment">/*注意,被命名的路由必须是字符串*/</span>\n      <span class="token punctuation">{</span><span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">"/denglu"</span><span class="token punctuation">,</span><span class="token literal-property property">component</span><span class="token operator">:</span>denglu<span class="token punctuation">,</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">\'denglu\'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">{</span><span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">"/zhuce"</span><span class="token punctuation">,</span><span class="token literal-property property">component</span><span class="token operator">:</span> zhuce<span class="token punctuation">,</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">\'zhuce\'</span><span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n        router\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><h3 id="_8-8-命名视图" tabindex="-1"><a class="header-anchor" href="#_8-8-命名视图" aria-hidden="true">#</a> 8-8.命名视图</h3>\n<blockquote>\n<p>要解决的问题：</p>\n<p>使用同一个路径，跳转不同的视图，比如路径为&quot;/&quot;的时候，要展示侧边栏，头部，尾部，主视图</p>\n</blockquote>\n<p>页面结构</p>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n<span class="token comment">&lt;!--入口--\x3e</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>\n    <span class="token comment">&lt;!--出口--\x3e</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tou<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>zhuye<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>leftsider<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rightsider<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wei<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n    <span class="token comment">//定义路由</span>\n    <span class="token keyword">const</span> tou <span class="token operator">=</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div class="tou">头部&lt;/div></span><span class="token template-punctuation string">`</span></span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">const</span> wei <span class="token operator">=</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div class="wei">尾部&lt;/div></span><span class="token template-punctuation string">`</span></span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">const</span> leftsider <span class="token operator">=</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div class="leftsider">左侧&lt;/div></span><span class="token template-punctuation string">`</span></span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">const</span> rightsider <span class="token operator">=</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div class="rightsider">主视图&lt;/div></span><span class="token template-punctuation string">`</span></span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">//实例化路由,定义路由规则</span>\n    <span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token comment">//定义规则</span>\n        <span class="token literal-property property">routes</span><span class="token operator">:</span><span class="token punctuation">[</span>\n            <span class="token punctuation">{</span><span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">\'/\'</span><span class="token punctuation">,</span><span class="token literal-property property">components</span><span class="token operator">:</span><span class="token punctuation">{</span>\n                <span class="token keyword">default</span><span class="token operator">:</span>rightsider<span class="token punctuation">,</span>\n                    tou<span class="token punctuation">,</span>\n                    wei<span class="token punctuation">,</span>\n                    leftsider<span class="token punctuation">,</span>\n                    rightsider\n                <span class="token punctuation">}</span><span class="token punctuation">}</span>\n        <span class="token punctuation">]</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n        router\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br></div></div><p>样式</p>\n<div class="language-less ext-less line-numbers-mode"><pre v-pre class="language-less"><code><span class="token comment">/*样式*/</span>\n<span class="token selector">.tou</span><span class="token punctuation">{</span>\n  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>\n   <span class="token property">background</span><span class="token punctuation">:</span> darkmagenta<span class="token punctuation">;</span>\n  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>\n  <span class="token property">align-self</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token selector">.zhuye</span><span class="token punctuation">{</span>\n  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>\n  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>\n  <span class="token selector">.leftsider</span><span class="token punctuation">{</span>\n    <span class="token property">flex</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>\n    <span class="token property">background</span><span class="token punctuation">:</span> #5daf34<span class="token punctuation">;</span>\n    <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token selector">.rightsider</span><span class="token punctuation">{</span>\n    <span class="token property">flex</span><span class="token punctuation">:</span> 9<span class="token punctuation">;</span>\n    <span class="token property">background</span><span class="token punctuation">:</span> #bcbec2<span class="token punctuation">;</span>\n    <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token selector">.wei</span><span class="token punctuation">{</span>\n  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> #f750c6<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><h3 id="_8-9-路由中监视当前路由的路径" tabindex="-1"><a class="header-anchor" href="#_8-9-路由中监视当前路由的路径" aria-hidden="true">#</a> 8-9.路由中监视当前路由的路径</h3>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n<span class="token comment">&lt;!--7设置路由链接--\x3e</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">active-class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hamapi<span class="token punctuation">"</span></span> <span class="token attr-name">tag</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span>  <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/login<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span>\n    <span class="token comment">&lt;!--8设置路由出口--\x3e</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n    <span class="token comment">//3定义一个路由组件</span>\n    <span class="token keyword">const</span> luyou1 <span class="token operator">=</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div>这是个路由组件&lt;/div></span><span class="token template-punctuation string">`</span></span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">//4实例化路由</span>\n    <span class="token keyword">let</span> router <span class="token operator">=</span> <span class="token keyword">new</span>  <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token comment">//5.定义路由规则</span>\n        <span class="token literal-property property">routes</span><span class="token operator">:</span><span class="token punctuation">[</span>\n            <span class="token punctuation">{</span><span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">"/login"</span><span class="token punctuation">,</span><span class="token literal-property property">component</span><span class="token operator">:</span>luyou1<span class="token punctuation">}</span>\n        <span class="token punctuation">]</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n    <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token comment">//6.挂载路由</span>\n        router<span class="token punctuation">,</span>\n        <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token comment">//这里是刷新的时候就可以监视得到</span>\n            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"mounted中监视到的当前路由的路径:  "</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>path<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">watch</span><span class="token operator">:</span><span class="token punctuation">{</span>\n            <span class="token comment">//监视当前路由的路径===这种监视,只能是在切换的瞬间才能监视得到</span>\n           <span class="token string-property property">\'$route.path\'</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">newValue</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">{</span>\n               console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"watch侦听器中监视到的当前路由的路径: "</span><span class="token punctuation">,</span>newValue<span class="token punctuation">)</span>\n           <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br></div></div><h2 id="_9-前端工程化" tabindex="-1"><a class="header-anchor" href="#_9-前端工程化" aria-hidden="true">#</a> 9.前端工程化</h2>\n<h3 id="各种方式搭建脚手架" tabindex="-1"><a class="header-anchor" href="#各种方式搭建脚手架" aria-hidden="true">#</a> 各种方式搭建脚手架</h3>\n<h4 id="_1使用命令行创建项目" tabindex="-1"><a class="header-anchor" href="#_1使用命令行创建项目" aria-hidden="true">#</a> 1使用命令行创建项目</h4>\n<blockquote>\n<p>官网资料：https://cli.vuejs.org/zh/guide/prototyping.html</p>\n</blockquote>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token comment">#安装vue-cli</span>\n<span class="token function">npm</span> <span class="token function">install</span> -g @vue/cli\n<span class="token comment">#安装完毕可以通过 vue --version查看版本号，不要纠结具体的版本号，因为这里的版本经常更新，每次都不一样</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210513103209616" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210513103209616.png" data="aurora"></p>\n<blockquote>\n<p>使用：\n1、在一个空的文件夹，按住shift+鼠标右键，选择在此处打开powershell</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210513103652342" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210513103652342.png" data="aurora"></p>\n<blockquote>\n<p>2、输入    vue create  工程名(只能小写)</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210513103902067" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210513103902067.png" data="aurora"></p>\n<blockquote>\n<p>3、选择  后来的版本要求选择vue版本，就选2.x   回车，这里这个use history选n</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210513103940295" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210513103940295.png" data="aurora"></p>\n<blockquote>\n<p>4、创建成功\n可以按最下方提示的命令进入目录和启动项目</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210513104053079" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210513104053079.png" data="aurora"></p>\n<blockquote>\n<p>5、观察目录\n目录比vue-cli  2.xx这个版本更加精简</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210513104313944" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210513104313944.png" data="aurora"></p>\n<blockquote>\n<p>6、npm run serve  # 启动项目 这个是vue-cli 创建完毕后自己会提醒你的</p>\n<p>7、但是作为后台开发人员一般使用下面的方式</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210513104201661" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210513104201661.png" data="aurora"></p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210513104612115" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210513104612115.png" data="aurora"></p>\n<blockquote>\n<p>8、启动项目后，可以看到以下页面</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210513104753378" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210513104753378.png" data="aurora"></p>\n<h4 id="_2使用gui搭建脚手架" tabindex="-1"><a class="header-anchor" href="#_2使用gui搭建脚手架" aria-hidden="true">#</a> 2使用GUI搭建脚手架</h4>\n<blockquote>\n<p>不推荐这种方式，因为这种方式搭建的脚手架，容易出问题</p>\n</blockquote>\n<blockquote>\n<p>1在命令行输入指令  vue  ui</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210513105015914" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210513105015914.png" data="aurora"></p>\n<blockquote>\n<p>2然后一路跟着提示往下操作即可，注意，使用webstrom开发的话，就不要选择eslint了</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210513105101375" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210513105101375.png" data="aurora"></p>\n<h4 id="_3使用idea-webstorm等jetbrains系列软件搭建脚手架" tabindex="-1"><a class="header-anchor" href="#_3使用idea-webstorm等jetbrains系列软件搭建脚手架" aria-hidden="true">#</a> 3使用IDEA webstorm等jetbrains系列软件搭建脚手架</h4>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210513105353026" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210513105353026.png" data="aurora"></p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210513105410370" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210513105410370.png" data="aurora"></p>\n<h4 id="_4使用hbuilder创建搭建脚手架" tabindex="-1"><a class="header-anchor" href="#_4使用hbuilder创建搭建脚手架" aria-hidden="true">#</a> 4使用HBuilder创建搭建脚手架</h4>\n<blockquote>\n<p>直接使用HBuilderX，创建一个工程，然后使用IDEA或者webstorm打开</p>\n</blockquote>\n<h4 id="_5使用powershell的时候的坑" tabindex="-1"><a class="header-anchor" href="#_5使用powershell的时候的坑" aria-hidden="true">#</a> 5使用POWERSHELL的时候的坑</h4>\n<blockquote>\n<p>如果出现以下画面，就表明powershell没有操作权限</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210513105616040" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210513105616040.png" data="aurora"></p>\n<blockquote>\n<p>处理方法：</p>\n<p>1.随便找个文件夹，点击文件，以管理员身份打开powershell</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210513105647789" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210513105647789.png" data="aurora"></p>\n<blockquote>\n<p>2.输入指令： set-ExecutionPolicy RemoteSigned</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210513105747953" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210513105747953.png" data="aurora"></p>\n<h3 id="vue脚手架目录说明" tabindex="-1"><a class="header-anchor" href="#vue脚手架目录说明" aria-hidden="true">#</a> vue脚手架目录说明</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210513150835320" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210513150835320.png" data="aurora"></p>\n<h3 id="_9-0-项目基础配置" tabindex="-1"><a class="header-anchor" href="#_9-0-项目基础配置" aria-hidden="true">#</a> 9-0.项目基础配置</h3>\n<p>官方原文</p>\n<p>https://cli.vuejs.org/zh/config/#vue-config-js</p>\n<blockquote>\n<p><code>vue.config.js</code> 是一个可选的配置文件，如果项目的 (和 <code>package.json</code> 同级的) 根目录中存在这个文件，那么它会被 <code>@vue/cli-service</code> 自动加载。你也可以使用 <code>package.json</code> 中的 <code>vue</code> 字段，但是注意这种写法需要你严格遵照 JSON 的格式来写。</p>\n</blockquote>\n<p>范例代码---vue.config.js</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">//导出模块</span>\nmodule<span class="token punctuation">.</span>exports<span class="token operator">=</span><span class="token punctuation">{</span>\n    <span class="token comment">//开发时的配置</span>\n    <span class="token literal-property property">devServer</span><span class="token operator">:</span><span class="token punctuation">{</span>\n        <span class="token comment">//指定端口号</span>\n        <span class="token literal-property property">port</span><span class="token operator">:</span><span class="token number">9000</span><span class="token punctuation">,</span>\n        <span class="token comment">//自动打开默认浏览器</span>\n        <span class="token literal-property property">open</span><span class="token operator">:</span><span class="token boolean">true</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="_9-1-导入less" tabindex="-1"><a class="header-anchor" href="#_9-1-导入less" aria-hidden="true">#</a> 9-1.导入less</h3>\n<blockquote>\n<p>一般的方式不能导入less，因为版本不匹配，以下版本的less可以正常匹配 @vue/cli 4.5.11</p>\n<p>命令行：</p>\n</blockquote>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> less-loader@5.0.0 -s\n<span class="token function">npm</span> <span class="token function">install</span> less@3.9.0 -s\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><blockquote>\n<p>main.js</p>\n</blockquote>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">import</span> less <span class="token keyword">from</span> <span class="token string">\'less\'</span>\nVue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>less<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><blockquote>\n<p>vue单文件组件</p>\n</blockquote>\n<div class="language-vue ext-vue line-numbers-mode"><pre v-pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>less<span class="token punctuation">"</span></span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">\n<span class="token comment">/* lang是所用的语言   scoped表示只在当前组件生效 */</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_9-2-导入element" tabindex="-1"><a class="header-anchor" href="#_9-2-导入element" aria-hidden="true">#</a> 9-2.导入element</h3>\n<blockquote>\n<p>控制台</p>\n</blockquote>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token function">npm</span> i element-ui -S\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><blockquote>\n<p>main.js</p>\n</blockquote>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">import</span> ElementUI <span class="token keyword">from</span> <span class="token string">\'element-ui\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token string">\'element-ui/lib/theme-chalk/index.css\'</span><span class="token punctuation">;</span>\nVue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>ElementUI<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_9-3-两种不同的组件配置" tabindex="-1"><a class="header-anchor" href="#_9-3-两种不同的组件配置" aria-hidden="true">#</a> 9-3.两种不同的组件配置</h3>\n<h4 id="_9-3-1-显示路由组件" tabindex="-1"><a class="header-anchor" href="#_9-3-1-显示路由组件" aria-hidden="true">#</a> 9-3-1.显示路由组件</h4>\n<blockquote>\n<p>编写组件</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210513165615517" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210513165615517.png" data="aurora"></p>\n<blockquote>\n<p>将路由组件组装到路由器</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210513171036712" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210513171036712.png" data="aurora"></p>\n<h4 id="_9-3-2-显示普通组件" tabindex="-1"><a class="header-anchor" href="#_9-3-2-显示普通组件" aria-hidden="true">#</a> 9-3-2.显示普通组件</h4>\n<blockquote>\n<p>编写自定义组件</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210513165206156" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210513165206156.png" data="aurora"></p>\n<blockquote>\n<p>将自定义组件组装到视图</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210513165322013" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210513165322013.png" data="aurora"></p>\n<h3 id="_9-4-较为全面的路由配置" tabindex="-1"><a class="header-anchor" href="#_9-4-较为全面的路由配置" aria-hidden="true">#</a> 9-4.较为全面的路由配置</h3>\n<blockquote>\n<p>下面是  /router/index.js   或者  router.js 里面的内容  这两种命名方式比较符合见名知意的规则</p>\n</blockquote>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">\'vue\'</span>\n<span class="token keyword">import</span> VueRouter <span class="token keyword">from</span> <span class="token string">\'vue-router\'</span>\n<span class="token keyword">import</span> Login <span class="token keyword">from</span> <span class="token string">"../views/Login"</span><span class="token punctuation">;</span>\n<span class="token comment">//引入home页面</span>\n<span class="token keyword">import</span> Home <span class="token keyword">from</span> <span class="token string">"../views/Home"</span><span class="token punctuation">;</span>\n<span class="token comment">//引入welcome组件</span>\n<span class="token keyword">import</span> Welcome <span class="token keyword">from</span> <span class="token string">"../components/Welcome"</span><span class="token punctuation">;</span>\n<span class="token comment">/*\n省略一大堆的其他组件的引入\n*/</span>\n\nVue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueRouter<span class="token punctuation">)</span>\n\n<span class="token comment">//配置路由规则</span>\n<span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span><span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token literal-property property">redirect</span><span class="token operator">:</span> <span class="token string">"/login"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span><span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/login"</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> Login<span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token comment">//将home添加到路由规则---下面就是个纯粹的单页面应用</span>\n    <span class="token punctuation">{</span>\n        <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/home"</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> Home<span class="token punctuation">,</span>\n        <span class="token literal-property property">redirect</span><span class="token operator">:</span> <span class="token string">"/welcome"</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n            <span class="token punctuation">{</span><span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">"/welcome"</span><span class="token punctuation">,</span><span class="token literal-property property">component</span><span class="token operator">:</span>Welcome<span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token comment">//配置用户管理的路由</span>\n            <span class="token punctuation">{</span><span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/users"</span><span class="token punctuation">,</span><span class="token literal-property property">component</span><span class="token operator">:</span> Users<span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token comment">/*\n            省略一大堆其他子路由的配置\n            */</span>\n        <span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">]</span>\n<span class="token comment">//命名实例化后的路由</span>\n<span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    routes\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token comment">//配置全局前置守卫 对请求进行拦截</span>\nrouter<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token comment">/*\n    * to: Route: 即将要进入的目标 路由对象\n      from: Route: 当前导航正要离开的路由\n      next: Function: 一定要调用该方法来 resolve 这个钩子。执行效果依赖 next 方法的调用参数。\n    * */</span>\n    <span class="token comment">//如果访问的是登陆页面,就直接放行</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>to<span class="token punctuation">.</span>path <span class="token operator">===</span> <span class="token string">"/login"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">//如果要访问其他页面,就先获取token,如果token不为空,就放行,否则就强制跳转到登录页面</span>\n    <span class="token keyword">const</span> token <span class="token operator">=</span> window<span class="token punctuation">.</span>sessionStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">\'token\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//判断token是否为空</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>token<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// Message.error("你没有登陆,无权访问本页面,已为你跳转到登陆页面")</span>\n        <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token string">"login"</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token comment">//dochain</span>\n        <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token comment">//导出路由</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> router\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br></div></div><blockquote>\n<p>main.js的路由相关处理</p>\n</blockquote>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">//从router文件引入路由</span>\n<span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">\'./router\'</span>\n<span class="token comment">//使用路由</span>\n<span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    router<span class="token punctuation">,</span>\n    <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token parameter">h</span> <span class="token operator">=></span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">\'#app\'</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>9-4.导入组件</p>\n<div class="language-vue ext-vue line-numbers-mode"><pre v-pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>\n<span class="token comment">&lt;!-- 为了确保单根性,这里直接在template标签里面放置DIV防止出错  --\x3e</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n    <span class="token comment">&lt;!-- 组件在这里使用  --\x3e</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jiacheng</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>jiacheng</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n<span class="token comment">//一个组件要想被使用,得先import进来</span>\n<span class="token keyword">import</span> Jiacheng <span class="token keyword">from</span> <span class="token string">"./components/Jiacheng"</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  <span class="token comment">/*这里面都是写vue的各种选项的,什么data,components,methods...之类的*/</span>\n  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">\'App\'</span><span class="token punctuation">,</span>\n  <span class="token comment">//components 里面放上面import 进来的组件</span>\n  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    Jiacheng\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>less<span class="token punctuation">"</span></span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">\n<span class="token comment">/*这里面都是写样式的 */</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div>',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/vue/vue.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"vue",filePath:"D:/blog/docs/vue/vue.md",filePathRelative:"vue/vue.md",componentFilePath:"D:/blog/docs/.vuepress/.temp/pages/vue/vue.html.vue",componentFilePathRelative:"pages/vue/vue.html.vue",componentFileChunkName:"v-13c9aef5",dataFilePath:"D:/blog/docs/.vuepress/.temp/pages/vue/vue.html.js",dataFilePathRelative:"pages/vue/vue.html.js",dataFileChunkName:"v-13c9aef5",htmlFilePath:"D:/blog/docs/.vuepress/dist/vue/vue.html",htmlFilePathRelative:"vue/vue.html"},{data:{key:"v-57ee40a5",path:"/vue/Vuex.html",title:"Vuex",lang:"zh-CN",frontmatter:{title:"Vuex",date:"2022/9/2 09:59",tag:["vuex"],categories:["前端"],coverUrl:"https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vuex/flow.png"},excerpt:"",headers:[{level:2,title:"1.概述",slug:"_1-概述",children:[{level:3,title:"1-0.回顾组件之间共享数据的方式",slug:"_1-0-回顾组件之间共享数据的方式",children:[]},{level:3,title:"1-1.Vuex是什么",slug:"_1-1-vuex是什么",children:[]},{level:3,title:"1-2.使用Vuex统一管理状态的好处",slug:"_1-2-使用vuex统一管理状态的好处",children:[]},{level:3,title:"1-3.Vuex中适合储存什么",slug:"_1-3-vuex中适合储存什么",children:[]}]},{level:2,title:"2.初识Vuex",slug:"_2-初识vuex",children:[{level:3,title:"2-1.创建项目",slug:"_2-1-创建项目",children:[]},{level:3,title:"2-2.使用webstorm打开项目",slug:"_2-2-使用webstorm打开项目",children:[]},{level:3,title:"2-3.删除无关页面about",slug:"_2-3-删除无关页面about",children:[]},{level:3,title:"2-4.新增两个页面",slug:"_2-4-新增两个页面",children:[]},{level:3,title:"2-5.state",slug:"_2-5-state",children:[]},{level:3,title:"2-6.mutations",slug:"_2-6-mutations",children:[]},{level:3,title:"2-7.actions",slug:"_2-7-actions",children:[]},{level:3,title:"2-8.getter",slug:"_2-8-getter",children:[]}]}],git:{}},key:"v-57ee40a5",path:"/vue/Vuex.html",title:"Vuex",lang:"zh-CN",frontmatter:{title:"Vuex",date:"2022/9/2 09:59",tag:["vuex"],categories:["前端"],coverUrl:"https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vuex/flow.png"},excerpt:"",headers:[{level:2,title:"1.概述",slug:"_1-概述",children:[{level:3,title:"1-0.回顾组件之间共享数据的方式",slug:"_1-0-回顾组件之间共享数据的方式",children:[]},{level:3,title:"1-1.Vuex是什么",slug:"_1-1-vuex是什么",children:[]},{level:3,title:"1-2.使用Vuex统一管理状态的好处",slug:"_1-2-使用vuex统一管理状态的好处",children:[]},{level:3,title:"1-3.Vuex中适合储存什么",slug:"_1-3-vuex中适合储存什么",children:[]}]},{level:2,title:"2.初识Vuex",slug:"_2-初识vuex",children:[{level:3,title:"2-1.创建项目",slug:"_2-1-创建项目",children:[]},{level:3,title:"2-2.使用webstorm打开项目",slug:"_2-2-使用webstorm打开项目",children:[]},{level:3,title:"2-3.删除无关页面about",slug:"_2-3-删除无关页面about",children:[]},{level:3,title:"2-4.新增两个页面",slug:"_2-4-新增两个页面",children:[]},{level:3,title:"2-5.state",slug:"_2-5-state",children:[]},{level:3,title:"2-6.mutations",slug:"_2-6-mutations",children:[]},{level:3,title:"2-7.actions",slug:"_2-7-actions",children:[]},{level:3,title:"2-8.getter",slug:"_2-8-getter",children:[]}]}],content:"# Vuex\r\n\r\n## 1.概述\r\n\r\n### 1-0.回顾组件之间共享数据的方式\r\n\r\n父向子传值: v-bind属性绑定\r\n\r\n子向父传值: v-on事件绑定\r\n\r\n兄弟组件之间共享数据: 给兄弟们找个共同的爸爸(注册中心)         $on接收数据的那个组件         $emit发送数据的那个组件\r\n\r\n> 以上这些方式，都仅仅适合小范围的数据传递，如果要频繁地，大范围的进行数据的共享，上述的方式就会很困难\r\n\r\n### 1-1.Vuex是什么\r\n\r\nVuex是实现组件全局状态(数据）管理的一种机制，可以方便的实现组件之间数据的共享。\r\n\r\n![img](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vuex/企业微信截图_1627911661439.png)\r\n\r\n### 1-2.使用Vuex统一管理状态的好处\r\n\r\n> 1.能够在vuex中集中管理共享的数据，易于开发和后期维护\r\n>\r\n> 2.能够高效地实现组件之间的数据共享，提高开发效率\r\n>\r\n> 3.能够在vuex中集中管理共享的数据，易于开发和后期维护能够高效地实现组件之间的数据共享，提高开发效率------所有引用了vuex里面的组件里面的数据都会自动更新，不需要手动刷新，只要vuex里面的数据发生变化，引用了这些数据的地方也会跟着变化\r\n\r\n### 1-3.Vuex中适合储存什么\r\n\r\n> 一般情况下，只有组件之间共享的数据，才有必要存储到vuex中;对于组件中的私有数据，依旧存储在组件自身的data中即可。\r\n\r\n\r\n\r\n## 2.初识Vuex\r\n\r\n### 2-1.创建项目\r\n\r\n> 找个空白的目录创建项目\r\n\r\n```shell\r\n#创建一个名为 vuex01的项目\r\nvue create vuex_01\r\n```\r\n\r\n![image-20210802215618702](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vuex/image-20210802215618702.png)\r\n\r\n> 选手动，选中后敲回车\r\n\r\n![image-20210802215942322](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vuex/image-20210802215942322.png)\r\n\r\n> 选择功能  “选择版本”    “babel”   “路由”  “vuex”  然后回车\r\n\r\n![image-20210802220125736](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vuex/image-20210802220125736.png)\r\n\r\n> 选择2版本的vue，然后回车\r\n\r\n![image-20210802220234731](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vuex/image-20210802220234731.png)\r\n\r\n> 这里问是不是使用历史模式，选择N，然后回车\r\n\r\n![image-20210802220424100](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vuex/image-20210802220424100.png)\r\n\r\n> 配置文件选择 package.json  然后回车\r\n\r\n![image-20210802220539985](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vuex/image-20210802220539985.png)\r\n\r\n> 是否保存为以后的模版，选N，然后回车\r\n\r\n![image-20210802220655208](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vuex/image-20210802220655208.png)\r\n\r\nok创建成功，如果一次没有成功，就多搞几次，搞得多了自然成功的可能性就大了\r\n\r\n![image-20210802232526616](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vuex/image-20210802232526616.png)\r\n\r\n### 2-2.使用webstorm打开项目\r\n\r\n> 以下是自动创建出来的项目\r\n\r\n![image-20210802234146785](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vuex/image-20210802234146785.png)\r\n\r\n如果是已有的工程，则需要增加一步，然后后面的玩法一致\r\n\r\n```sh\r\n#安装 vuex 到本工程\r\nnpm install vuex --save\r\n```\r\n\r\n#### 2-2-1.配置服务器\r\n\r\n![image-20210802234502876](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vuex/image-20210802234502876.png)\r\n\r\n### 2-3.删除无关页面about\r\n\r\n> 删干净，router/index.js中要删除   Home中的要删除\r\n\r\n\r\n\r\n### 2-4.新增两个页面\r\n\r\n![image-20210802235835593](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vuex/image-20210802235835593.png)\r\n\r\nAddPage.vue\r\n\r\n```vue\r\n<template>\r\n  <div>\r\n    <h3>当前最新的count值为: {{}}</h3>\r\n    <button>点击-1</button>\r\n  </div>\r\n</template>\r\n```\r\n\r\nSubPage.vue\r\n\r\n```vue\r\n<template>\r\n  <div>\r\n    <h3>当前最新的count值为: {{}}</h3>\r\n    <button>点击+1</button>\r\n  </div>\r\n</template>\r\n```\r\n\r\n\r\n\r\n### 2-5.state\r\n\r\n> state提供唯一的公共数据源,所有的共享数据都要统一放到store中的state中进行储存\r\n\r\n在store/index.js中定义全局共享的数据\r\n\r\n```javascript\r\n//4.创建store对象并导出\r\nexport default new Vuex.Store({\r\n  //state提供唯一的公共数据源,所有的共享数据都要统一放到store中的state中进行储存\r\n  state: {\r\n    //count是全局共享的计数器\r\n    count:0\r\n  },\r\n}    \r\n```\r\n\r\n以上是共享数据的定义，定义好了之后就是访问，访问的方式有两种\r\n\r\n#### 2-5-1.第一种访问方式\r\n\r\n```javascript\r\n//在任何位置通过这个方式调用\r\nthis.$store.state.count\r\n```\r\n\r\n所以在addPage.vue中\r\n\r\n```vue\r\n<template>\r\n  <div>\r\n    \x3c!-- 在template中 {{this.$store.state.count}}里面的this可以省略  --\x3e\r\n    <h3>当前最新的count值为: {{$store.state.count}}</h3>\r\n    <button>点击+1</button>\r\n  </div>\r\n</template>\r\n```\r\n\r\n#### 2-5-2.第二种访问方式\r\n\r\n```javascript\r\n//1.从vuex中按需导入 mapState 函数\r\nimport {mapState} from 'vuex'\r\n  \r\n//2.将全局数据映射为当前组件的计算属性\r\n  computed:{\r\n    ...mapState(['count'])\r\n  }\r\n```\r\n\r\n所以在subPage.vue中\r\n\r\n```vue\r\n<template>\r\n  <div>\r\n    <h3>当前最新的count值为: {{count}}</h3>\r\n    <button>点击-1</button>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n//1.从vuex中按需导入 mapState 函数\r\nimport {mapState} from 'vuex'\r\nexport default {\r\n  name: \"SubPage\",\r\n  //2.将全局数据映射为当前组件的计算属性\r\n  computed:{\r\n    ...mapState(['count'])\r\n  }\r\n}\r\n<\/script>\r\n```\r\n\r\n\r\n\r\n### 2-6.mutations\r\n\r\n> mutations用于变更state中的数据\r\n>\r\n> **`仅允许通过mutations变更state中的数据,不可以直接操作store中的数据,因为通过这种方式操作数据,可以集中监控所有的数据变化`**\r\n>\r\n> **`mutations中仅允许使用同步方法，所有的异步操作均不能在这里使用，否则可能会导致数据错乱`**\r\n\r\n#### 2-6-1.定义对数据的操作\r\n\r\n> 在store/index.js中定义对数据的同步的修改\r\n\r\n```javascript\r\n//4.创建store对象并导出\r\nexport default new Vuex.Store({\r\n    //state提供唯一的公共数据源,所有的共享数据都要统一放到store中的state中进行储存\r\n    state: {\r\n        count: 0\r\n    },\r\n    //mutations 用于变更state中的数据,\r\n    mutations: {\r\n        //在mutations定义对state中的数据的操作\r\n        add(state,'参数(如果没带就不写)') {\r\n            //变更数据状态\r\n            state.count++\r\n        }\r\n    },\r\n}    \r\n```\r\n\r\n#### 2-6-2.调用mutations中的方法的方式一\r\n\r\n```js\r\n//不带参数\r\nthis.$store.commit('被调用方法')\r\n//带参数\r\nthis.$store.commit('被调用方法','参数')\r\n```\r\n\r\n所以addPage.vue的代码为\r\n\r\n```vue\r\n<template>\r\n  <div>\r\n    \x3c!-- 在template中 {{this.$store.state.count}}里面的this可以省略  --\x3e\r\n    <h3>当前最新的count值为: {{$store.state.count}}</h3>\r\n    <button @click=\"addHandler\">点击+1</button>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: \"addPage\",\r\n  methods:{\r\n    addHandler(){\r\n      this.$store.commit('add')\r\n    }\r\n  }\r\n}\r\n<\/script>\r\n```\r\n\r\n#### 2-6-2.调用mutations中的方法的方式二\r\n\r\n```js\r\n//1.从vuex中按需导入  mapMutations 函数\r\nimport {mapMutations} from 'vuex'\r\n\r\n//2.将指定的mapMutations函数映射为当前组件的methods函数\r\nmethods:{\r\n  ...mapMutations(['sub'])\r\n}\r\n```\r\n\r\n所以subPage.vue中的代码为\r\n\r\n```vue\r\n<template>\r\n  <div>\r\n    <h3>当前最新的count值为: {{count}}</h3>\r\n    <button @click=\"sub\">点击-1</button>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n//1.从vuex中按需导入 mapState mapMutations 函数\r\nimport {mapState,mapMutations} from 'vuex'\r\nexport default {\r\n  name: \"SubPage\",\r\n  //2.将全局数据映射为当前组件的计算属性\r\n  computed:{\r\n    ...mapState(['count'])\r\n  },\r\n  //将指定的mapMutations函数映射为当前组件的methods函数\r\n  methods:{\r\n    ...mapMutations(['sub'])\r\n  }\r\n}\r\n<\/script>\r\n```\r\n\r\n#### 效果\r\n\r\n![image-20210803003230114](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vuex/image-20210803003230114.png)\r\n\r\n\r\n\r\n### 2-7.actions\r\n\r\n> actions用来处理异步任务\r\n>\r\n> 如果通过异步操作变更数据，必须通过action，调用链为  action调用mutation, mutation调用state\r\n\r\n#### 2-7-1.定义异步操作\r\n\r\n```js\r\n//action用来处理异步任务\r\nactions: {\r\n    //异步的增加\r\n    addAsync(mutation) {\r\n        setTimeout(() => {\r\n            mutation.commit('add')\r\n        }, 1000)\r\n    },\r\n    //异步的减少\r\n    subAsync(mutation) {\r\n        setTimeout(() => {\r\n            mutation.commit('sub')\r\n        }, 1000)\r\n    }\r\n},\r\n```\r\n\r\n#### 2-7-2.调用异步操作方式一\r\n\r\n```js\r\nthis.$store.dispatch('具体的异步方法')\r\n```\r\n\r\n所以addPage页面的代码为\r\n\r\n```vue\r\n<template>\r\n  <div>\r\n    <button @click=\"addAsyncOne\">延时1秒+1</button>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  methods:{\r\n    addAsyncOne() {\r\n      this.$store.dispatch('addAsync')\r\n    }\r\n  }\r\n}\r\n<\/script>\r\n```\r\n\r\n#### 2-7-2.调用异步操作方式二\r\n\r\n```js\r\n//1.从vuex中按需导入 mapActions 函数\r\nimport {mapActions} from 'vuex'\r\n\r\n//2将指定的 mapActions 函数映射为当前组件的methods函数\r\nmethods:{\r\n  ...mapActions(['subAsync'])\r\n}\r\n```\r\n\r\n所以subPage页面的代码为\r\n\r\n```vue\r\n<template>\r\n  <div>\r\n    <button @click=\"subAsync\">延时1秒-1</button>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n//1.从vuex中按需导入 mapActions 函数\r\nimport {mapActions} from 'vuex'\r\nexport default {\r\n  //2将指定的mapMutations函数映射为当前组件的methods函数\r\n  methods:{\r\n    ...mapActions(['subAsync'])\r\n  }\r\n}\r\n<\/script>\r\n```\r\n\r\n#### 效果\r\n\r\n![image-20210803004710926](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vuex/image-20210803004710926.png)\r\n\r\n\r\n\r\n### 2-8.getter\r\n\r\n> getter用于对store中的数据加工处理形成新的数据\r\n>\r\n> **Getter可以对Store 中已有的数据加工处理之后形成新的数据，类似Vue的计算属性。**\r\n>\r\n> **Store 中数据发生变化，Getter的数据也会跟着变化。**\r\n\r\n#### 2-8-1.定义getter\r\n\r\n```js\r\n//4.创建store对象并导出\r\nexport default new Vuex.Store({\r\n    //state提供唯一的公共数据源,所有的共享数据都要统一放到store中的state中进行储存\r\n    state: {\r\n        count: 0\r\n    },\r\n    //mutations 用于变更state中的数据,\r\n    mutations: {\r\n    },\r\n    //action用来处理异步任务\r\n    actions: {\r\n    },\r\n    //getter用于对store中的数据加工处理形成新的数据\r\n    getters:{\r\n        showCount(state){\r\n            return '当前计数器的值为: ['+ state.count+']'\r\n        }\r\n    },\r\n    //\r\n    modules: {}\r\n})\r\n\r\n```\r\n\r\n#### 2-8-2.getter取值方式一\r\n\r\n```js\r\nthis.$store.getters.名称\r\n```\r\n\r\n所以addPage的代码为\r\n\r\n```vue\r\n<template>\r\n  <div>\r\n    <h3>当前最新的count值为: {{$store.getters.showCount}}</h3>\r\n  </div>\r\n</template>\r\n```\r\n\r\n#### 2-8-3.getter取值方式二\r\n\r\n```js\r\n//1.从vuex中按需导入mapGetters 函数\r\nimport {mapGetters} from 'vuex'\r\n\r\n//2.将全局数据映射为当前组件的计算属性\r\ncomputed:{\r\n  ...mapGetters(['showCount'])\r\n},\r\n```\r\n\r\n所以subPage页面的代码为\r\n\r\n```vue\r\n<template>\r\n  <div>\r\n    <h3>当前最新的count值为: {{showCount}}</h3>\r\n    <button @click=\"sub\">点击-1</button>\r\n    <br>\r\n    <button @click=\"subAsync\">延时1秒-1</button>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n//1.从vuex中按需导入 mapState mapMutations 函数\r\nimport {mapState,mapMutations,mapActions,mapGetters} from 'vuex'\r\nexport default {\r\n  name: \"SubPage\",\r\n  //2.将全局数据映射为当前组件的计算属性\r\n  computed:{\r\n    ...mapState(['count']),\r\n    ...mapGetters(['showCount'])\r\n  },\r\n  //2将指定的mapMutations函数映射为当前组件的methods函数\r\n  methods:{\r\n    ...mapMutations(['sub']),\r\n    ...mapActions(['subAsync'])\r\n  }\r\n}\r\n<\/script>\r\n```\r\n\r\n#### 效果\r\n\r\n![image-20210803010234599](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vuex/image-20210803010234599.png)",contentRendered:'<h1 id="vuex" tabindex="-1"><a class="header-anchor" href="#vuex" aria-hidden="true">#</a> Vuex</h1>\n<h2 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述" aria-hidden="true">#</a> 1.概述</h2>\n<h3 id="_1-0-回顾组件之间共享数据的方式" tabindex="-1"><a class="header-anchor" href="#_1-0-回顾组件之间共享数据的方式" aria-hidden="true">#</a> 1-0.回顾组件之间共享数据的方式</h3>\n<p>父向子传值: v-bind属性绑定</p>\n<p>子向父传值: v-on事件绑定</p>\n<p>兄弟组件之间共享数据: 给兄弟们找个共同的爸爸(注册中心)         $on接收数据的那个组件         $emit发送数据的那个组件</p>\n<blockquote>\n<p>以上这些方式，都仅仅适合小范围的数据传递，如果要频繁地，大范围的进行数据的共享，上述的方式就会很困难</p>\n</blockquote>\n<h3 id="_1-1-vuex是什么" tabindex="-1"><a class="header-anchor" href="#_1-1-vuex是什么" aria-hidden="true">#</a> 1-1.Vuex是什么</h3>\n<p>Vuex是实现组件全局状态(数据）管理的一种机制，可以方便的实现组件之间数据的共享。</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vuex/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_1627911661439.png" data="aurora"></p>\n<h3 id="_1-2-使用vuex统一管理状态的好处" tabindex="-1"><a class="header-anchor" href="#_1-2-使用vuex统一管理状态的好处" aria-hidden="true">#</a> 1-2.使用Vuex统一管理状态的好处</h3>\n<blockquote>\n<p>1.能够在vuex中集中管理共享的数据，易于开发和后期维护</p>\n<p>2.能够高效地实现组件之间的数据共享，提高开发效率</p>\n<p>3.能够在vuex中集中管理共享的数据，易于开发和后期维护能够高效地实现组件之间的数据共享，提高开发效率------所有引用了vuex里面的组件里面的数据都会自动更新，不需要手动刷新，只要vuex里面的数据发生变化，引用了这些数据的地方也会跟着变化</p>\n</blockquote>\n<h3 id="_1-3-vuex中适合储存什么" tabindex="-1"><a class="header-anchor" href="#_1-3-vuex中适合储存什么" aria-hidden="true">#</a> 1-3.Vuex中适合储存什么</h3>\n<blockquote>\n<p>一般情况下，只有组件之间共享的数据，才有必要存储到vuex中;对于组件中的私有数据，依旧存储在组件自身的data中即可。</p>\n</blockquote>\n<h2 id="_2-初识vuex" tabindex="-1"><a class="header-anchor" href="#_2-初识vuex" aria-hidden="true">#</a> 2.初识Vuex</h2>\n<h3 id="_2-1-创建项目" tabindex="-1"><a class="header-anchor" href="#_2-1-创建项目" aria-hidden="true">#</a> 2-1.创建项目</h3>\n<blockquote>\n<p>找个空白的目录创建项目</p>\n</blockquote>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token comment">#创建一个名为 vuex01的项目</span>\nvue create vuex_01\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210802215618702" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vuex/image-20210802215618702.png" data="aurora"></p>\n<blockquote>\n<p>选手动，选中后敲回车</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210802215942322" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vuex/image-20210802215942322.png" data="aurora"></p>\n<blockquote>\n<p>选择功能  “选择版本”    “babel”   “路由”  “vuex”  然后回车</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210802220125736" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vuex/image-20210802220125736.png" data="aurora"></p>\n<blockquote>\n<p>选择2版本的vue，然后回车</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210802220234731" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vuex/image-20210802220234731.png" data="aurora"></p>\n<blockquote>\n<p>这里问是不是使用历史模式，选择N，然后回车</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210802220424100" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vuex/image-20210802220424100.png" data="aurora"></p>\n<blockquote>\n<p>配置文件选择 package.json  然后回车</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210802220539985" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vuex/image-20210802220539985.png" data="aurora"></p>\n<blockquote>\n<p>是否保存为以后的模版，选N，然后回车</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210802220655208" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vuex/image-20210802220655208.png" data="aurora"></p>\n<p>ok创建成功，如果一次没有成功，就多搞几次，搞得多了自然成功的可能性就大了</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210802232526616" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vuex/image-20210802232526616.png" data="aurora"></p>\n<h3 id="_2-2-使用webstorm打开项目" tabindex="-1"><a class="header-anchor" href="#_2-2-使用webstorm打开项目" aria-hidden="true">#</a> 2-2.使用webstorm打开项目</h3>\n<blockquote>\n<p>以下是自动创建出来的项目</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210802234146785" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vuex/image-20210802234146785.png" data="aurora"></p>\n<p>如果是已有的工程，则需要增加一步，然后后面的玩法一致</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token comment">#安装 vuex 到本工程</span>\n<span class="token function">npm</span> <span class="token function">install</span> vuex --save\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="_2-2-1-配置服务器" tabindex="-1"><a class="header-anchor" href="#_2-2-1-配置服务器" aria-hidden="true">#</a> 2-2-1.配置服务器</h4>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210802234502876" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vuex/image-20210802234502876.png" data="aurora"></p>\n<h3 id="_2-3-删除无关页面about" tabindex="-1"><a class="header-anchor" href="#_2-3-删除无关页面about" aria-hidden="true">#</a> 2-3.删除无关页面about</h3>\n<blockquote>\n<p>删干净，router/index.js中要删除   Home中的要删除</p>\n</blockquote>\n<h3 id="_2-4-新增两个页面" tabindex="-1"><a class="header-anchor" href="#_2-4-新增两个页面" aria-hidden="true">#</a> 2-4.新增两个页面</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210802235835593" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vuex/image-20210802235835593.png" data="aurora"></p>\n<p>AddPage.vue</p>\n<div class="language-vue ext-vue line-numbers-mode"><pre v-pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>当前最新的count值为: {{}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>点击-1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>SubPage.vue</p>\n<div class="language-vue ext-vue line-numbers-mode"><pre v-pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>当前最新的count值为: {{}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>点击+1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="_2-5-state" tabindex="-1"><a class="header-anchor" href="#_2-5-state" aria-hidden="true">#</a> 2-5.state</h3>\n<blockquote>\n<p>state提供唯一的公共数据源,所有的共享数据都要统一放到store中的state中进行储存</p>\n</blockquote>\n<p>在store/index.js中定义全局共享的数据</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">//4.创建store对象并导出</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token comment">//state提供唯一的公共数据源,所有的共享数据都要统一放到store中的state中进行储存</span>\n  <span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">//count是全局共享的计数器</span>\n    <span class="token literal-property property">count</span><span class="token operator">:</span><span class="token number">0</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>    \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>以上是共享数据的定义，定义好了之后就是访问，访问的方式有两种</p>\n<h4 id="_2-5-1-第一种访问方式" tabindex="-1"><a class="header-anchor" href="#_2-5-1-第一种访问方式" aria-hidden="true">#</a> 2-5-1.第一种访问方式</h4>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">//在任何位置通过这个方式调用</span>\n<span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>count\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>所以在addPage.vue中</p>\n<div class="language-vue ext-vue line-numbers-mode"><pre v-pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n    <span class="token comment">&lt;!-- 在template中 {{this.$store.state.count}}里面的this可以省略  --\x3e</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>当前最新的count值为: {{$store.state.count}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>点击+1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h4 id="_2-5-2-第二种访问方式" tabindex="-1"><a class="header-anchor" href="#_2-5-2-第二种访问方式" aria-hidden="true">#</a> 2-5-2.第二种访问方式</h4>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">//1.从vuex中按需导入 mapState 函数</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span>mapState<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'vuex\'</span>\n  \n<span class="token comment">//2.将全局数据映射为当前组件的计算属性</span>\n  <span class="token literal-property property">computed</span><span class="token operator">:</span><span class="token punctuation">{</span>\n    <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">\'count\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>所以在subPage.vue中</p>\n<div class="language-vue ext-vue line-numbers-mode"><pre v-pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>当前最新的count值为: {{count}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>点击-1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n<span class="token comment">//1.从vuex中按需导入 mapState 函数</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span>mapState<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'vuex\'</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"SubPage"</span><span class="token punctuation">,</span>\n  <span class="token comment">//2.将全局数据映射为当前组件的计算属性</span>\n  <span class="token literal-property property">computed</span><span class="token operator">:</span><span class="token punctuation">{</span>\n    <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">\'count\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h3 id="_2-6-mutations" tabindex="-1"><a class="header-anchor" href="#_2-6-mutations" aria-hidden="true">#</a> 2-6.mutations</h3>\n<blockquote>\n<p>mutations用于变更state中的数据</p>\n<p><strong><code>仅允许通过mutations变更state中的数据,不可以直接操作store中的数据,因为通过这种方式操作数据,可以集中监控所有的数据变化</code></strong></p>\n<p><strong><code>mutations中仅允许使用同步方法，所有的异步操作均不能在这里使用，否则可能会导致数据错乱</code></strong></p>\n</blockquote>\n<h4 id="_2-6-1-定义对数据的操作" tabindex="-1"><a class="header-anchor" href="#_2-6-1-定义对数据的操作" aria-hidden="true">#</a> 2-6-1.定义对数据的操作</h4>\n<blockquote>\n<p>在store/index.js中定义对数据的同步的修改</p>\n</blockquote>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">//4.创建store对象并导出</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token comment">//state提供唯一的公共数据源,所有的共享数据都要统一放到store中的state中进行储存</span>\n    <span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token comment">//mutations 用于变更state中的数据,</span>\n    <span class="token literal-property property">mutations</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token comment">//在mutations定义对state中的数据的操作</span>\n        <span class="token function">add</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span><span class="token string">\'参数(如果没带就不写)\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">//变更数据状态</span>\n            state<span class="token punctuation">.</span>count<span class="token operator">++</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>    \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h4 id="_2-6-2-调用mutations中的方法的方式一" tabindex="-1"><a class="header-anchor" href="#_2-6-2-调用mutations中的方法的方式一" aria-hidden="true">#</a> 2-6-2.调用mutations中的方法的方式一</h4>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">//不带参数</span>\n<span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">\'被调用方法\'</span><span class="token punctuation">)</span>\n<span class="token comment">//带参数</span>\n<span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">\'被调用方法\'</span><span class="token punctuation">,</span><span class="token string">\'参数\'</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>所以addPage.vue的代码为</p>\n<div class="language-vue ext-vue line-numbers-mode"><pre v-pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n    <span class="token comment">&lt;!-- 在template中 {{this.$store.state.count}}里面的this可以省略  --\x3e</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>当前最新的count值为: {{$store.state.count}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>addHandler<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点击+1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"addPage"</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>\n    <span class="token function">addHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">\'add\'</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h4 id="_2-6-2-调用mutations中的方法的方式二" tabindex="-1"><a class="header-anchor" href="#_2-6-2-调用mutations中的方法的方式二" aria-hidden="true">#</a> 2-6-2.调用mutations中的方法的方式二</h4>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">//1.从vuex中按需导入  mapMutations 函数</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span>mapMutations<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'vuex\'</span>\n\n<span class="token comment">//2.将指定的mapMutations函数映射为当前组件的methods函数</span>\n<span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>\n  <span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">\'sub\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>所以subPage.vue中的代码为</p>\n<div class="language-vue ext-vue line-numbers-mode"><pre v-pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>当前最新的count值为: {{count}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sub<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点击-1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n<span class="token comment">//1.从vuex中按需导入 mapState mapMutations 函数</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span>mapState<span class="token punctuation">,</span>mapMutations<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'vuex\'</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"SubPage"</span><span class="token punctuation">,</span>\n  <span class="token comment">//2.将全局数据映射为当前组件的计算属性</span>\n  <span class="token literal-property property">computed</span><span class="token operator">:</span><span class="token punctuation">{</span>\n    <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">\'count\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token comment">//将指定的mapMutations函数映射为当前组件的methods函数</span>\n  <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>\n    <span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">\'sub\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h4 id="效果" tabindex="-1"><a class="header-anchor" href="#效果" aria-hidden="true">#</a> 效果</h4>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210803003230114" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vuex/image-20210803003230114.png" data="aurora"></p>\n<h3 id="_2-7-actions" tabindex="-1"><a class="header-anchor" href="#_2-7-actions" aria-hidden="true">#</a> 2-7.actions</h3>\n<blockquote>\n<p>actions用来处理异步任务</p>\n<p>如果通过异步操作变更数据，必须通过action，调用链为  action调用mutation, mutation调用state</p>\n</blockquote>\n<h4 id="_2-7-1-定义异步操作" tabindex="-1"><a class="header-anchor" href="#_2-7-1-定义异步操作" aria-hidden="true">#</a> 2-7-1.定义异步操作</h4>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">//action用来处理异步任务</span>\n<span class="token literal-property property">actions</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">//异步的增加</span>\n    <span class="token function">addAsync</span><span class="token punctuation">(</span><span class="token parameter">mutation</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n            mutation<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">\'add\'</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token comment">//异步的减少</span>\n    <span class="token function">subAsync</span><span class="token punctuation">(</span><span class="token parameter">mutation</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n            mutation<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">\'sub\'</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h4 id="_2-7-2-调用异步操作方式一" tabindex="-1"><a class="header-anchor" href="#_2-7-2-调用异步操作方式一" aria-hidden="true">#</a> 2-7-2.调用异步操作方式一</h4>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">\'具体的异步方法\'</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>所以addPage页面的代码为</p>\n<div class="language-vue ext-vue line-numbers-mode"><pre v-pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>addAsyncOne<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>延时1秒+1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>\n    <span class="token function">addAsyncOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">\'addAsync\'</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h4 id="_2-7-2-调用异步操作方式二" tabindex="-1"><a class="header-anchor" href="#_2-7-2-调用异步操作方式二" aria-hidden="true">#</a> 2-7-2.调用异步操作方式二</h4>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">//1.从vuex中按需导入 mapActions 函数</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span>mapActions<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'vuex\'</span>\n\n<span class="token comment">//2将指定的 mapActions 函数映射为当前组件的methods函数</span>\n<span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>\n  <span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">\'subAsync\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>所以subPage页面的代码为</p>\n<div class="language-vue ext-vue line-numbers-mode"><pre v-pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>subAsync<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>延时1秒-1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n<span class="token comment">//1.从vuex中按需导入 mapActions 函数</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span>mapActions<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'vuex\'</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  <span class="token comment">//2将指定的mapMutations函数映射为当前组件的methods函数</span>\n  <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>\n    <span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">\'subAsync\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h4 id="效果-1" tabindex="-1"><a class="header-anchor" href="#效果-1" aria-hidden="true">#</a> 效果</h4>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210803004710926" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vuex/image-20210803004710926.png" data="aurora"></p>\n<h3 id="_2-8-getter" tabindex="-1"><a class="header-anchor" href="#_2-8-getter" aria-hidden="true">#</a> 2-8.getter</h3>\n<blockquote>\n<p>getter用于对store中的数据加工处理形成新的数据</p>\n<p><strong>Getter可以对Store 中已有的数据加工处理之后形成新的数据，类似Vue的计算属性。</strong></p>\n<p><strong>Store 中数据发生变化，Getter的数据也会跟着变化。</strong></p>\n</blockquote>\n<h4 id="_2-8-1-定义getter" tabindex="-1"><a class="header-anchor" href="#_2-8-1-定义getter" aria-hidden="true">#</a> 2-8-1.定义getter</h4>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">//4.创建store对象并导出</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token comment">//state提供唯一的公共数据源,所有的共享数据都要统一放到store中的state中进行储存</span>\n    <span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token comment">//mutations 用于变更state中的数据,</span>\n    <span class="token literal-property property">mutations</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token comment">//action用来处理异步任务</span>\n    <span class="token literal-property property">actions</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token comment">//getter用于对store中的数据加工处理形成新的数据</span>\n    <span class="token literal-property property">getters</span><span class="token operator">:</span><span class="token punctuation">{</span>\n        <span class="token function">showCount</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token string">\'当前计数器的值为: [\'</span><span class="token operator">+</span> state<span class="token punctuation">.</span>count<span class="token operator">+</span><span class="token string">\']\'</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token comment">//</span>\n    <span class="token literal-property property">modules</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h4 id="_2-8-2-getter取值方式一" tabindex="-1"><a class="header-anchor" href="#_2-8-2-getter取值方式一" aria-hidden="true">#</a> 2-8-2.getter取值方式一</h4>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>getters<span class="token punctuation">.</span>名称\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>所以addPage的代码为</p>\n<div class="language-vue ext-vue line-numbers-mode"><pre v-pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>当前最新的count值为: {{$store.getters.showCount}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="_2-8-3-getter取值方式二" tabindex="-1"><a class="header-anchor" href="#_2-8-3-getter取值方式二" aria-hidden="true">#</a> 2-8-3.getter取值方式二</h4>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">//1.从vuex中按需导入mapGetters 函数</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span>mapGetters<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'vuex\'</span>\n\n<span class="token comment">//2.将全局数据映射为当前组件的计算属性</span>\n<span class="token literal-property property">computed</span><span class="token operator">:</span><span class="token punctuation">{</span>\n  <span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">\'showCount\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>所以subPage页面的代码为</p>\n<div class="language-vue ext-vue line-numbers-mode"><pre v-pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>当前最新的count值为: {{showCount}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sub<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点击-1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>subAsync<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>延时1秒-1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n<span class="token comment">//1.从vuex中按需导入 mapState mapMutations 函数</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span>mapState<span class="token punctuation">,</span>mapMutations<span class="token punctuation">,</span>mapActions<span class="token punctuation">,</span>mapGetters<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'vuex\'</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"SubPage"</span><span class="token punctuation">,</span>\n  <span class="token comment">//2.将全局数据映射为当前组件的计算属性</span>\n  <span class="token literal-property property">computed</span><span class="token operator">:</span><span class="token punctuation">{</span>\n    <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">\'count\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">\'showCount\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token comment">//2将指定的mapMutations函数映射为当前组件的methods函数</span>\n  <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>\n    <span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">\'sub\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">\'subAsync\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h4 id="效果-2" tabindex="-1"><a class="header-anchor" href="#效果-2" aria-hidden="true">#</a> 效果</h4>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210803010234599" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vuex/image-20210803010234599.png" data="aurora"></p>\n',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/vue/Vuex.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"Vuex",filePath:"D:/blog/docs/vue/Vuex.md",filePathRelative:"vue/Vuex.md",componentFilePath:"D:/blog/docs/.vuepress/.temp/pages/vue/Vuex.html.vue",componentFilePathRelative:"pages/vue/Vuex.html.vue",componentFileChunkName:"v-57ee40a5",dataFilePath:"D:/blog/docs/.vuepress/.temp/pages/vue/Vuex.html.js",dataFilePathRelative:"pages/vue/Vuex.html.js",dataFileChunkName:"v-57ee40a5",htmlFilePath:"D:/blog/docs/.vuepress/dist/vue/Vuex.html",htmlFilePathRelative:"vue/Vuex.html"},{data:{key:"v-3706649a",path:"/404.html",title:"",lang:"zh-CN",frontmatter:{layout:"404"},excerpt:"",headers:[],git:{}},key:"v-3706649a",path:"/404.html",title:"",lang:"zh-CN",frontmatter:{layout:"404"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"D:/blog/docs/.vuepress/.temp/pages/404.html.vue",componentFilePathRelative:"pages/404.html.vue",componentFileChunkName:"v-3706649a",dataFilePath:"D:/blog/docs/.vuepress/.temp/pages/404.html.js",dataFilePathRelative:"pages/404.html.js",dataFileChunkName:"v-3706649a",htmlFilePath:"D:/blog/docs/.vuepress/dist/404.html",htmlFilePathRelative:"404.html"},{data:{key:"v-8daa1a0e",path:"/",title:"",lang:"zh-CN",frontmatter:{layout:"Layout",home:!0},excerpt:"",headers:[],git:{}},key:"v-8daa1a0e",path:"/",title:"",lang:"zh-CN",frontmatter:{layout:"Layout",home:!0},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"D:/blog/docs/.vuepress/.temp/pages/index.html.vue",componentFilePathRelative:"pages/index.html.vue",componentFileChunkName:"v-8daa1a0e",dataFilePath:"D:/blog/docs/.vuepress/.temp/pages/index.html.js",dataFilePathRelative:"pages/index.html.js",dataFileChunkName:"v-8daa1a0e",htmlFilePath:"D:/blog/docs/.vuepress/dist/index.html",htmlFilePathRelative:"index.html"},{data:{key:"v-74bc627b",path:"/about/",title:"",lang:"zh-CN",frontmatter:{layout:"About",slug:"aurora-about"},excerpt:"",headers:[],git:{}},key:"v-74bc627b",path:"/about/",title:"",lang:"zh-CN",frontmatter:{layout:"About",slug:"aurora-about"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"D:/blog/docs/.vuepress/.temp/pages/about/index.html.vue",componentFilePathRelative:"pages/about/index.html.vue",componentFileChunkName:"v-74bc627b",dataFilePath:"D:/blog/docs/.vuepress/.temp/pages/about/index.html.js",dataFilePathRelative:"pages/about/index.html.js",dataFileChunkName:"v-74bc627b",htmlFilePath:"D:/blog/docs/.vuepress/dist/about/index.html",htmlFilePathRelative:"about/index.html"},{data:{key:"v-14f724bf",path:"/mood/",title:"",lang:"zh-CN",frontmatter:{layout:"Mood",slug:"aurora-mood"},excerpt:"",headers:[],git:{}},key:"v-14f724bf",path:"/mood/",title:"",lang:"zh-CN",frontmatter:{layout:"Mood",slug:"aurora-mood"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"D:/blog/docs/.vuepress/.temp/pages/mood/index.html.vue",componentFilePathRelative:"pages/mood/index.html.vue",componentFileChunkName:"v-14f724bf",dataFilePath:"D:/blog/docs/.vuepress/.temp/pages/mood/index.html.js",dataFilePathRelative:"pages/mood/index.html.js",dataFileChunkName:"v-14f724bf",htmlFilePath:"D:/blog/docs/.vuepress/dist/mood/index.html",htmlFilePathRelative:"mood/index.html"},{data:{key:"v-14e6501c",path:"/link/",title:"",lang:"zh-CN",frontmatter:{layout:"Link",slug:"aurora-link"},excerpt:"",headers:[],git:{}},key:"v-14e6501c",path:"/link/",title:"",lang:"zh-CN",frontmatter:{layout:"Link",slug:"aurora-link"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"D:/blog/docs/.vuepress/.temp/pages/link/index.html.vue",componentFilePathRelative:"pages/link/index.html.vue",componentFileChunkName:"v-14e6501c",dataFilePath:"D:/blog/docs/.vuepress/.temp/pages/link/index.html.js",dataFilePathRelative:"pages/link/index.html.js",dataFileChunkName:"v-14e6501c",htmlFilePath:"D:/blog/docs/.vuepress/dist/link/index.html",htmlFilePathRelative:"link/index.html"},{data:{key:"v-744d024e",path:"/tag/",title:"",lang:"zh-CN",frontmatter:{layout:"Tag",slug:"aurora-tag"},excerpt:"",headers:[],git:{}},key:"v-744d024e",path:"/tag/",title:"",lang:"zh-CN",frontmatter:{layout:"Tag",slug:"aurora-tag"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"D:/blog/docs/.vuepress/.temp/pages/tag/index.html.vue",componentFilePathRelative:"pages/tag/index.html.vue",componentFileChunkName:"v-744d024e",dataFilePath:"D:/blog/docs/.vuepress/.temp/pages/tag/index.html.js",dataFilePathRelative:"pages/tag/index.html.js",dataFileChunkName:"v-744d024e",htmlFilePath:"D:/blog/docs/.vuepress/dist/tag/index.html",htmlFilePathRelative:"tag/index.html"},{data:{key:"v-705c21a6",path:"/archive/",title:"",lang:"zh-CN",frontmatter:{layout:"Archive",slug:"aurora-archive"},excerpt:"",headers:[],git:{}},key:"v-705c21a6",path:"/archive/",title:"",lang:"zh-CN",frontmatter:{layout:"Archive",slug:"aurora-archive"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"D:/blog/docs/.vuepress/.temp/pages/archive/index.html.vue",componentFilePathRelative:"pages/archive/index.html.vue",componentFileChunkName:"v-705c21a6",dataFilePath:"D:/blog/docs/.vuepress/.temp/pages/archive/index.html.js",dataFilePathRelative:"pages/archive/index.html.js",dataFileChunkName:"v-705c21a6",htmlFilePath:"D:/blog/docs/.vuepress/dist/archive/index.html",htmlFilePathRelative:"archive/index.html"},{data:{key:"v-6629f178",path:"/aurora-coze/",title:"",lang:"zh-CN",frontmatter:{layout:"CozeMood",slug:"aurora-coze-mood"},excerpt:"",headers:[],git:{}},key:"v-6629f178",path:"/aurora-coze/",title:"",lang:"zh-CN",frontmatter:{layout:"CozeMood",slug:"aurora-coze-mood"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"D:/blog/docs/.vuepress/.temp/pages/aurora-coze/index.html.vue",componentFilePathRelative:"pages/aurora-coze/index.html.vue",componentFileChunkName:"v-6629f178",dataFilePath:"D:/blog/docs/.vuepress/.temp/pages/aurora-coze/index.html.js",dataFilePathRelative:"pages/aurora-coze/index.html.js",dataFileChunkName:"v-6629f178",htmlFilePath:"D:/blog/docs/.vuepress/dist/aurora-coze/index.html",htmlFilePathRelative:"aurora-coze/index.html"},{data:{key:"v-f693f690",path:"/aurora-register/",title:"",lang:"zh-CN",frontmatter:{layout:"RegisterUser",slug:"aurora-coze-register"},excerpt:"",headers:[],git:{}},key:"v-f693f690",path:"/aurora-register/",title:"",lang:"zh-CN",frontmatter:{layout:"RegisterUser",slug:"aurora-coze-register"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"D:/blog/docs/.vuepress/.temp/pages/aurora-register/index.html.vue",componentFilePathRelative:"pages/aurora-register/index.html.vue",componentFileChunkName:"v-f693f690",dataFilePath:"D:/blog/docs/.vuepress/.temp/pages/aurora-register/index.html.js",dataFilePathRelative:"pages/aurora-register/index.html.js",dataFileChunkName:"v-f693f690",htmlFilePath:"D:/blog/docs/.vuepress/dist/aurora-register/index.html",htmlFilePathRelative:"aurora-register/index.html"},{data:{key:"v-e2acc714",path:"/photo/",title:"",lang:"zh-CN",frontmatter:{layout:"CozePhoto",slug:"aurora-photo"},excerpt:"",headers:[],git:{}},key:"v-e2acc714",path:"/photo/",title:"",lang:"zh-CN",frontmatter:{layout:"CozePhoto",slug:"aurora-photo"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"D:/blog/docs/.vuepress/.temp/pages/photo/index.html.vue",componentFilePathRelative:"pages/photo/index.html.vue",componentFileChunkName:"v-e2acc714",dataFilePath:"D:/blog/docs/.vuepress/.temp/pages/photo/index.html.js",dataFilePathRelative:"pages/photo/index.html.js",dataFileChunkName:"v-e2acc714",htmlFilePath:"D:/blog/docs/.vuepress/dist/photo/index.html",htmlFilePathRelative:"photo/index.html"},{data:{key:"v-4382d077",path:"/next-mood/",title:"",lang:"zh-CN",frontmatter:{layout:"AuroraCozeMood",slug:"aurora-AuroraCozeMood"},excerpt:"",headers:[],git:{}},key:"v-4382d077",path:"/next-mood/",title:"",lang:"zh-CN",frontmatter:{layout:"AuroraCozeMood",slug:"aurora-AuroraCozeMood"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"D:/blog/docs/.vuepress/.temp/pages/next-mood/index.html.vue",componentFilePathRelative:"pages/next-mood/index.html.vue",componentFileChunkName:"v-4382d077",dataFilePath:"D:/blog/docs/.vuepress/.temp/pages/next-mood/index.html.js",dataFilePathRelative:"pages/next-mood/index.html.js",dataFileChunkName:"v-4382d077",htmlFilePath:"D:/blog/docs/.vuepress/dist/next-mood/index.html",htmlFilePathRelative:"next-mood/index.html"},{data:{key:"v-3279cf61",path:"/aurora-archive/",title:"",lang:"zh-CN",frontmatter:{layout:"AuroraArchive",slug:"aurora-plugin-archive"},excerpt:"",headers:[],git:{}},key:"v-3279cf61",path:"/aurora-archive/",title:"",lang:"zh-CN",frontmatter:{layout:"AuroraArchive",slug:"aurora-plugin-archive"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"D:/blog/docs/.vuepress/.temp/pages/aurora-archive/index.html.vue",componentFilePathRelative:"pages/aurora-archive/index.html.vue",componentFileChunkName:"v-3279cf61",dataFilePath:"D:/blog/docs/.vuepress/.temp/pages/aurora-archive/index.html.js",dataFilePathRelative:"pages/aurora-archive/index.html.js",dataFileChunkName:"v-3279cf61",htmlFilePath:"D:/blog/docs/.vuepress/dist/aurora-archive/index.html",htmlFilePathRelative:"aurora-archive/index.html"},{data:{key:"v-3c506944",path:"/aurora-music/",title:"",lang:"zh-CN",frontmatter:{layout:"AuroraMusic",slug:"aurora-plugin-music"},excerpt:"",headers:[],git:{}},key:"v-3c506944",path:"/aurora-music/",title:"",lang:"zh-CN",frontmatter:{layout:"AuroraMusic",slug:"aurora-plugin-music"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"D:/blog/docs/.vuepress/.temp/pages/aurora-music/index.html.vue",componentFilePathRelative:"pages/aurora-music/index.html.vue",componentFileChunkName:"v-3c506944",dataFilePath:"D:/blog/docs/.vuepress/.temp/pages/aurora-music/index.html.js",dataFilePathRelative:"pages/aurora-music/index.html.js",dataFileChunkName:"v-3c506944",htmlFilePath:"D:/blog/docs/.vuepress/dist/aurora-music/index.html",htmlFilePathRelative:"aurora-music/index.html"}]},7039:(n,s,a)=>{a.d(s,{Z:()=>t});const t=[{data:{key:"v-6c26f442",path:"/maven/Maven%E8%AF%A6%E8%A7%A3.html",title:"Maven详解(基础到高级)(入门到入土)",lang:"zh-CN",frontmatter:{title:"Maven详解(基础到高级)(入门到入土)",date:"2022/9/5 08:44",tag:["Java","maven"],categories:["后端"],coverUrl:"https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Maven%E8%AF%A6%E8%A7%A3/Inked6b8468820eaf4c8a91a419e409ebc13d_LI.jpg"},excerpt:"",headers:[{level:2,title:"一、Maven简介",slug:"一、maven简介",children:[{level:3,title:"1、maven是什么？",slug:"_1、maven是什么",children:[]},{level:3,title:"2、maven的作用",slug:"_2、maven的作用",children:[]}]},{level:2,title:"二、下载与安装",slug:"二、下载与安装",children:[{level:3,title:"1、maven官网下载",slug:"_1、maven官网下载",children:[]},{level:3,title:"2、直接下载（推荐）",slug:"_2、直接下载-推荐",children:[]},{level:3,title:"3、安装与配置",slug:"_3、安装与配置",children:[]},{level:3,title:"4、配置本地仓库",slug:"_4、配置本地仓库",children:[]},{level:3,title:"5、配置阿里云的镜像仓库",slug:"_5、配置阿里云的镜像仓库",children:[]},{level:3,title:"6、配置maven运行的java环境",slug:"_6、配置maven运行的java环境",children:[]},{level:3,title:"7、配置完成后，预下载",slug:"_7、配置完成后-预下载",children:[]}]},{level:2,title:"三、基础概念",slug:"三、基础概念",children:[{level:3,title:"1、仓库",slug:"_1、仓库",children:[]},{level:3,title:"2、坐标",slug:"_2、坐标",children:[]}]},{level:2,title:"四、创建一个maven项目（使用IDEA2022.2）",slug:"四、创建一个maven项目-使用idea2022-2",children:[{level:3,title:"1、工程目录结构",slug:"_1、工程目录结构",children:[]},{level:3,title:"2、Maven构建项目命令",slug:"_2、maven构建项目命令",children:[]},{level:3,title:"3、在IDEA中配置maven",slug:"_3、在idea中配置maven",children:[]}]},{level:2,title:"五、依赖管理",slug:"五、依赖管理",children:[{level:3,title:"1、配置依赖",slug:"_1、配置依赖",children:[]},{level:3,title:"2、依赖传递",slug:"_2、依赖传递",children:[]},{level:3,title:"3、依赖传递冲突问题的优先顺序",slug:"_3、依赖传递冲突问题的优先顺序",children:[]},{level:3,title:"4、可选依赖",slug:"_4、可选依赖",children:[]},{level:3,title:"5、排除依赖",slug:"_5、排除依赖",children:[]},{level:3,title:"6、依赖范围",slug:"_6、依赖范围",children:[]},{level:3,title:"7、依赖范围传递性",slug:"_7、依赖范围传递性",children:[]}]},{level:2,title:"六、生命周期",slug:"六、生命周期",children:[{level:3,title:"1、项目构建生命周期",slug:"_1、项目构建生命周期",children:[]},{level:3,title:"2、clean生命周期",slug:"_2、clean生命周期",children:[]},{level:3,title:"3、default构建生命周期",slug:"_3、default构建生命周期",children:[]},{level:3,title:"4、site构建生命周期",slug:"_4、site构建生命周期",children:[]}]},{level:2,title:"七、插件",slug:"七、插件",children:[]}],git:{}},key:"v-6c26f442",path:"/maven/Maven%E8%AF%A6%E8%A7%A3.html",title:"Maven详解(基础到高级)(入门到入土)",lang:"zh-CN",frontmatter:{title:"Maven详解(基础到高级)(入门到入土)",date:"2022/9/5 08:44",tag:["Java","maven"],categories:["后端"],coverUrl:"https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Maven%E8%AF%A6%E8%A7%A3/Inked6b8468820eaf4c8a91a419e409ebc13d_LI.jpg"},excerpt:"",headers:[{level:2,title:"一、Maven简介",slug:"一、maven简介",children:[{level:3,title:"1、maven是什么？",slug:"_1、maven是什么",children:[]},{level:3,title:"2、maven的作用",slug:"_2、maven的作用",children:[]}]},{level:2,title:"二、下载与安装",slug:"二、下载与安装",children:[{level:3,title:"1、maven官网下载",slug:"_1、maven官网下载",children:[]},{level:3,title:"2、直接下载（推荐）",slug:"_2、直接下载-推荐",children:[]},{level:3,title:"3、安装与配置",slug:"_3、安装与配置",children:[]},{level:3,title:"4、配置本地仓库",slug:"_4、配置本地仓库",children:[]},{level:3,title:"5、配置阿里云的镜像仓库",slug:"_5、配置阿里云的镜像仓库",children:[]},{level:3,title:"6、配置maven运行的java环境",slug:"_6、配置maven运行的java环境",children:[]},{level:3,title:"7、配置完成后，预下载",slug:"_7、配置完成后-预下载",children:[]}]},{level:2,title:"三、基础概念",slug:"三、基础概念",children:[{level:3,title:"1、仓库",slug:"_1、仓库",children:[]},{level:3,title:"2、坐标",slug:"_2、坐标",children:[]}]},{level:2,title:"四、创建一个maven项目（使用IDEA2022.2）",slug:"四、创建一个maven项目-使用idea2022-2",children:[{level:3,title:"1、工程目录结构",slug:"_1、工程目录结构",children:[]},{level:3,title:"2、Maven构建项目命令",slug:"_2、maven构建项目命令",children:[]},{level:3,title:"3、在IDEA中配置maven",slug:"_3、在idea中配置maven",children:[]}]},{level:2,title:"五、依赖管理",slug:"五、依赖管理",children:[{level:3,title:"1、配置依赖",slug:"_1、配置依赖",children:[]},{level:3,title:"2、依赖传递",slug:"_2、依赖传递",children:[]},{level:3,title:"3、依赖传递冲突问题的优先顺序",slug:"_3、依赖传递冲突问题的优先顺序",children:[]},{level:3,title:"4、可选依赖",slug:"_4、可选依赖",children:[]},{level:3,title:"5、排除依赖",slug:"_5、排除依赖",children:[]},{level:3,title:"6、依赖范围",slug:"_6、依赖范围",children:[]},{level:3,title:"7、依赖范围传递性",slug:"_7、依赖范围传递性",children:[]}]},{level:2,title:"六、生命周期",slug:"六、生命周期",children:[{level:3,title:"1、项目构建生命周期",slug:"_1、项目构建生命周期",children:[]},{level:3,title:"2、clean生命周期",slug:"_2、clean生命周期",children:[]},{level:3,title:"3、default构建生命周期",slug:"_3、default构建生命周期",children:[]},{level:3,title:"4、site构建生命周期",slug:"_4、site构建生命周期",children:[]}]},{level:2,title:"七、插件",slug:"七、插件",children:[]}],content:'\r\n## 一、Maven简介\r\n\r\n### 1、maven是什么？\r\n\r\n- Maven是基于项目对象模型(POM project object model)，可以通过一小段描述信息（配置）来管理项目的构建，报告和文档的软件项目管理工具。\r\n- Maven的本质是一个项目管理工具，将项目开发和管理过程抽象成一个项目对象模型(POM)。\r\n- POM (Project ObjectModel) :项目对象模型。\r\n\r\n![Inked6b8468820eaf4c8a91a419e409ebc13d_LI.jpg](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Maven%E8%AF%A6%E8%A7%A3/Inked6b8468820eaf4c8a91a419e409ebc13d_LI.jpg)\r\n\r\n### 2、maven的作用\r\n\r\n- 项目构建:提供标准的、跨平台的自动化项目构建方式。\r\n- 依赖管理:方便快捷的管理项目依赖的资源(jar包) ， 避免资源间的版本冲突问题。不用自己手动去下载jar ，pom文件会自动管理下载好的jar包。\r\n- 统一开发结构:提供标准的、统一的项目结构。\r\n- 用来解决导入java类依赖的jar,编译java项目主要问题。\r\n\r\n## 二、下载与安装\r\n\r\n### 1、maven官网下载\r\n\r\n#### 官网首页地址：\r\n\r\n```http\r\nhttps://maven.apache.org/\r\n```\r\n\r\n#### 官方下载地址\r\n\r\n```http\r\nhttps://maven.apache.org/download.cgi\r\n```\r\n\r\n![16623403034288.png](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Maven%E8%AF%A6%E8%A7%A3/16623403034288.png)\r\n\r\n::: tip\r\n\r\nBinary（bin）是可执行版本，已经编译好可以直接使用。\r\n\r\nSource (src)是源代码版本，需要自己编译成可执行软件才可使用。\r\n\r\n:::\r\n\r\n::: tip\r\n\r\ntar.gz和zip两种压缩格式,其实这两个压缩文件里面包含的内容是同样的,只是压缩格式不同。\r\n\r\ntar.gz格式的文件比zip文件小很多,用于unix操作系统。\r\n\r\nzip格式用于Windows操作系统,但在Windows系统使用WinRar工具一样能够解压缩tar.gz格式 。\r\n\r\n::: warning\r\n\r\n注意，官网下载是不带maven本地仓库的，需要自己配置创建\r\n\r\n::: \r\n\r\n### 2、直接下载（推荐）\r\n\r\n::: tip\r\n\r\n这是我自己用的maven，压缩包中自带maven仓库及大多数开发常用依赖\r\n\r\n:::\r\n\r\n#### 下载地址\r\n\r\n[点击下载](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Maven详解/apache-maven-3.8.4.7z)\r\n\r\n### 3、安装与配置\r\n\r\n#### 1、解压maven\r\n\r\n下载完成后，选择任意盘符进行解压，<span style="color: red">**不建议放在c盘**</span>\r\n\r\n#### 2、配置环境\r\n\r\n::: tip\r\n\r\n此电脑 → 属性 → 高级系统设置 → 环境变量 → 系统变量 → 新建变量 → 填写好变量名和变量值 → 去path配置路径\r\n\r\n:::\r\n\r\n![1.png](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Maven%E8%AF%A6%E8%A7%A3/1.png)\r\n\r\n新建系统环境变量：变量名：MAVEN_HOME 变量值：你<span style="color:red">**解压Maven文件所在的地址**</span>\r\n\r\n![2.png](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Maven%E8%AF%A6%E8%A7%A3/2.png)\r\n\r\n配置path环境变量\r\n\r\n![3.png](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Maven%E8%AF%A6%E8%A7%A3/3.png)\r\n\r\n点击新建，填入`%MAVEN_HOME%\\bin`\r\n\r\n![4.png](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Maven%E8%AF%A6%E8%A7%A3/4.png)\r\n\r\n`win+R`运行`cmd`，输入`mvn -version`，如图所示则配置成功\r\n\r\n![5.png](https://bdqn-blog.oss-cn-beijing.aliyuncs.com/blog/Maven%E8%AF%A6%E8%A7%A3/5.png)\r\n\r\n### 4、配置本地仓库\r\n\r\n::: tip\r\n\r\n​\t必须配置，因为如果如果不手动配置一个手动仓库，Maven会自动给你添加到默认地址也就是c盘中的.m2的位置，随着导入的包越来越多，也会占用越来越多内存导致电脑运行速度慢。所以需要自己配置一个本地仓库并且设置以后从中央仓库下载到的包放在自己设置的仓库中。\r\n\r\n:::\r\n\r\n在除C盘外的任意盘符创建一个名为`repository`的文件夹，<span style="color:red">**推荐在maven根目录下创建**</span>\r\n\r\n![6.png](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Maven%E8%AF%A6%E8%A7%A3/6.png)\r\n\r\n在你解压maven根目录中的`\\conf`文件夹下找到`settings.xml`文件，选中后右键编辑或者用任意文本编辑器打开\r\n\r\n![7.png](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Maven%E8%AF%A6%E8%A7%A3/7.png)\r\n\r\n![8.png](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Maven%E8%AF%A6%E8%A7%A3/8.png)\r\n\r\n找到localRepository标签，t填入刚才所创建的repository文件夹地址\r\n\r\n![9.png](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Maven%E8%AF%A6%E8%A7%A3/9.png)\r\n\r\n::: tip\r\n\r\nlocalRepository节点用于配置本地仓库，本地仓库其实起到了一个缓存的作用，它的默认地址是 C:\\Users\\用户名.m2。\r\n\r\n当我们从maven中获取jar包的时候，maven首先会在本地仓库中查找，如果本地仓库有则返回；如果没有则从远程仓库中获取包，并在本地库中保存。\r\n\r\n全局setting与用户setting区别：\r\n\r\n​\t\t全局setting定义了当前windows系统下所有用户的配置\r\n\r\n​\t\t用户setting定义了当前windows系统下登录用户的配置\r\n\r\n:::\r\n\r\n### 5、配置阿里云的镜像仓库\r\n\r\n::: tip\r\n\r\n因为如果都是从中央仓库中获取的话速度会很慢，因为中央仓库的地址在国外，所以我们需要用到阿里云创建的地址去访问中央仓库 ，这样下载jar包的速度比较快。\r\n\r\n视情况选择，可以同时配置多个镜像仓库，推荐保留原有中央仓库配置，在中央仓库下面再配置阿里云镜像仓库。\r\n\r\n阿里云镜像仓库虽然快，但是更新并不是那么的及时，有些最新的依赖或者使用较少的依赖可能会下载不到，所以推荐保留中央仓库配置。\r\n\r\n:::\r\n\r\n在settings.xml配置文件中找到mirrors标签，添加如下配置（注意要添加在`<mirrors>`和`</mirrors>`两个标签之间）\r\n\r\n```xml\r\n<mirror>\r\n    <id>alimaven</id>\r\n    <mirrorOf>central</mirrorOf>\r\n    <name>aliyun maven</name>\r\n    <url>http://maven.aliyun.com/nexus/content/repositories/central/</url>\r\n</mirror>\r\n```\r\n\r\n![10.png](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Maven%E8%AF%A6%E8%A7%A3/10.png)\r\n\r\n### 6、配置maven运行的java环境\r\n\r\n在settings.xml配置文件中找到profiles标签，添加如下配置（注意要添加在`<profiles>`和`</profiles>`两个标签之间）\r\n\r\n```xml\r\n<profile>\r\n    <id>jdk-1.8</id>\r\n    <activation>\r\n        <activeByDefault>true</activeByDefault>\r\n        <jdk>1.8</jdk>\r\n    </activation>\r\n\r\n    <properties>\r\n        <maven.compiler.source>1.8</maven.compiler.source>\r\n        <maven.compiler.target>1.8</maven.compiler.target>\r\n        <maven.compiler.compilerVersion>1.8</maven.compiler.compilerVersion>\r\n    </properties>\r\n</profile>\r\n```\r\n\r\n![11.png](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Maven%E8%AF%A6%E8%A7%A3/11.png)\r\n\r\n### 7、配置完成后，预下载\r\n\r\n::: tip\r\n\r\n​\t\t运行cmd,输入mvn help:system测试，Maven相关工具自动帮我们到Maven中央仓库下载缺省的或者Maven中央仓库更新的各种配置文件和类库（jar包)到Maven本地仓库中。\r\n\r\n:::\r\n\r\n## 三、基础概念\r\n\r\n### 1、仓库\r\n\r\n![12.webp](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Maven%E8%AF%A6%E8%A7%A3/12.webp)\r\n\r\n::: tip\r\n\r\n仓库:用于存储资源，包含各种jar包\r\n\r\n:::\r\n\r\n#### 仓库分类:\r\n\r\n- 本地仓库:自己电脑.上存储资源的仓库，连接远程仓库获取资源。\r\n- 远程仓库:非本机电脑上的仓库，为本地仓库提供资源。\r\n  - 中央仓库: Maven团队维护，存储所有资源的仓库。\r\n  - 私服:部门/公司范围内存储资源的仓库，从中央仓库获取资源。\r\n\r\n#### 私服的作用:\r\n\r\n- 保存具有版权的资源，包含购买或自主研发的jar包。\r\n  - 中央仓库中的jar都是开源的，不能存储具有版权的资源。\r\n- 一定范围内共享资源，仅对内部开放，不对外共享。\r\n\r\n### 2、坐标\r\n\r\n::: tip\r\n\r\nMaven中的坐标用于描述仓库中资源的位置\r\n\r\n:::\r\n\r\nmaven中央仓库地址（可直接访问）：[中央仓库](https://repo1.maven.org/maven2/)\r\n\r\n#### Maven坐标主要组成\r\n\r\n|    标签    |                             释意                             |\r\n| :--------: | :----------------------------------------------------------: |\r\n|  groupld   | 定义当前Maven项目隶属组织名称(通常是域名反写，例如: org.mybatis) |\r\n| artifactld |     定义当前Maven项目名称(通常是模块名称，例如CRM、SMS)      |\r\n|  version   |                      定义当前项目版本号                      |\r\n| packaging  |                     定义该项目的打包方式                     |\r\n\r\n#### Maven坐标的作用\r\n\r\n使用唯一标识，唯一性定位资源位置，通过该标识可以将资源的识别与下载工作交由机器完成\r\n\r\n::: tip\r\n\r\nmaven坐标查询网站：[Maven Repository: Search/Browse/Explore (mvnrepository.com)](https://mvnrepository.com/)\r\n\r\n:::\r\n\r\n## 四、创建一个maven项目（使用IDEA2022.2）\r\n\r\n::: tip\r\n\r\n打开idea → New Project → Name(输入项目名称) → Build system(选择打包方式为Maven) → Advanced Settings(设置项目编号及版本)\r\n\r\n<span style="color:red">**具体操作如下GIF图所示**</span>\r\n\r\n:::\r\n\r\n![13.gif](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Maven%E8%AF%A6%E8%A7%A3/13.gif)\r\n\r\n### 1、工程目录结构\r\n\r\n![14.jpg](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Maven%E8%AF%A6%E8%A7%A3/14.jpg)\r\n\r\n### 2、Maven构建项目命令\r\n\r\n::: tip\r\n\r\nMaven构建命令使用mvn开头，后面添加功能参数，可以一次执行多个命令，使用空格分隔。\r\n\r\n这里只展示常用的几个参数，其他参数请自行查看官网\r\n\r\n:::\r\n\r\n|    命令     |                  释意                  |\r\n| :---------: | :------------------------------------: |\r\n| mvn compile |                编译项目                |\r\n|  mvn clean  |                清理缓存                |\r\n|  mvn test   |                测试打包                |\r\n| mvn package |                打包项目                |\r\n| mvn install | 安装到本地仓库（集成了编译及打包命令） |\r\n\r\n### 3、在IDEA中配置maven\r\n\r\n::: tip\r\n\r\nFile → Settings →`Build,Execution,Deployment` → Build Tools → Maven\r\n\r\n:::\r\n\r\n![15.png](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Maven%E8%AF%A6%E8%A7%A3/15.png)\r\n\r\n::: warning\r\n\r\n注意，如果只是这样配置的话我们每次创建maven项目就要重新配置一次。\r\n\r\n否则，idea默认使用自带的maven配置，也就是自动把所有依赖全部下载到C盘中。\r\n\r\n:::\r\n\r\n::: tip\r\n\r\n配置新建项目时自动初始化maven配置\r\n\r\nFile → New Project Setup → Settings For New Projects\r\n\r\n打开后设置方式参上图\r\n\r\n各版本的IDEA此设置的路径都有所偏差，但是意思都差不多，在File选项里找到<span style="color:red">**Settings For New Projects**</span>即可\r\n\r\n:::\r\n\r\n## 五、依赖管理\r\n\r\n### 1、配置依赖\r\n\r\n::: tip\r\n\r\n依赖指当前项目运行所需的jar,一个项目可以设置多个依赖。\r\n\r\n:::\r\n\r\n格式如下：\r\n\r\n```xml\r\n<dependencies>\r\n    \x3c!--具体依赖--\x3e\r\n    <dependency>\r\n        \x3c!--依赖所属群组id--\x3e\r\n        <groupId>log4j</groupId>\r\n        \x3c!--依赖所属项目id--\x3e\r\n        <artifactId>log4j</artifactId>\r\n        \x3c!--依赖版本号--\x3e\r\n        <version>1.2.12</version>\r\n    </dependency>\r\n</dependencies>\r\n```\r\n\r\n### 2、依赖传递\r\n\r\n::: tip\r\n\r\n依赖具有传递性:\r\n\r\n​\t\t直接依赖:在当前项目中通过依赖配置建立的依赖关系\r\n\r\n​\t\t间接依赖: 被资源的资源如果依赖其他资源，当前项目间接依赖其他资源\r\n\r\n:::\r\n\r\n### 3、依赖传递冲突问题的优先顺序\r\n\r\n::: tip\r\n\r\n路径优先:当依赖中出现相同的资源时，层级越深，优先级越低，层级越浅，优先级越高\r\n\r\n声明优先:当资源在相同层级被依赖时，配置顺序靠前的覆盖配置顺序靠后的\r\n\r\n特殊优先:当同级配置了相同资源的不同版本，后配置的覆盖先配置的\r\n\r\n:::\r\n\r\n![16.jpg](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Maven%E8%AF%A6%E8%A7%A3/16.jpg)\r\n\r\n### 4、可选依赖\r\n\r\n::: tip\r\n\r\n 可选依赖指对外隐藏当前所依赖的资源——<span style="color:red">**不透明**</span>\r\n\r\n:::\r\n\r\n```xml\r\n<dependencies>\r\n    \x3c!--具体依赖--\x3e\r\n    <dependency>\r\n        \x3c!--依赖所属群组id--\x3e\r\n        <groupId>log4j</groupId>\r\n        \x3c!--依赖所属项目id--\x3e\r\n        <artifactId>log4j</artifactId>\r\n        \x3c!--依赖版本号--\x3e\r\n        <version>1.2.12</version>\r\n        \x3c!--可选依赖指对外隐藏当前所依赖的资源--不透明--\x3e\r\n        <optional>true</optional>\r\n    </dependency>\r\n</dependencies>\r\n```\r\n\r\n### 5、排除依赖\r\n\r\n::: tip\r\n\r\n排除依赖指主动断开依赖的资源，被排除的资源无需指定版本——<span style="color:red">**不需要**</span>\r\n\r\n一般来讲只有在多个依赖项目冲突的时候才会使用exclusions来排除掉其他依赖\r\n\r\n:::\r\n\r\n```xml\r\n<dependency>\r\n    <groupId>junit</groupId>\r\n    <artifactId>junit</artifactId>\r\n    <version>4.12</version>\r\n    <exclusions>\r\n        <exclusion>\r\n        <groupId>org.hamcrest</groupId>\r\n        <artifactId>hamcrest-core</artifactId>\r\n        </exclusion>\r\n    </exclusions>\r\n</dependency>\r\n```\r\n\r\n### 6、依赖范围\r\n\r\n::: tip\r\n\r\n依赖的jar默认情况可以在任何地方使用，可以通过scope标签设定其作用范围\r\n\r\n作用范围\r\n\r\n- 主程序范围有效(main文件夹范围内)\r\n- 测试程序范围有效(test文件夹范围内)\r\n- 是否参与打包(package指令范围内)\r\n\r\n:::\r\n\r\n|      scope      | 主代码 | 测试代码 | 打包 |    范例     |\r\n| :-------------: | :----: | :------: | :--: | :---------: |\r\n| compile（依赖） |   Y    |    Y     |  Y   |    log4j    |\r\n|      test       |        |    Y     |      |    junit    |\r\n|    provided     |   Y    |    Y     |      | servlet-api |\r\n|     runtime     |        |          |  Y   |    jdbc     |\r\n\r\n### 7、依赖范围传递性 \r\n\r\n::: tip\r\n\r\n带有依赖范围的资源在进行传递时，作用范围将受到影响\r\n\r\n:::\r\n\r\n![17.jpg](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Maven%E8%AF%A6%E8%A7%A3/17.jpg)\r\n\r\n## 六、生命周期\r\n\r\n### 1、项目构建生命周期\r\n\r\n::: tip\r\n\r\n- Maven构建生命周期描述的是一次构建过程经历经历了多少个事件\r\n- Maven对项目构建的生命周期划分为3套\r\n  - clean: 清理工作\r\n  - default:核心工作，例如编译，测试,打包,部署等\r\n  - site: 产生报告，发布站点等\r\n\r\n:::\r\n\r\n![18.png](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Maven%E8%AF%A6%E8%A7%A3/18.png)\r\n\r\n### 2、clean生命周期\r\n\r\n::: tip\r\n\r\npre-clean         执行一-些需要在clean之前完成的工作\r\n\r\nclean                 移除所有上一次构建生成的文件post-clean  \r\n\r\npost-clean        执行一些需要在clean之 后立刻完成的工作\r\n\r\n:::\r\n\r\n### 3、default构建生命周期\r\n\r\n| 阶段                                        | 释意                                                         |\r\n| :------------------------------------------ | :----------------------------------------------------------- |\r\n| validate（校验）                            | 校验项目是否正确并且所有必要的信息可以完成项目的构建过程     |\r\n| initialize（初始化）                        | 初始化构建状态，比如设置属性值                               |\r\n| generate-sources（生成源代码）              | 生成包含在编译阶段中的任何源代码                             |\r\n| process-sources（处理源代码）               | 处理源代码，比如说，过滤任意值                               |\r\n| generate-resources（生成资源文件）          | 生成将会包含在项目包中的资源文件                             |\r\n| precess-resources（处理资源文件）           | 复制和处理资源到目标目录，为打包阶段做好准备                 |\r\n| complie（编译）                             | 编译项目的源代码                                             |\r\n| process-classes（处理类文件）               | 处理编译生成的文件，比如说对Java class文件做字节码改善优化   |\r\n| generate-test-sources（生成测试源代码）     | 生成包含在编译阶段中的任何测试源代码                         |\r\n| process-test-sources（处理测试源代码）      | 处理测试源代码，比如说，过滤任意值                           |\r\n| generate-test-resources（生成测试资源文件） | 为测试创建资源文件                                           |\r\n| precess-test-resources（处理测试资源文件）  | 复制和处理测试资源到目标目录                                 |\r\n| test-compile（编译测试源码）                | 编译测试源代码到测试目标目录                                 |\r\n| process-test-classes（处理测试类文件）      | 处理测试源代码编译生成的文件                                 |\r\n| test（测试）                                | 使用合适的单元测试框架运行测试（Juint是其中之一）            |\r\n| prepare-package（准备打包）                 | 在实际打包之前，执行任何的必要的操作为打包做准备             |\r\n| package（打包）                             | 将编译后的代码打包成可分发格式的文件，比如JAR、WAR或者EAR文件 |\r\n| pre-intergration-test（集成测试前）         | 在执行集成测试前进行必要的动作，比如说，搭建需要的环境       |\r\n| intergration-test（集成测试）               | 处理和部署项目到可以运行集成测试环境中                       |\r\n| post-intergration-test（集成测试后）        | 在执行集成测试完成后进行必要的动作，比如说，清理集成测试环境 |\r\n| verify（验证）                              | 运行任意的检查来验证项目包有效且达到质量标准                 |\r\n| install（安装）                             | 安装项目包到本地仓库，这样项目包可以用做其他本地项目的依赖   |\r\n| deploy（部署）                              | 将最终的项目包复制到远程仓库中与其他开发者和项目共享         |\r\n\r\n### 4、site构建生命周期\r\n\r\n::: tip\r\n\r\npre-site     执行一些需要在生成站点文档之前完成的工作\r\n\r\nsite        生成项目的站点文档\r\n\r\npost-site    执行一些需要在生成站点文档之后完成的工作，并且为部署做准备\r\n\r\nsite-deploy  将生成的站点文档部署到特定的服务器上\r\n\r\n:::\r\n\r\n## 七、插件\r\n\r\n::: tip\r\n\r\n插件与生命周期内的阶段绑定，在执行到对应生命周期时执行对应的插件功能\r\n\r\n默认maven在各个生命周期上绑定有预设的功能\r\n\r\n通过插件可以自定义其他功能\r\n\r\n:::\r\n\r\n```xml\r\n\x3c!--构建--\x3e\r\n<build>\r\n    \x3c!--    设置插件--\x3e\r\n    <plugins>  \r\n        \x3c!--  具体插件配置--\x3e\r\n        <plugin>\r\n            \x3c!-- 组名--\x3e\r\n            <groupId>org.apache.maven.plugins</groupId>\r\n            \x3c!--  插件名--\x3e\r\n            <artifactId>maven-source-plugin</artifactId>\r\n            \x3c!-- 版本号--\x3e\r\n            <version>2.2.1</version>\r\n            <executions>\r\n                <execution>\r\n                    <goals>\r\n                        <goal>jar</goal>\r\n                        <goal>test-jar</goal>\r\n                    </goals>\r\n                    <phase>generate-test-resources</phase>\r\n                </execution>\r\n            </executions>\r\n        </plugin>\r\n    </plugins>\r\n</build>\r\n```\r\n\r\n![19.jpg](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Maven%E8%AF%A6%E8%A7%A3/19.jpg)\r\n',contentRendered:'<h2 id="一、maven简介" tabindex="-1"><a class="header-anchor" href="#一、maven简介" aria-hidden="true">#</a> 一、Maven简介</h2>\n<h3 id="_1、maven是什么" tabindex="-1"><a class="header-anchor" href="#_1、maven是什么" aria-hidden="true">#</a> 1、maven是什么？</h3>\n<ul>\n<li>Maven是基于项目对象模型(POM project object model)，可以通过一小段描述信息（配置）来管理项目的构建，报告和文档的软件项目管理工具。</li>\n<li>Maven的本质是一个项目管理工具，将项目开发和管理过程抽象成一个项目对象模型(POM)。</li>\n<li>POM (Project ObjectModel) :项目对象模型。</li>\n</ul>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="Inked6b8468820eaf4c8a91a419e409ebc13d_LI.jpg" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Maven%E8%AF%A6%E8%A7%A3/Inked6b8468820eaf4c8a91a419e409ebc13d_LI.jpg" data="aurora"></p>\n<h3 id="_2、maven的作用" tabindex="-1"><a class="header-anchor" href="#_2、maven的作用" aria-hidden="true">#</a> 2、maven的作用</h3>\n<ul>\n<li>项目构建:提供标准的、跨平台的自动化项目构建方式。</li>\n<li>依赖管理:方便快捷的管理项目依赖的资源(jar包) ， 避免资源间的版本冲突问题。不用自己手动去下载jar ，pom文件会自动管理下载好的jar包。</li>\n<li>统一开发结构:提供标准的、统一的项目结构。</li>\n<li>用来解决导入java类依赖的jar,编译java项目主要问题。</li>\n</ul>\n<h2 id="二、下载与安装" tabindex="-1"><a class="header-anchor" href="#二、下载与安装" aria-hidden="true">#</a> 二、下载与安装</h2>\n<h3 id="_1、maven官网下载" tabindex="-1"><a class="header-anchor" href="#_1、maven官网下载" aria-hidden="true">#</a> 1、maven官网下载</h3>\n<h4 id="官网首页地址" tabindex="-1"><a class="header-anchor" href="#官网首页地址" aria-hidden="true">#</a> 官网首页地址：</h4>\n<div class="language-http ext-http line-numbers-mode"><pre v-pre class="language-http"><code><span class="token header"><span class="token header-name keyword">https</span><span class="token punctuation">:</span><span class="token header-value">//maven.apache.org/</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h4 id="官方下载地址" tabindex="-1"><a class="header-anchor" href="#官方下载地址" aria-hidden="true">#</a> 官方下载地址</h4>\n<div class="language-http ext-http line-numbers-mode"><pre v-pre class="language-http"><code><span class="token header"><span class="token header-name keyword">https</span><span class="token punctuation">:</span><span class="token header-value">//maven.apache.org/download.cgi</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="16623403034288.png" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Maven%E8%AF%A6%E8%A7%A3/16623403034288.png" data="aurora"></p>\n<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>Binary（bin）是可执行版本，已经编译好可以直接使用。</p>\n<p>Source (src)是源代码版本，需要自己编译成可执行软件才可使用。</p>\n</div>\n<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>tar.gz和zip两种压缩格式,其实这两个压缩文件里面包含的内容是同样的,只是压缩格式不同。</p>\n<p>tar.gz格式的文件比zip文件小很多,用于unix操作系统。</p>\n<p>zip格式用于Windows操作系统,但在Windows系统使用WinRar工具一样能够解压缩tar.gz格式 。</p>\n<div class="custom-container warning"><p class="custom-container-title">WARNING</p>\n<p>注意，官网下载是不带maven本地仓库的，需要自己配置创建</p>\n</div>\n</div>\n<h3 id="_2、直接下载-推荐" tabindex="-1"><a class="header-anchor" href="#_2、直接下载-推荐" aria-hidden="true">#</a> 2、直接下载（推荐）</h3>\n<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>这是我自己用的maven，压缩包中自带maven仓库及大多数开发常用依赖</p>\n</div>\n<h4 id="下载地址" tabindex="-1"><a class="header-anchor" href="#下载地址" aria-hidden="true">#</a> 下载地址</h4>\n<p><a href="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Maven%E8%AF%A6%E8%A7%A3/apache-maven-3.8.4.7z" target="_blank" rel="noopener noreferrer">点击下载<ExternalLinkIcon/></a></p>\n<h3 id="_3、安装与配置" tabindex="-1"><a class="header-anchor" href="#_3、安装与配置" aria-hidden="true">#</a> 3、安装与配置</h3>\n<h4 id="_1、解压maven" tabindex="-1"><a class="header-anchor" href="#_1、解压maven" aria-hidden="true">#</a> 1、解压maven</h4>\n<p>下载完成后，选择任意盘符进行解压，<span style="color: red"><strong>不建议放在c盘</strong></span></p>\n<h4 id="_2、配置环境" tabindex="-1"><a class="header-anchor" href="#_2、配置环境" aria-hidden="true">#</a> 2、配置环境</h4>\n<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>此电脑 → 属性 → 高级系统设置 → 环境变量 → 系统变量 → 新建变量 → 填写好变量名和变量值 → 去path配置路径</p>\n</div>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="1.png" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Maven%E8%AF%A6%E8%A7%A3/1.png" data="aurora"></p>\n<p>新建系统环境变量：变量名：MAVEN_HOME 变量值：你<span style="color:red"><strong>解压Maven文件所在的地址</strong></span></p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="2.png" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Maven%E8%AF%A6%E8%A7%A3/2.png" data="aurora"></p>\n<p>配置path环境变量</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="3.png" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Maven%E8%AF%A6%E8%A7%A3/3.png" data="aurora"></p>\n<p>点击新建，填入<code>%MAVEN_HOME%\\bin</code></p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="4.png" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Maven%E8%AF%A6%E8%A7%A3/4.png" data="aurora"></p>\n<p><code>win+R</code>运行<code>cmd</code>，输入<code>mvn -version</code>，如图所示则配置成功</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="5.png" originSrc="https://bdqn-blog.oss-cn-beijing.aliyuncs.com/blog/Maven%E8%AF%A6%E8%A7%A3/5.png" data="aurora"></p>\n<h3 id="_4、配置本地仓库" tabindex="-1"><a class="header-anchor" href="#_4、配置本地仓库" aria-hidden="true">#</a> 4、配置本地仓库</h3>\n<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>​\t必须配置，因为如果如果不手动配置一个手动仓库，Maven会自动给你添加到默认地址也就是c盘中的.m2的位置，随着导入的包越来越多，也会占用越来越多内存导致电脑运行速度慢。所以需要自己配置一个本地仓库并且设置以后从中央仓库下载到的包放在自己设置的仓库中。</p>\n</div>\n<p>在除C盘外的任意盘符创建一个名为<code>repository</code>的文件夹，<span style="color:red"><strong>推荐在maven根目录下创建</strong></span></p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="6.png" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Maven%E8%AF%A6%E8%A7%A3/6.png" data="aurora"></p>\n<p>在你解压maven根目录中的<code>\\conf</code>文件夹下找到<code>settings.xml</code>文件，选中后右键编辑或者用任意文本编辑器打开</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="7.png" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Maven%E8%AF%A6%E8%A7%A3/7.png" data="aurora"></p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="8.png" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Maven%E8%AF%A6%E8%A7%A3/8.png" data="aurora"></p>\n<p>找到localRepository标签，t填入刚才所创建的repository文件夹地址</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="9.png" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Maven%E8%AF%A6%E8%A7%A3/9.png" data="aurora"></p>\n<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>localRepository节点用于配置本地仓库，本地仓库其实起到了一个缓存的作用，它的默认地址是 C:\\Users\\用户名.m2。</p>\n<p>当我们从maven中获取jar包的时候，maven首先会在本地仓库中查找，如果本地仓库有则返回；如果没有则从远程仓库中获取包，并在本地库中保存。</p>\n<p>全局setting与用户setting区别：</p>\n<p>​\t\t全局setting定义了当前windows系统下所有用户的配置</p>\n<p>​\t\t用户setting定义了当前windows系统下登录用户的配置</p>\n</div>\n<h3 id="_5、配置阿里云的镜像仓库" tabindex="-1"><a class="header-anchor" href="#_5、配置阿里云的镜像仓库" aria-hidden="true">#</a> 5、配置阿里云的镜像仓库</h3>\n<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>因为如果都是从中央仓库中获取的话速度会很慢，因为中央仓库的地址在国外，所以我们需要用到阿里云创建的地址去访问中央仓库 ，这样下载jar包的速度比较快。</p>\n<p>视情况选择，可以同时配置多个镜像仓库，推荐保留原有中央仓库配置，在中央仓库下面再配置阿里云镜像仓库。</p>\n<p>阿里云镜像仓库虽然快，但是更新并不是那么的及时，有些最新的依赖或者使用较少的依赖可能会下载不到，所以推荐保留中央仓库配置。</p>\n</div>\n<p>在settings.xml配置文件中找到mirrors标签，添加如下配置（注意要添加在<code>&lt;mirrors&gt;</code>和<code>&lt;/mirrors&gt;</code>两个标签之间）</p>\n<div class="language-xml ext-xml line-numbers-mode"><pre v-pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>alimaven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>aliyun maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://maven.aliyun.com/nexus/content/repositories/central/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="10.png" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Maven%E8%AF%A6%E8%A7%A3/10.png" data="aurora"></p>\n<h3 id="_6、配置maven运行的java环境" tabindex="-1"><a class="header-anchor" href="#_6、配置maven运行的java环境" aria-hidden="true">#</a> 6、配置maven运行的java环境</h3>\n<p>在settings.xml配置文件中找到profiles标签，添加如下配置（注意要添加在<code>&lt;profiles&gt;</code>和<code>&lt;/profiles&gt;</code>两个标签之间）</p>\n<div class="language-xml ext-xml line-numbers-mode"><pre v-pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>jdk-1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activation</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activeByDefault</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activeByDefault</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jdk</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>jdk</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activation</span><span class="token punctuation">></span></span>\n\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.compilerVersion</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.compilerVersion</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="11.png" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Maven%E8%AF%A6%E8%A7%A3/11.png" data="aurora"></p>\n<h3 id="_7、配置完成后-预下载" tabindex="-1"><a class="header-anchor" href="#_7、配置完成后-预下载" aria-hidden="true">#</a> 7、配置完成后，预下载</h3>\n<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>​\t\t运行cmd,输入mvn help:system测试，Maven相关工具自动帮我们到Maven中央仓库下载缺省的或者Maven中央仓库更新的各种配置文件和类库（jar包)到Maven本地仓库中。</p>\n</div>\n<h2 id="三、基础概念" tabindex="-1"><a class="header-anchor" href="#三、基础概念" aria-hidden="true">#</a> 三、基础概念</h2>\n<h3 id="_1、仓库" tabindex="-1"><a class="header-anchor" href="#_1、仓库" aria-hidden="true">#</a> 1、仓库</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="12.webp" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Maven%E8%AF%A6%E8%A7%A3/12.webp" data="aurora"></p>\n<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>仓库:用于存储资源，包含各种jar包</p>\n</div>\n<h4 id="仓库分类" tabindex="-1"><a class="header-anchor" href="#仓库分类" aria-hidden="true">#</a> 仓库分类:</h4>\n<ul>\n<li>本地仓库:自己电脑.上存储资源的仓库，连接远程仓库获取资源。</li>\n<li>远程仓库:非本机电脑上的仓库，为本地仓库提供资源。\n<ul>\n<li>中央仓库: Maven团队维护，存储所有资源的仓库。</li>\n<li>私服:部门/公司范围内存储资源的仓库，从中央仓库获取资源。</li>\n</ul>\n</li>\n</ul>\n<h4 id="私服的作用" tabindex="-1"><a class="header-anchor" href="#私服的作用" aria-hidden="true">#</a> 私服的作用:</h4>\n<ul>\n<li>保存具有版权的资源，包含购买或自主研发的jar包。\n<ul>\n<li>中央仓库中的jar都是开源的，不能存储具有版权的资源。</li>\n</ul>\n</li>\n<li>一定范围内共享资源，仅对内部开放，不对外共享。</li>\n</ul>\n<h3 id="_2、坐标" tabindex="-1"><a class="header-anchor" href="#_2、坐标" aria-hidden="true">#</a> 2、坐标</h3>\n<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>Maven中的坐标用于描述仓库中资源的位置</p>\n</div>\n<p>maven中央仓库地址（可直接访问）：<a href="https://repo1.maven.org/maven2/" target="_blank" rel="noopener noreferrer">中央仓库<ExternalLinkIcon/></a></p>\n<h4 id="maven坐标主要组成" tabindex="-1"><a class="header-anchor" href="#maven坐标主要组成" aria-hidden="true">#</a> Maven坐标主要组成</h4>\n<table>\n<thead>\n<tr>\n<th style="text-align:center">标签</th>\n<th style="text-align:center">释意</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style="text-align:center">groupld</td>\n<td style="text-align:center">定义当前Maven项目隶属组织名称(通常是域名反写，例如: org.mybatis)</td>\n</tr>\n<tr>\n<td style="text-align:center">artifactld</td>\n<td style="text-align:center">定义当前Maven项目名称(通常是模块名称，例如CRM、SMS)</td>\n</tr>\n<tr>\n<td style="text-align:center">version</td>\n<td style="text-align:center">定义当前项目版本号</td>\n</tr>\n<tr>\n<td style="text-align:center">packaging</td>\n<td style="text-align:center">定义该项目的打包方式</td>\n</tr>\n</tbody>\n</table>\n<h4 id="maven坐标的作用" tabindex="-1"><a class="header-anchor" href="#maven坐标的作用" aria-hidden="true">#</a> Maven坐标的作用</h4>\n<p>使用唯一标识，唯一性定位资源位置，通过该标识可以将资源的识别与下载工作交由机器完成</p>\n<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>maven坐标查询网站：<a href="https://mvnrepository.com/" target="_blank" rel="noopener noreferrer">Maven Repository: Search/Browse/Explore (mvnrepository.com)<ExternalLinkIcon/></a></p>\n</div>\n<h2 id="四、创建一个maven项目-使用idea2022-2" tabindex="-1"><a class="header-anchor" href="#四、创建一个maven项目-使用idea2022-2" aria-hidden="true">#</a> 四、创建一个maven项目（使用IDEA2022.2）</h2>\n<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>打开idea → New Project → Name(输入项目名称) → Build system(选择打包方式为Maven) → Advanced Settings(设置项目编号及版本)</p>\n<p><span style="color:red"><strong>具体操作如下GIF图所示</strong></span></p>\n</div>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="13.gif" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Maven%E8%AF%A6%E8%A7%A3/13.gif" data="aurora"></p>\n<h3 id="_1、工程目录结构" tabindex="-1"><a class="header-anchor" href="#_1、工程目录结构" aria-hidden="true">#</a> 1、工程目录结构</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="14.jpg" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Maven%E8%AF%A6%E8%A7%A3/14.jpg" data="aurora"></p>\n<h3 id="_2、maven构建项目命令" tabindex="-1"><a class="header-anchor" href="#_2、maven构建项目命令" aria-hidden="true">#</a> 2、Maven构建项目命令</h3>\n<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>Maven构建命令使用mvn开头，后面添加功能参数，可以一次执行多个命令，使用空格分隔。</p>\n<p>这里只展示常用的几个参数，其他参数请自行查看官网</p>\n</div>\n<table>\n<thead>\n<tr>\n<th style="text-align:center">命令</th>\n<th style="text-align:center">释意</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style="text-align:center">mvn compile</td>\n<td style="text-align:center">编译项目</td>\n</tr>\n<tr>\n<td style="text-align:center">mvn clean</td>\n<td style="text-align:center">清理缓存</td>\n</tr>\n<tr>\n<td style="text-align:center">mvn test</td>\n<td style="text-align:center">测试打包</td>\n</tr>\n<tr>\n<td style="text-align:center">mvn package</td>\n<td style="text-align:center">打包项目</td>\n</tr>\n<tr>\n<td style="text-align:center">mvn install</td>\n<td style="text-align:center">安装到本地仓库（集成了编译及打包命令）</td>\n</tr>\n</tbody>\n</table>\n<h3 id="_3、在idea中配置maven" tabindex="-1"><a class="header-anchor" href="#_3、在idea中配置maven" aria-hidden="true">#</a> 3、在IDEA中配置maven</h3>\n<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>File → Settings →<code>Build,Execution,Deployment</code> → Build Tools → Maven</p>\n</div>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="15.png" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Maven%E8%AF%A6%E8%A7%A3/15.png" data="aurora"></p>\n<div class="custom-container warning"><p class="custom-container-title">WARNING</p>\n<p>注意，如果只是这样配置的话我们每次创建maven项目就要重新配置一次。</p>\n<p>否则，idea默认使用自带的maven配置，也就是自动把所有依赖全部下载到C盘中。</p>\n</div>\n<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>配置新建项目时自动初始化maven配置</p>\n<p>File → New Project Setup → Settings For New Projects</p>\n<p>打开后设置方式参上图</p>\n<p>各版本的IDEA此设置的路径都有所偏差，但是意思都差不多，在File选项里找到<span style="color:red"><strong>Settings For New Projects</strong></span>即可</p>\n</div>\n<h2 id="五、依赖管理" tabindex="-1"><a class="header-anchor" href="#五、依赖管理" aria-hidden="true">#</a> 五、依赖管理</h2>\n<h3 id="_1、配置依赖" tabindex="-1"><a class="header-anchor" href="#_1、配置依赖" aria-hidden="true">#</a> 1、配置依赖</h3>\n<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>依赖指当前项目运行所需的jar,一个项目可以设置多个依赖。</p>\n</div>\n<p>格式如下：</p>\n<div class="language-xml ext-xml line-numbers-mode"><pre v-pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>\n    <span class="token comment">&lt;!--具体依赖--\x3e</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>\n        <span class="token comment">&lt;!--依赖所属群组id--\x3e</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>\n        <span class="token comment">&lt;!--依赖所属项目id--\x3e</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>\n        <span class="token comment">&lt;!--依赖版本号--\x3e</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="_2、依赖传递" tabindex="-1"><a class="header-anchor" href="#_2、依赖传递" aria-hidden="true">#</a> 2、依赖传递</h3>\n<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>依赖具有传递性:</p>\n<p>​\t\t直接依赖:在当前项目中通过依赖配置建立的依赖关系</p>\n<p>​\t\t间接依赖: 被资源的资源如果依赖其他资源，当前项目间接依赖其他资源</p>\n</div>\n<h3 id="_3、依赖传递冲突问题的优先顺序" tabindex="-1"><a class="header-anchor" href="#_3、依赖传递冲突问题的优先顺序" aria-hidden="true">#</a> 3、依赖传递冲突问题的优先顺序</h3>\n<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>路径优先:当依赖中出现相同的资源时，层级越深，优先级越低，层级越浅，优先级越高</p>\n<p>声明优先:当资源在相同层级被依赖时，配置顺序靠前的覆盖配置顺序靠后的</p>\n<p>特殊优先:当同级配置了相同资源的不同版本，后配置的覆盖先配置的</p>\n</div>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="16.jpg" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Maven%E8%AF%A6%E8%A7%A3/16.jpg" data="aurora"></p>\n<h3 id="_4、可选依赖" tabindex="-1"><a class="header-anchor" href="#_4、可选依赖" aria-hidden="true">#</a> 4、可选依赖</h3>\n<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>可选依赖指对外隐藏当前所依赖的资源——<span style="color:red"><strong>不透明</strong></span></p>\n</div>\n<div class="language-xml ext-xml line-numbers-mode"><pre v-pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>\n    <span class="token comment">&lt;!--具体依赖--\x3e</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>\n        <span class="token comment">&lt;!--依赖所属群组id--\x3e</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>\n        <span class="token comment">&lt;!--依赖所属项目id--\x3e</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>\n        <span class="token comment">&lt;!--依赖版本号--\x3e</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>\n        <span class="token comment">&lt;!--可选依赖指对外隐藏当前所依赖的资源--不透明--\x3e</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="_5、排除依赖" tabindex="-1"><a class="header-anchor" href="#_5、排除依赖" aria-hidden="true">#</a> 5、排除依赖</h3>\n<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>排除依赖指主动断开依赖的资源，被排除的资源无需指定版本——<span style="color:red"><strong>不需要</strong></span></p>\n<p>一般来讲只有在多个依赖项目冲突的时候才会使用exclusions来排除掉其他依赖</p>\n</div>\n<div class="language-xml ext-xml line-numbers-mode"><pre v-pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.hamcrest<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>hamcrest-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="_6、依赖范围" tabindex="-1"><a class="header-anchor" href="#_6、依赖范围" aria-hidden="true">#</a> 6、依赖范围</h3>\n<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>依赖的jar默认情况可以在任何地方使用，可以通过scope标签设定其作用范围</p>\n<p>作用范围</p>\n<ul>\n<li>主程序范围有效(main文件夹范围内)</li>\n<li>测试程序范围有效(test文件夹范围内)</li>\n<li>是否参与打包(package指令范围内)</li>\n</ul>\n</div>\n<table>\n<thead>\n<tr>\n<th style="text-align:center">scope</th>\n<th style="text-align:center">主代码</th>\n<th style="text-align:center">测试代码</th>\n<th style="text-align:center">打包</th>\n<th style="text-align:center">范例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style="text-align:center">compile（依赖）</td>\n<td style="text-align:center">Y</td>\n<td style="text-align:center">Y</td>\n<td style="text-align:center">Y</td>\n<td style="text-align:center">log4j</td>\n</tr>\n<tr>\n<td style="text-align:center">test</td>\n<td style="text-align:center"></td>\n<td style="text-align:center">Y</td>\n<td style="text-align:center"></td>\n<td style="text-align:center">junit</td>\n</tr>\n<tr>\n<td style="text-align:center">provided</td>\n<td style="text-align:center">Y</td>\n<td style="text-align:center">Y</td>\n<td style="text-align:center"></td>\n<td style="text-align:center">servlet-api</td>\n</tr>\n<tr>\n<td style="text-align:center">runtime</td>\n<td style="text-align:center"></td>\n<td style="text-align:center"></td>\n<td style="text-align:center">Y</td>\n<td style="text-align:center">jdbc</td>\n</tr>\n</tbody>\n</table>\n<h3 id="_7、依赖范围传递性" tabindex="-1"><a class="header-anchor" href="#_7、依赖范围传递性" aria-hidden="true">#</a> 7、依赖范围传递性</h3>\n<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>带有依赖范围的资源在进行传递时，作用范围将受到影响</p>\n</div>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="17.jpg" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Maven%E8%AF%A6%E8%A7%A3/17.jpg" data="aurora"></p>\n<h2 id="六、生命周期" tabindex="-1"><a class="header-anchor" href="#六、生命周期" aria-hidden="true">#</a> 六、生命周期</h2>\n<h3 id="_1、项目构建生命周期" tabindex="-1"><a class="header-anchor" href="#_1、项目构建生命周期" aria-hidden="true">#</a> 1、项目构建生命周期</h3>\n<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<ul>\n<li>Maven构建生命周期描述的是一次构建过程经历经历了多少个事件</li>\n<li>Maven对项目构建的生命周期划分为3套\n<ul>\n<li>clean: 清理工作</li>\n<li>default:核心工作，例如编译，测试,打包,部署等</li>\n<li>site: 产生报告，发布站点等</li>\n</ul>\n</li>\n</ul>\n</div>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="18.png" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Maven%E8%AF%A6%E8%A7%A3/18.png" data="aurora"></p>\n<h3 id="_2、clean生命周期" tabindex="-1"><a class="header-anchor" href="#_2、clean生命周期" aria-hidden="true">#</a> 2、clean生命周期</h3>\n<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>pre-clean         执行一-些需要在clean之前完成的工作</p>\n<p>clean                 移除所有上一次构建生成的文件post-clean</p>\n<p>post-clean        执行一些需要在clean之 后立刻完成的工作</p>\n</div>\n<h3 id="_3、default构建生命周期" tabindex="-1"><a class="header-anchor" href="#_3、default构建生命周期" aria-hidden="true">#</a> 3、default构建生命周期</h3>\n<table>\n<thead>\n<tr>\n<th style="text-align:left">阶段</th>\n<th style="text-align:left">释意</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style="text-align:left">validate（校验）</td>\n<td style="text-align:left">校验项目是否正确并且所有必要的信息可以完成项目的构建过程</td>\n</tr>\n<tr>\n<td style="text-align:left">initialize（初始化）</td>\n<td style="text-align:left">初始化构建状态，比如设置属性值</td>\n</tr>\n<tr>\n<td style="text-align:left">generate-sources（生成源代码）</td>\n<td style="text-align:left">生成包含在编译阶段中的任何源代码</td>\n</tr>\n<tr>\n<td style="text-align:left">process-sources（处理源代码）</td>\n<td style="text-align:left">处理源代码，比如说，过滤任意值</td>\n</tr>\n<tr>\n<td style="text-align:left">generate-resources（生成资源文件）</td>\n<td style="text-align:left">生成将会包含在项目包中的资源文件</td>\n</tr>\n<tr>\n<td style="text-align:left">precess-resources（处理资源文件）</td>\n<td style="text-align:left">复制和处理资源到目标目录，为打包阶段做好准备</td>\n</tr>\n<tr>\n<td style="text-align:left">complie（编译）</td>\n<td style="text-align:left">编译项目的源代码</td>\n</tr>\n<tr>\n<td style="text-align:left">process-classes（处理类文件）</td>\n<td style="text-align:left">处理编译生成的文件，比如说对Java class文件做字节码改善优化</td>\n</tr>\n<tr>\n<td style="text-align:left">generate-test-sources（生成测试源代码）</td>\n<td style="text-align:left">生成包含在编译阶段中的任何测试源代码</td>\n</tr>\n<tr>\n<td style="text-align:left">process-test-sources（处理测试源代码）</td>\n<td style="text-align:left">处理测试源代码，比如说，过滤任意值</td>\n</tr>\n<tr>\n<td style="text-align:left">generate-test-resources（生成测试资源文件）</td>\n<td style="text-align:left">为测试创建资源文件</td>\n</tr>\n<tr>\n<td style="text-align:left">precess-test-resources（处理测试资源文件）</td>\n<td style="text-align:left">复制和处理测试资源到目标目录</td>\n</tr>\n<tr>\n<td style="text-align:left">test-compile（编译测试源码）</td>\n<td style="text-align:left">编译测试源代码到测试目标目录</td>\n</tr>\n<tr>\n<td style="text-align:left">process-test-classes（处理测试类文件）</td>\n<td style="text-align:left">处理测试源代码编译生成的文件</td>\n</tr>\n<tr>\n<td style="text-align:left">test（测试）</td>\n<td style="text-align:left">使用合适的单元测试框架运行测试（Juint是其中之一）</td>\n</tr>\n<tr>\n<td style="text-align:left">prepare-package（准备打包）</td>\n<td style="text-align:left">在实际打包之前，执行任何的必要的操作为打包做准备</td>\n</tr>\n<tr>\n<td style="text-align:left">package（打包）</td>\n<td style="text-align:left">将编译后的代码打包成可分发格式的文件，比如JAR、WAR或者EAR文件</td>\n</tr>\n<tr>\n<td style="text-align:left">pre-intergration-test（集成测试前）</td>\n<td style="text-align:left">在执行集成测试前进行必要的动作，比如说，搭建需要的环境</td>\n</tr>\n<tr>\n<td style="text-align:left">intergration-test（集成测试）</td>\n<td style="text-align:left">处理和部署项目到可以运行集成测试环境中</td>\n</tr>\n<tr>\n<td style="text-align:left">post-intergration-test（集成测试后）</td>\n<td style="text-align:left">在执行集成测试完成后进行必要的动作，比如说，清理集成测试环境</td>\n</tr>\n<tr>\n<td style="text-align:left">verify（验证）</td>\n<td style="text-align:left">运行任意的检查来验证项目包有效且达到质量标准</td>\n</tr>\n<tr>\n<td style="text-align:left">install（安装）</td>\n<td style="text-align:left">安装项目包到本地仓库，这样项目包可以用做其他本地项目的依赖</td>\n</tr>\n<tr>\n<td style="text-align:left">deploy（部署）</td>\n<td style="text-align:left">将最终的项目包复制到远程仓库中与其他开发者和项目共享</td>\n</tr>\n</tbody>\n</table>\n<h3 id="_4、site构建生命周期" tabindex="-1"><a class="header-anchor" href="#_4、site构建生命周期" aria-hidden="true">#</a> 4、site构建生命周期</h3>\n<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>pre-site     执行一些需要在生成站点文档之前完成的工作</p>\n<p>site        生成项目的站点文档</p>\n<p>post-site    执行一些需要在生成站点文档之后完成的工作，并且为部署做准备</p>\n<p>site-deploy  将生成的站点文档部署到特定的服务器上</p>\n</div>\n<h2 id="七、插件" tabindex="-1"><a class="header-anchor" href="#七、插件" aria-hidden="true">#</a> 七、插件</h2>\n<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>插件与生命周期内的阶段绑定，在执行到对应生命周期时执行对应的插件功能</p>\n<p>默认maven在各个生命周期上绑定有预设的功能</p>\n<p>通过插件可以自定义其他功能</p>\n</div>\n<div class="language-xml ext-xml line-numbers-mode"><pre v-pre class="language-xml"><code><span class="token comment">&lt;!--构建--\x3e</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>\n    <span class="token comment">&lt;!--    设置插件--\x3e</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>  \n        <span class="token comment">&lt;!--  具体插件配置--\x3e</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>\n            <span class="token comment">&lt;!-- 组名--\x3e</span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>\n            <span class="token comment">&lt;!--  插件名--\x3e</span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-source-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>\n            <span class="token comment">&lt;!-- 版本号--\x3e</span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">></span></span>\n                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">></span></span>\n                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">></span></span>\n                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">></span></span>jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">></span></span>\n                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">></span></span>test-jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">></span></span>\n                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">></span></span>\n                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>phase</span><span class="token punctuation">></span></span>generate-test-resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>phase</span><span class="token punctuation">></span></span>\n                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">></span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="19.jpg" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Maven%E8%AF%A6%E8%A7%A3/19.jpg" data="aurora"></p>\n',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/maven/Maven详解.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"Maven详解",filePath:"D:/blog/docs/maven/Maven详解.md",filePathRelative:"maven/Maven详解.md",componentFilePath:"D:/blog/docs/.vuepress/.temp/pages/maven/Maven详解.html.vue",componentFilePathRelative:"pages/maven/Maven详解.html.vue",componentFileChunkName:"v-6c26f442",dataFilePath:"D:/blog/docs/.vuepress/.temp/pages/maven/Maven详解.html.js",dataFilePathRelative:"pages/maven/Maven详解.html.js",dataFileChunkName:"v-6c26f442",htmlFilePath:"D:/blog/docs/.vuepress/dist/maven/Maven详解.html",htmlFilePathRelative:"maven/Maven详解.html"},{data:{key:"v-435885cf",path:"/mybatis/Mybatis%E8%AF%A6%E8%A7%A3.html",title:"Mybatis详解",lang:"zh-CN",frontmatter:{title:"Mybatis详解",date:"2022/9/6 08:44",tag:["Java","mybatis","框架","ssm"],categories:["后端"],coverUrl:"https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/mybatis-logo.png"},excerpt:"",headers:[{level:2,title:"Mybatis简介",slug:"mybatis简介",children:[{level:3,title:"MyBatis历史",slug:"mybatis历史",children:[]},{level:3,title:"MyBatis特性",slug:"mybatis特性",children:[]},{level:3,title:"MyBatis下载",slug:"mybatis下载",children:[]},{level:3,title:"和其它持久化层技术对比",slug:"和其它持久化层技术对比",children:[]}]},{level:2,title:"搭建MyBatis",slug:"搭建mybatis",children:[{level:3,title:"创建数据库",slug:"创建数据库",children:[]},{level:3,title:"创建maven工程",slug:"创建maven工程",children:[]},{level:3,title:"创建MyBatis的核心配置文件",slug:"创建mybatis的核心配置文件",children:[]},{level:3,title:"创建mapper接口",slug:"创建mapper接口",children:[]},{level:3,title:"创建MyBatis的映射文件",slug:"创建mybatis的映射文件",children:[]},{level:3,title:"注册（引入）映射文件",slug:"注册-引入-映射文件",children:[]},{level:3,title:"通过Junit测试功能(main方法也可以)",slug:"通过junit测试功能-main方法也可以",children:[]}]},{level:2,title:"核心配置文件详解",slug:"核心配置文件详解",children:[]},{level:2,title:"默认的类型别名",slug:"默认的类型别名",children:[{level:3,title:"基本数据类型映射",slug:"基本数据类型映射",children:[]},{level:3,title:"封装类型映射",slug:"封装类型映射",children:[]}]},{level:2,title:"MyBatis的增删改查",slug:"mybatis的增删改查",children:[{level:3,title:"1、添加",slug:"_1、添加",children:[]},{level:3,title:"2、删除",slug:"_2、删除",children:[]},{level:3,title:"3、修改",slug:"_3、修改",children:[]},{level:3,title:"4、查询",slug:"_4、查询",children:[]}]},{level:2,title:"MyBatis获取参数值的两种方式（重点）",slug:"mybatis获取参数值的两种方式-重点",children:[{level:3,title:"单个字面量类型的参数",slug:"单个字面量类型的参数",children:[]},{level:3,title:"多个字面量类型的参数",slug:"多个字面量类型的参数",children:[]}]}],git:{}},key:"v-435885cf",path:"/mybatis/Mybatis%E8%AF%A6%E8%A7%A3.html",title:"Mybatis详解",lang:"zh-CN",frontmatter:{title:"Mybatis详解",date:"2022/9/6 08:44",tag:["Java","mybatis","框架","ssm"],categories:["后端"],coverUrl:"https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/mybatis-logo.png"},excerpt:"",headers:[{level:2,title:"Mybatis简介",slug:"mybatis简介",children:[{level:3,title:"MyBatis历史",slug:"mybatis历史",children:[]},{level:3,title:"MyBatis特性",slug:"mybatis特性",children:[]},{level:3,title:"MyBatis下载",slug:"mybatis下载",children:[]},{level:3,title:"和其它持久化层技术对比",slug:"和其它持久化层技术对比",children:[]}]},{level:2,title:"搭建MyBatis",slug:"搭建mybatis",children:[{level:3,title:"创建数据库",slug:"创建数据库",children:[]},{level:3,title:"创建maven工程",slug:"创建maven工程",children:[]},{level:3,title:"创建MyBatis的核心配置文件",slug:"创建mybatis的核心配置文件",children:[]},{level:3,title:"创建mapper接口",slug:"创建mapper接口",children:[]},{level:3,title:"创建MyBatis的映射文件",slug:"创建mybatis的映射文件",children:[]},{level:3,title:"注册（引入）映射文件",slug:"注册-引入-映射文件",children:[]},{level:3,title:"通过Junit测试功能(main方法也可以)",slug:"通过junit测试功能-main方法也可以",children:[]}]},{level:2,title:"核心配置文件详解",slug:"核心配置文件详解",children:[]},{level:2,title:"默认的类型别名",slug:"默认的类型别名",children:[{level:3,title:"基本数据类型映射",slug:"基本数据类型映射",children:[]},{level:3,title:"封装类型映射",slug:"封装类型映射",children:[]}]},{level:2,title:"MyBatis的增删改查",slug:"mybatis的增删改查",children:[{level:3,title:"1、添加",slug:"_1、添加",children:[]},{level:3,title:"2、删除",slug:"_2、删除",children:[]},{level:3,title:"3、修改",slug:"_3、修改",children:[]},{level:3,title:"4、查询",slug:"_4、查询",children:[]}]},{level:2,title:"MyBatis获取参数值的两种方式（重点）",slug:"mybatis获取参数值的两种方式-重点",children:[{level:3,title:"单个字面量类型的参数",slug:"单个字面量类型的参数",children:[]},{level:3,title:"多个字面量类型的参数",slug:"多个字面量类型的参数",children:[]}]}],content:'\r\n## Mybatis简介\r\n\r\n### MyBatis历史\r\n\r\n::: tip\r\n\r\nMyBatis最初是Apache的一个开源项目iBatis, 2010年6月这个项目由Apache Software Foundation迁移到了Google Code。随着开发团队转投Google Code旗下，iBatis3.x正式更名为MyBatis。代码于2013年11月迁移到Github\r\n\r\niBatis一词来源于“internet”和“abatis”的组合，是一个基于Java的持久层框架。iBatis提供的持久层框架包括SQL Maps和Data Access Objects（DAO）\r\n\r\n:::\r\n\r\n### MyBatis特性\r\n\r\n1. MyBatis 是支持定制化 SQL、存储过程以及高级映射的优秀的持久层框架\r\n2. MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集\r\n3. MyBatis可以使用简单的XML或注解用于配置和原始映射，将接口和Java的POJO（Plain Old Java Objects，普通的Java对象）映射成数据库中的记录\r\n4. MyBatis 是一个半自动的ORM（Object Relation Mapping）框架\r\n\r\n### MyBatis下载\r\n\r\nMybatis下载地址：[GitHub - mybatis/mybatis-3: MyBatis SQL mapper framework for Java](https://github.com/mybatis/mybatis-3)\r\n\r\n![1.png](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/1.png)\r\n\r\n### 和其它持久化层技术对比\r\n\r\n- JDBC\r\n\r\n  - SQL 夹杂在Java代码中耦合度高，导致硬编码内伤\r\n  - 维护不易且实际开发需求中 SQL 有变化，频繁修改的情况多见\r\n  - 代码冗长，开发效率低\r\n- Hibernate 和 JPA\r\n  - 操作简便，开发效率高\r\n  - 程序中的长难复杂 SQL 需要绕过框架\r\n  - 内部自动生产的 SQL，不容易做特殊优化\r\n  - 基于全映射的全自动框架，大量字段的 POJO 进行部分映射时比较困难\r\n  - 反射操作太多，导致数据库性能下降\r\n- MyBatis\r\n  - 轻量级，性能出色\r\n  - SQL 和 Java 编码分开，功能边界清晰。Java代码专注业务、SQL语句专注数据\r\n  - 开发效率稍逊于HIbernate，但是完全能够接受\r\n\r\n## 搭建MyBatis\r\n\r\n::: tip 开发环境\r\n\r\nIDE：IntelliJ IDEA 2022.2.1\r\n\r\n构建工具：apache-maven-3.8.4\r\n\r\nMySQL版本：mysql 8.0.25\r\n\r\nMyBatis版本：MyBatis 3.5.7\r\n\r\n:::\r\n\r\n### 创建数据库\r\n\r\n```sql\r\nSET NAMES utf8mb4;\r\nSET FOREIGN_KEY_CHECKS = 0;\r\n\r\n-- ----------------------------\r\n-- Table structure for games\r\n-- ----------------------------\r\nDROP TABLE IF EXISTS `games`;\r\nCREATE TABLE `games`  (\r\n  `id` int NOT NULL AUTO_INCREMENT,\r\n  `username` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,\r\n  `passwrod` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,\r\n  `type` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,\r\n  `company` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,\r\n  `year` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,\r\n  PRIMARY KEY (`id`) USING BTREE\r\n) ENGINE = InnoDB AUTO_INCREMENT = 5 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci ROW_FORMAT = Dynamic;\r\n\r\n-- ----------------------------\r\n-- Records of games\r\n-- ----------------------------\r\nINSERT INTO `games` VALUES (1, \'admin\', \'123456\', \'即时战略\', \'暴雪\', \'1995\');\r\nINSERT INTO `games` VALUES (2, \'test1\', \'123456\', \'RPG\', \'光荣\', \'1995\');\r\nINSERT INTO `games` VALUES (3, \'test2\', \'123456\', \'即时战略\', \'拳头\', \'2000\');\r\nINSERT INTO `games` VALUES (4, \'test3\', \'123456\', \'FPS\', \'未知\', \'1988\');\r\n\r\nSET FOREIGN_KEY_CHECKS = 1;\r\n```\r\n\r\n### 创建maven工程\r\n\r\n::: warning 警告\r\n\r\n在学习本文章前应先熟悉maven构建，并且在idea中已将maven配置好\r\n\r\n:::\r\n\r\n若还不知道maven工程如何构建，请点击查看：[Maven详解(基础到高级)(入门到入土) | 信仰的个人博客 (hyd0.cc)](https://hyd0.cc/maven/Maven详解.html)\r\n\r\n::: details 点击查看示例\r\n\r\n![2.png](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/2.png)\r\n\r\n:::\r\n\r\n构建完成后再工程根目录中找到pom.xml文件，引入对应依赖\r\n\r\n```xml\r\n<dependencies>\r\n    \x3c!-- Mybatis核心 --\x3e\r\n    <dependency>\r\n        <groupId>org.mybatis</groupId>\r\n        <artifactId>mybatis</artifactId>\r\n        <version>3.5.7</version>\r\n    </dependency>\r\n    \x3c!-- junit测试 --\x3e\r\n    <dependency>\r\n        <groupId>junit</groupId>\r\n        <artifactId>junit</artifactId>\r\n        <version>4.12</version>\r\n    </dependency>\r\n    \x3c!-- MySQL驱动 --\x3e\r\n    <dependency>\r\n        <groupId>mysql</groupId>\r\n        <artifactId>mysql-connector-java</artifactId>\r\n        <version>8.0.25</version>\r\n    </dependency>\r\n</dependencies>\r\n```\r\n\r\n::: details 点击查看示例\r\n\r\n![3.png](https://bdqn-blog.oss-cn-beijing.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/3.png)\r\n\r\n:::\r\n\r\n::: details 常见问题及解决方案\r\n\r\n因网速太慢导致依赖下载失败或者中途不小心点到退出\r\n\r\n解决方案：\r\n\r\n![4.png](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/4.png)\r\n\r\n若还是不行请更换网络或者配置maven国内镜像仓库后重试\r\n\r\n[配置阿里云的镜像仓库)](https://hyd0.cc/maven/Maven详解.html#_5、配置阿里云的镜像仓库)\r\n\r\n:::\r\n\r\n### 创建MyBatis的核心配置文件\r\n\r\n::: tip\r\n\r\n习惯上命名为mybatis-config.xml，这个文件名仅仅只是建议，并非强制要求。将来整合Spring之后，这个配置文件可以省略，但是其中的配置项非常重要，关乎到我们后面所有的开发。\r\n\r\n核心配置文件主要用于配置连接数据库的环境以及MyBatis的全局配置信息\r\n\r\n核心配置文件存放的位置是`src/main/resources`目录下\r\n\r\n:::\r\n\r\n```xml\r\n<?xml version="1.0" encoding="UTF-8" ?>\r\n<!DOCTYPE configuration\r\n        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"\r\n        "http://mybatis.org/dtd/mybatis-3-config.dtd">\r\n<configuration>\r\n    \x3c!-- 设置连接数据库的环境 default代表的是当前选择的环境 --\x3e\r\n    <environments default="development">\r\n        \x3c!-- 配置环境并将该套环境标识为development，供父级标签使用，可配置多套环境  --\x3e\r\n        <environment id="development">\r\n            \x3c!-- 配置事务管理器为JDBC --\x3e\r\n            <transactionManager type="JDBC"/>\r\n            \x3c!-- 配置数据源 --\x3e\r\n            <dataSource type="POOLED">\r\n                \x3c!-- 数据库驱动，数据库版本8.0以下的不用加cj --\x3e\r\n                <property name="driver" value="com.mysql.cj.jdbc.Driver"/>\r\n                \x3c!-- 数据库连接地址，8.0以上记得加上时区，否则会导致查询时间错乱 serverTimezone=UTC --\x3e\r\n                <property name="url" value="jdbc:mysql://localhost:3306/game?serverTimezone=UTC"/>\r\n                \x3c!-- 账号 --\x3e\r\n                <property name="username" value="root"/>\r\n                \x3c!-- 密码 --\x3e\r\n                <property name="password" value="1234"/>\r\n            </dataSource>\r\n        </environment>\r\n    </environments>\r\n</configuration>\r\n```\r\n\r\n::: details 点击查看示例\r\n\r\n在资源文件夹`src/main/resources`中，创建一个名为mybatis-config.xml的配置文件\r\n\r\n![5.png](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/5.png)\r\n\r\n根据注释进行配套环境设置\r\n\r\n![6.png](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/6.png)\r\n\r\n:::\r\n\r\n### 创建mapper接口\r\n\r\n::: tip\r\n\r\nMybatis中的mapper接口相当于以前的dao，但是区别在于，mapper仅仅是接口，我们不需要提供实现类\r\n\r\n:::\r\n\r\n```java\r\npackage cn.bdqn.mapper;\r\n\r\n/**\r\n * @ClassName: GameMapper\r\n * @Description: mapper接口\r\n * @Date: 2022-09-06 11:23:10\r\n * @Author: HuangYaoDong\r\n */\r\npublic interface GameMapper {\r\n\r\n    /**\r\n      * 添加游戏\r\n      *\r\n      * @date 2022/9/6 11:30\r\n      * @author HangYaoDong\r\n      * @return int 受影响的行数\r\n      */\r\n    int insertGame();\r\n\r\n}\r\n```\r\n\r\n::: details 点击查看示例\r\n\r\n![7.png](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/7.png)\r\n\r\n:::\r\n\r\n### 创建MyBatis的映射文件\r\n\r\n::: tip 相关概念\r\n\r\nORM（Object Relationship Mapping）对象关系映射\r\n\r\n- 对象：Java的实体类对象\r\n- 关系：关系型数据库\r\n- 映射：二者之间的对应关系\r\n\r\n:::\r\n\r\n| Java概念 | 数据库概念 |\r\n| :------: | :--------: |\r\n|    类    |     表     |\r\n|   属性   |  字段/列   |\r\n|   对象   |  记录/行   |\r\n\r\n<span style="color:red" >**映射文件的命名规则**</span>：与接口同名的xml文件\r\n\r\nMyBatis中可以面向接口操作数据，但是要保证接口及映射文件的一致：\r\n\r\n- mapper接口的全路径名（包名+类名）和映射文件的命名空间（namespace）保持一致\r\n- mapper接口中方法的方法名和映射文件中编写SQL的标签的id属性保持一致\r\n\r\n```xml\r\n<?xml version="1.0" encoding="UTF-8" ?>  \r\n<!DOCTYPE mapper  \r\nPUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  \r\n"http://mybatis.org/dtd/mybatis-3-mapper.dtd">  \r\n<mapper namespace="cn.bdqn.mapper.GameMapper">  \r\n\t\x3c!--int insertGame();--\x3e  \r\n\t<insert id="insertGame">  \r\n\t\tinsert into games(username,password,type,company,year) values(\'test4\',\'123456\',\'FPS\',\'未知\',\'2022\')  \r\n\t</insert>  \r\n</mapper>\r\n```\r\n\r\n::: details 点击查看示例\r\n\r\n![8.png](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/8.png)\r\n\r\n::: warning 注意\r\n\r\n添加`<insert></insert>`，修改`<update></update>`，删除`<delete></delete>`三个标签的返回值默认都是<span style="red">**int**</span>类型\r\n\r\n:::\r\n\r\n### 注册（引入）映射文件\r\n\r\n我们在映射文件中定义完SQL映射语句之后，首先，我们需要告诉mybatis到哪里去找到这些语句。但是，在自动查找资源方面，Java并没有提供一个很好的解决方案，所以最好的方法就是直接告诉mybatis到哪里去找映射文件，如下：\r\n\r\n```xml\r\n<mappers>\r\n    <mapper resource="mapper/GameMapper.xml"></mapper>\r\n</mappers>\r\n```\r\n\r\n::: details 点击查看解析\r\n\r\n![9.png](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/9.png)\r\n\r\n:::\r\n\r\nmybatis给我们提供了四种注册映射文件的方式，详情请点击下方查看：\r\n\r\n::: details 点击查看<span style="color:red" >映射器（mappers）</span>详细配置\r\n\r\n#### 1、resource\r\n\r\nresource中填写的路径是针对于编译后映射文件的所处位置，可从编译文件夹中查看，idea是`out`文件夹。\r\n\r\n若映射文件处于资源文件夹(resources)中时，resource属性中填写的就是映射文件与resources的相对路径。\r\n\r\n若映射文件处于java文件夹其下，那resource属性中填写的就是映射文件与java的相对路径，注意，在此环境下包名也算是文件夹，需要以路径的形式写入。\r\n\r\n![10.png](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/10.png)\r\n\r\n#### 2、url\r\n\r\n直接使用对于mybatis映射文件的绝对路径或者相对路径，这个使用的比较少，仅做了解扩展即可\r\n\r\n![11.png](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/11.png)\r\n\r\n#### 3、class\r\n\r\nclass属性比较特殊，他是直接注册当前接口，一般来讲都是在无映射文件的时候直接在接口的方法上方使用注解进行开发才会用到的，例如：\r\n\r\n![12.png](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/12.png)\r\n\r\n<span style="color:red" >**不推荐使用此种模式开发，因为当遇到复杂sql的时候整个sql语句会显得特别杂乱，不好维护**</span>\r\n\r\n#### 4、package标签\r\n\r\n以上三种方式都是只要你有一个接口或者一个映射文件就必须要去mybatis配置文件中注册一次，也就是说如果你有100个接口，那么你就要写100次\r\n\r\n`<mapper resource="">`标签\r\n\r\n这样太过于繁琐，并且也不利于维护，所以mybatis给我们提供了一种批量注册的方式，虽然说局限性有点儿大\r\n\r\n首先，要使用package标签必须保证：\r\n\r\n1. 当前所有的接口及映射文件必须位于同一个包下\r\n2. 映射文件的名称必须和接口类名一致\r\n\r\n当满足以上条件时，我们只需要在package标签的name属性中填入接口及映射文件所在的全路径包名即可， 并且无论有多少个接口都能够实现自动注册\r\n\r\n方式一：\r\n\r\n![13.png](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/13.png)\r\n\r\n方式二：\r\n\r\n![19.png](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/19.png)\r\n\r\n::: warning 提示\r\n\r\n因为mybatis的判定方式是编译后的文件夹，所以我们可以直接在Resources中使用相同目录的方式让映射文件与接口处于同一个包下\r\n\r\n:::\r\n\r\n### 通过Junit测试功能(main方法也可以)\r\n\r\n::: tip\r\n\r\n通过Junit的`@Test`注解可以实现类似于main方法一样的运行，无需通过服务器编译调用\r\n\r\n使用方式也简单，只需把`@Test`注解加在你要调用的方法上方即可\r\n\r\n:::\r\n\r\n```java\r\npackage cn.bdqn.mapper;\r\n\r\nimport org.apache.ibatis.io.Resources;\r\nimport org.apache.ibatis.session.SqlSession;\r\nimport org.apache.ibatis.session.SqlSessionFactory;\r\nimport org.apache.ibatis.session.SqlSessionFactoryBuilder;\r\nimport org.junit.Test;\r\n\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\n\r\n/**\r\n * @ClassName: UserMapperTest\r\n * @Description: 测试类\r\n * @Date: 2022-09-07 08:50:08\r\n * @Author: HuangYaoDong\r\n */\r\npublic class GameMapperTest {\r\n\r\n    @Test\r\n    public void testInsertGame() throws IOException {\r\n        //读取mybatis的核心配置文件\r\n        InputStream inputStream = Resources.getResourceAsStream("mybatis-config.xml");\r\n        //获取SqlSessionFactoryBuilder对象（工厂构建者）\r\n        SqlSessionFactoryBuilder sqlSessionFactoryBuilder = new SqlSessionFactoryBuilder();\r\n        //通过核心配置文件所对应的字节输入流创建工厂类SqlSessionFactory，生产SqlSession对象\r\n        SqlSessionFactory sqlSessionFactory = sqlSessionFactoryBuilder.build(inputStream);\r\n        //获取SqlSession，此时通过SqlSession对象所操作的sql都必须手动提交或者回滚事务\r\n        SqlSession sqlSession = sqlSessionFactory.openSession();\r\n        //通过代理模式创建GameMapper接口的代理实现类对象\r\n        GameMapper gameMapper = sqlSession.getMapper(GameMapper.class);\r\n        //调用UserMapper接口中的方法，就可以根据UserMapper的全类名匹配元素文件，通过调用的方法名匹配映射文件中的SQL标签，并执行标签中的SQL语句\r\n        int i = gameMapper.insertGame();\r\n        //提交事务，SqlSession默认是手动提交事务，即增删改不提交事务则数据库中不生效\r\n        sqlSession.commit();\r\n        System.out.println("数据库受影响行数："+i+"行");\r\n    }\r\n\r\n}\r\n```\r\n\r\n执行后控制台显示：\r\n\r\n```java\r\n数据库受影响行数：1行\r\n```\r\n\r\n::: details 点击查看解析\r\n\r\n![14.png](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/14.png)\r\n\r\n#### 步骤一：\r\n\r\n​\t\t使用Resources.getResourceAsStream读取`mybatis-config.xml`核心配置文件，这是为了获取到数据库链接以及在配置文件中所注册的映射文件位置\r\n\r\n#### 步骤二：\r\n\r\n​\t\t获取工厂构建者SqlSessionFactoryBuilder对象，此对象在全局中唯一的作用就是创建出SqlSessionFactory工厂对象，就好比是一个建筑团队，在一个地方去建造汽车工厂，工厂建造完了之后就不需要建筑团队了，工厂自己本身就可以源源不断的生产汽车，同理SqlSessionFactoryBuilder也是一样，当SqlSessionFactoryBuilder（建筑团队）把SqlSessionFactory（汽车工厂）构建完成之后，SqlSessionFactory就可以源源不断的生产SqlSession（汽车）\r\n\r\n|           对象           |                     解析                      |\r\n| :----------------------: | :-------------------------------------------: |\r\n| SqlSessionFactoryBuilder |  通过读取到的配置文件来构建SqlSessionFactory  |\r\n|    SqlSessionFactory     |   SqlSession工厂，专门用来生产SqlSession的    |\r\n|        SqlSession        | 完全包含以数据库为背景的所有执行SQL操作的方法 |\r\n\r\n总而言之，在绝大多数的时候，SqlSessionFactoryBuilder在全局中只会执行一次，所以大部分人都会把他设置为一个单例对象\r\n\r\n#### 步骤三：\r\n\r\n​\t\t通过代理模式创建GameMapper接口的代理实现类对象，使用SqlSession对象的实例获取到我们所要去调用的mapper接口，并且通过代理的方式将该类的实现获取到，直接调用其中的方法就可执行映射文件中对应的sql语句并返回结果\r\n\r\n​\t\t但是需要注意，此时若是执行<span style="color:red">增删改</span>操作的话，需要手动提交事务才能让数据持久化到数据库中。若想实现自动提交事务可将事务交由mybatis进行管理，只需在初始化SqlSession对象时加上一个参数即可，如下：\r\n\r\n```java\r\n//创建SqlSession对象，此时通过SqlSession对象所操作的sql都会自动提交  \r\nSqlSession sqlSession = sqlSessionFactory.openSession(true);\r\n```\r\n\r\n::: tip 步骤总结\r\n\r\n1. 读取mybatis-config.xml核心配置文件\r\n2. 创建SqlSessionFactoryBuilder对象\r\n3. 创建SqlSessionFactory对象\r\n4. 创建SqlSession对象\r\n5. 通过sqlSession.getMapper()方法获取mapper接口实例\r\n6. 调用方法并返回值\r\n\r\n:::\r\n\r\n::: details 常见报错\r\n\r\n#### 1、`@Test`注解爆红无法使用\r\n\r\n![15.png](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/15.png)\r\n\r\n解决方式：检查pom.xml中是否有导入对应的依赖\r\n\r\n```xml\r\n\x3c!-- junit测试 --\x3e\r\n<dependency>\r\n    <groupId>junit</groupId>\r\n    <artifactId>junit</artifactId>\r\n    <version>4.12</version>\r\n</dependency>\r\n```\r\n\r\n#### 2、Resources无法调用getResourceAsStream方法，方法爆红\r\n\r\n![16.png](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/16.png)\r\n\r\n解决方式：根本原因在于Resources引入错误，Resources应该是要在`org.apache.ibatis.io.Resources`下的才对\r\n\r\n![17.png](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/17.png)\r\n\r\n#### 3、明明已经执行了，也没有报错，数据库的数据却没有更新\r\n\r\n解决方式：检查是否开启事务自动提交，若未开启则尝试手动提交事务，详情请自行查看上方解析\r\n\r\n#### 4、报错：<span style="color:red">Type interface cn.bdqn.mapper.GameMapper is not known to the MapperRegistry</span>\r\n\r\n报错原因：MapperRegistry找不到cn.bdqn.mapper.GameMapper，mybatis核心配置文件中没有注册该映射文件\r\n\r\n解决方式：注册一下映射文件即可\r\n\r\n![18.png](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/18.png)\r\n\r\n:::\r\n\r\n## 核心配置文件详解\r\n\r\n::: tip 核心配置文件\r\n\r\n核心配置文件中的标签必须按照固定的顺序(有的标签可以不写，但顺序一定不能乱)从上往下的顺序依次为：\r\n\r\nproperties、settings、typeAliases、typeHandlers、objectFactory、objectWrapperFactory、reflectorFactory、plugins、environments、databaseIdProvider、mappers\r\n\r\n:::\r\n\r\n```xml\r\n<?xml version="1.0" encoding="UTF-8" ?>\r\n<!DOCTYPE configuration\r\n        PUBLIC "-//MyBatis.org//DTD Config 3.0//EN"\r\n        "http://MyBatis.org/dtd/MyBatis-3-config.dtd">\r\n<configuration>\r\n    \x3c!--引入properties文件，此时就可以${属性名}的方式访问属性值--\x3e\r\n    <properties resource="jdbc.properties"></properties>\r\n    <settings>\r\n        \x3c!--将表中字段的下划线自动转换为驼峰--\x3e\r\n        <setting name="mapUnderscoreToCamelCase" value="true"/>\r\n        \x3c!--开启延迟加载--\x3e\r\n        <setting name="lazyLoadingEnabled" value="true"/>\r\n    </settings>\r\n    <typeAliases>\r\n        \x3c!--\r\n        typeAlias：设置某个具体的类型的别名\r\n        属性：\r\n        type：需要设置别名的类型的全类名\r\n        alias：设置此类型的别名，且别名不区分大小写。若不设置此属性，该类型拥有默认的别名，即类名\r\n        --\x3e\r\n        \x3c!--<typeAlias type="cn.bdqn.model.Game"></typeAlias>--\x3e\r\n        \x3c!--<typeAlias type="cn.bdqn.model.Game" alias="game">\r\n        </typeAlias>--\x3e\r\n        \x3c!--以包为单位，设置改包下所有的类型都拥有默认的别名，即类名且不区分大小写--\x3e\r\n        <package name="cn.bdqn.model"/>\r\n    </typeAliases>\r\n    \x3c!--\r\n    environments：设置多个连接数据库的环境\r\n    属性：\r\n\t    default：设置默认使用的环境的id\r\n    --\x3e\r\n    <environments default="mysql_test">\r\n        \x3c!--\r\n        environment：设置具体的连接数据库的环境信息\r\n        属性：\r\n\t        id：设置环境的唯一标识，可通过environments标签中的default设置某一个环境的id，表示默认使用的环境\r\n        --\x3e\r\n        <environment id="mysql_test">\r\n            \x3c!--\r\n            transactionManager：设置事务管理方式\r\n            属性：\r\n\t            type：设置事务管理方式，type="JDBC|MANAGED"\r\n\t            type="JDBC"：设置当前环境的事务管理都必须手动处理\r\n\t            type="MANAGED"：设置事务被管理，例如spring中的AOP\r\n            --\x3e\r\n            <transactionManager type="JDBC"/>\r\n            \x3c!--\r\n            dataSource：设置数据源\r\n            属性：\r\n\t            type：设置数据源的类型，type="POOLED|UNPOOLED|JNDI"\r\n\t            type="POOLED"：使用数据库连接池，即会将创建的连接进行缓存，下次使用可以从缓存中直接获取，不需要重新创建\r\n\t            type="UNPOOLED"：不使用数据库连接池，即每次使用连接都需要重新创建\r\n\t            type="JNDI"：调用上下文中的数据源\r\n            --\x3e\r\n            <dataSource type="POOLED">\r\n                \x3c!--设置驱动类的全类名--\x3e\r\n                <property name="driver" value="${jdbc.driver}"/>\r\n                \x3c!--设置连接数据库的连接地址--\x3e\r\n                <property name="url" value="${jdbc.url}"/>\r\n                \x3c!--设置连接数据库的用户名--\x3e\r\n                <property name="username" value="${jdbc.username}"/>\r\n                \x3c!--设置连接数据库的密码--\x3e\r\n                <property name="password" value="${jdbc.password}"/>\r\n            </dataSource>\r\n        </environment>\r\n    </environments>\r\n    \x3c!--引入映射文件--\x3e\r\n    <mappers>\r\n        \x3c!-- <mapper resource="GameMapper.xml"/> --\x3e\r\n        \x3c!--\r\n        以包为单位，将包下所有的映射文件引入核心配置文件\r\n        注意：\r\n\t\t\t1. 此方式必须保证mapper接口和mapper映射文件必须在相同的包下\r\n\t\t\t2. mapper接口要和mapper映射文件的名字一致\r\n        --\x3e\r\n        <package name="cn.bdqn.mapper"/>\r\n    </mappers>\r\n</configuration>\r\n```\r\n\r\n## 默认的类型别名\r\n\r\n### 基本数据类型映射\r\n\r\n| Alias(别名) | Mapped Type（对应类型） |\r\n| :---------: | :---------------------: |\r\n|    _byte    |          byte           |\r\n|    _long    |          long           |\r\n|   _short    |          short          |\r\n|    _int     |           int           |\r\n|  _integer   |           int           |\r\n|   _double   |         double          |\r\n|   _float    |          float          |\r\n|  _boolean   |         boolean         |\r\n\r\n### 封装类型映射\r\n\r\n| Alias(别名) | Mapped Type（对应类型） |\r\n| :---------: | :---------------------: |\r\n|   string    |         String          |\r\n|    byte     |          Byte           |\r\n|    long     |          Long           |\r\n|    short    |          Short          |\r\n|     int     |         Integer         |\r\n|   integer   |         Integer         |\r\n|   double    |         Double          |\r\n|    float    |          Float          |\r\n|   boolean   |         Boolean         |\r\n|    date     |          Date           |\r\n|   decimal   |       BigDecimal        |\r\n| bigdecimal  |       BigDecimal        |\r\n|   object    |         Object          |\r\n|     map     |           Map           |\r\n|   hashmap   |         HashMap         |\r\n|    list     |          List           |\r\n|  arraylist  |        ArrayList        |\r\n| collection  |       Collection        |\r\n|  iterator   |        Iterator         |\r\n\r\n## MyBatis的增删改查\r\n\r\n### 1、添加\r\n\r\n```xml\r\n\x3c!-- 接口中的方法 int insertGame();--\x3e\r\n<insert id="insertGame">\r\n    insert into games(username,password,type,company,year) values(\'test4\',\'123456\',\'FPS\',\'未知\',\'2022\')\r\n</insert>\r\n```\r\n\r\n### 2、删除\r\n\r\n```xml\r\n\x3c!-- 接口中的方法 int deleteGame();--\x3e\r\n<delete id="deleteGame">\r\n    delete from games where id = 1\r\n</delete>\r\n```\r\n\r\n### 3、修改\r\n\r\n```xml\r\n\x3c!-- 接口中的方法 int updateGame();--\x3e\r\n<update id="updateGame">\r\n    UPDATE `game`.`games` \r\n    SET `username` = \'admin\',\r\n    `password` = \'123456\',\r\n    `type` = \'即时战略\',\r\n    `company` = \'暴雪\',\r\n    `year` = \'1995\' \r\n    WHERE\r\n    `id` = 1;\r\n</update>\r\n```\r\n\r\n### 4、查询\r\n\r\n::: warning 注意\r\n\r\n查询的标签select相比于其他标签比较特殊，添加、删除、修改的返回值都是受影响的行数所以类型都为int类型，但是查询不一样，查询的返回类型是多变的，通常情况下mybatis是不知道你要返回的数据是什么类型的，所以需要我们手动去指定\r\n\r\n查询的标签必须设置属性`resultType`或者`resultMap`,用来指定实体类与数据库表的映射关系，其实这一步骤相当于我们之前的ResultSet设置实体类，只不过mybatis帮我们做了这一件事情，我们只需要设置返回类型，其余映射的mybatis会自动帮我们完成\r\n\r\n:::\r\n\r\n::: warning resultType与resultMap的区别\r\n\r\nresultType采用的是自动映射，也就是说只要你实体类的属性名称与数据库表的列名一致，那么mybatis就能够直接进行映射\r\n\r\nresultMap是为自定义映射，通常用于一对多、多对一的复杂查询，或者实体类属性名与数据库列明不一致的情况\r\n\r\n:::\r\n\r\n#### 查询单条数据\r\n\r\n创建实体类\r\n\r\n::: details 点击查看代码\r\n\r\n```java\r\npackage cn.bdqn.model;\r\n\r\n/**\r\n * @ClassName: Games\r\n * @Description: Game实体类\r\n * @Date: 2022-09-07 11:34:01\r\n * @Author: HuangYaoDong\r\n */\r\npublic class Game {\r\n\r\n    private int id;\r\n    private String username;\r\n    private String password;\r\n    private String type;\r\n    private String company;\r\n    private String year;\r\n\r\n    public int getId() {\r\n        return id;\r\n    }\r\n\r\n    public void setId(int id) {\r\n        this.id = id;\r\n    }\r\n\r\n    public String getUsername() {\r\n        return username;\r\n    }\r\n\r\n    public void setUsername(String username) {\r\n        this.username = username;\r\n    }\r\n\r\n    public String getPassword() {\r\n        return password;\r\n    }\r\n\r\n    public void setPassword(String password) {\r\n        this.password = password;\r\n    }\r\n\r\n    public String getType() {\r\n        return type;\r\n    }\r\n\r\n    public void setType(String type) {\r\n        this.type = type;\r\n    }\r\n\r\n    public String getCompany() {\r\n        return company;\r\n    }\r\n\r\n    public void setCompany(String company) {\r\n        this.company = company;\r\n    }\r\n\r\n    public String getYear() {\r\n        return year;\r\n    }\r\n\r\n    public void setYear(String year) {\r\n        this.year = year;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return "Game{" +\r\n                "id=" + id +\r\n                ", username=\'" + username + \'\\\'\' +\r\n                ", password=\'" + password + \'\\\'\' +\r\n                ", type=\'" + type + \'\\\'\' +\r\n                ", company=\'" + company + \'\\\'\' +\r\n                ", year=\'" + year + \'\\\'\' +\r\n                \'}\';\r\n    }\r\n}\r\n```\r\n\r\n:::\r\n\r\n编写mapper接口代码\r\n\r\n```java\r\n/**\r\n  * 查询单条数据\r\n  *\r\n  * @date 2022/9/7 11:37\r\n  * @author HangYaoDong\r\n  * @return cn.bdqn.model.Game 游戏信息\r\n  */\r\nGame selectOneGame();\r\n```\r\n\r\n编写mapper映射文件\r\n\r\n```xml\r\n<select id="selectOneGame" resultType="cn.bdqn.model.Game">\r\n    select * from games limit 1\r\n</select>\r\n```\r\n\r\n测试：\r\n\r\n```java\r\n@Test\r\npublic void testInsertGame() throws IOException {\r\n    //读取mybatis的核心配置文件\r\n    InputStream inputStream = Resources.getResourceAsStream("mybatis-config.xml");\r\n    //获取SqlSessionFactoryBuilder对象（工厂构建者）\r\n    SqlSessionFactoryBuilder sqlSessionFactoryBuilder = new SqlSessionFactoryBuilder();\r\n    //通过核心配置文件所对应的字节输入流创建工厂类SqlSessionFactory，生产SqlSession对象\r\n    SqlSessionFactory sqlSessionFactory = sqlSessionFactoryBuilder.build(inputStream);\r\n    //获取SqlSession，此时通过SqlSession对象所操作的sql都必须手动提交或者回滚事务\r\n    SqlSession sqlSession = sqlSessionFactory.openSession();\r\n    //通过代理模式创建GameMapper接口的代理实现类对象\r\n    GameMapper gameMapper = sqlSession.getMapper(GameMapper.class);\r\n    //调用UserMapper接口中的方法，就可以根据UserMapper的全类名匹配元素文件，通过调用的方法名匹配映射文件中的SQL标签，并执行标签中的SQL语句\r\n    Game game = gameMapper.selectOneGame();\r\n    System.out.println(game);\r\n}\r\n```\r\n\r\n运行结果：\r\n\r\n![20.png](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/20.png)\r\n\r\n::: details 点击查看详细解析\r\n\r\n![21.png](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/21.png)\r\n\r\n:::\r\n\r\n#### 查询多条数据\r\n\r\n::: warning 返回值\r\n\r\n当查询的数据为多条时，不能使用实体类作为返回值，只能使用集合，否则会抛出异常<span style="color:red">**TooManyResultsException**</span>,但若查询的数据只有一条时，可以使用实体类或者集合作为返回类型\r\n\r\n:::\r\n\r\n编写mapper接口代码\r\n\r\n```java\r\n/**\r\n  * 查询多条数据\r\n  *\r\n  * @date 2022/9/7 11:55\r\n  * @author HangYaoDong\r\n  * @return java.util.List<cn.bdqn.model.Game> 游戏信息集合\r\n  */\r\nList<Game> selectGameList();\r\n```\r\n\r\n编写mapper映射文件\r\n\r\n::: warning resultType返回值\r\n\r\n查询多条数据的时候，接口中方法返回值必须为集合，resultType内的值为集合的泛型，mybatis会自动进行数据填充\r\n\r\n:::\r\n\r\n```xml\r\n<select id="selectGameList" resultType="cn.bdqn.model.Game">\r\n    select * from games\r\n</select>\r\n```\r\n\r\n测试\r\n\r\n```java\r\n@Test\r\npublic void testInsertGame() throws IOException {\r\n    //读取mybatis的核心配置文件\r\n    InputStream inputStream = Resources.getResourceAsStream("mybatis-config.xml");\r\n    //获取SqlSessionFactoryBuilder对象（工厂构建者）\r\n    SqlSessionFactoryBuilder sqlSessionFactoryBuilder = new SqlSessionFactoryBuilder();\r\n    //通过核心配置文件所对应的字节输入流创建工厂类SqlSessionFactory，生产SqlSession对象\r\n    SqlSessionFactory sqlSessionFactory = sqlSessionFactoryBuilder.build(inputStream);\r\n    //获取SqlSession，此时通过SqlSession对象所操作的sql都必须手动提交或者回滚事务\r\n    SqlSession sqlSession = sqlSessionFactory.openSession();\r\n    //通过代理模式创建GameMapper接口的代理实现类对象\r\n    GameMapper gameMapper = sqlSession.getMapper(GameMapper.class);\r\n    //调用UserMapper接口中的方法，就可以根据UserMapper的全类名匹配元素文件，通过调用的方法名匹配映射文件中的SQL标签，并执行标签中的SQL语句\r\n    List<Game> list = gameMapper.selectGameList();\r\n    //提交事务，SqlSession默认是手动提交事务，即增删改不提交事务则数据库中不生效\r\n    for (Game game : list) {\r\n        System.out.println(game);\r\n    }\r\n}\r\n```\r\n\r\n运行结果：\r\n\r\n![22.png](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/22.png)\r\n\r\n## MyBatis获取参数值的两种方式（<span style="color:red">重点</span>）\r\n\r\n::: tip\r\n\r\n以上我们所进行的操作全部都是直接在sql中把值定死的，但是实际开发中这么去写显然是不合理的\r\n\r\nmybatis给我们提供了两种方式进行传参，分别是`${}`与`#{}`\r\n\r\n`${}`的本质就是字符串拼接，`${}`使用字符串拼接的方式拼接sql，若为字符串类型或日期类型的字段进行赋值时，需要手动加单引号\r\n\r\n`#{}`的本质就是字符串替换，`#{}`使用占位符赋值的方式拼接sql，此时为字符串类型或日期类型的字段进行赋值时，可以自动添加单引号\r\n\r\n:::\r\n\r\n::: danger 警告\r\n\r\n我们之前在学习JDBC的时候就已经讲过了，在程序中最好不要使用`${}`也就是字符串拼接，因为这种拼接方式是有被SQL注入的风险的，所以一般来讲我们在开发的时候用的都是`#{}`字符串替换\r\n\r\n:::\r\n\r\n### 单个字面量类型的参数\r\n\r\n![23.png](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/23.png)\r\n\r\n::: details 使用${}方式传参，仅演示一次，因使用次数较少不过多演示\r\n\r\n```xml\r\n\x3c!--Game selectGameByName(String name);--\x3e\r\n<select id="selectGameByName" resultType="Game">  \r\n\tselect * from games where name = \'${name}\'  \r\n</select>\r\n```\r\n\r\n:::\r\n\r\n### 多个字面量类型的参数\r\n\r\n::: tip\r\n\r\n当mapper接口中的参数为多个时，mybatis会自动将这些参数放在一个map集合当中，在这个由参数组成的map集合里，key划分为两种，分别是：\r\n\r\n1. 以`arg0`,`arg1`...为键（key），以参数为值（value）\r\n2. 以`param1`，`param2`...为键（key），以参数为值（value）\r\n\r\n因此，我们只需要通过`${}`或`#{}`来访问map集合的键就可以获取到对应的值，注意如果你使用的是${}的话记得手动加上单引号\r\n\r\n使用arg或者param都行，但是要注意的是：\r\n\r\n1. arg是从起始索引0开始计算的，假设现在有两个参数需要调用，按照从左往右的顺序，第一个参数就是arg0，第二个参数就是arg1以此类推\r\n2. param是从参数位置1开始计算的，假设现在有两个参数需要调用，按照从左往右的顺序，第一个参数就是param1，第二个参数就是param2以此类推\r\n\r\n:::\r\n\r\n::: danger 警告\r\n\r\n当你有多个参数，并且保持默认状态没有指定各参数的标识名称时，是无法直接使用参数名称来进行调用的，可调用方式仅局限于arg及param\r\n\r\n:::\r\n\r\n使用arg的方式进行参数调用：\r\n\r\n![24.png](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/24.png)\r\n\r\n```xml\r\n\x3c!-- Game selectGameByName(String name,String type) --\x3e\r\n<select id="selectGameByName" resultType="cn.bdqn.model.Game">\r\n    select * from games where username = #{arg0} and type = #{arg1}\r\n</select>\r\n```\r\n\r\n使用param的方式进行参数调用：\r\n\r\n![25.png](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/25.png)\r\n\r\n```xml\r\n\x3c!-- Game selectGameByName(String name,String type) --\x3e\r\n<select id="selectGameByName" resultType="cn.bdqn.model.Game">\r\n    select * from games where username = #{param1} and type = #{param2}\r\n</select>\r\n```\r\n\r\n',contentRendered:'<h2 id="mybatis简介" tabindex="-1"><a class="header-anchor" href="#mybatis简介" aria-hidden="true">#</a> Mybatis简介</h2>\n<h3 id="mybatis历史" tabindex="-1"><a class="header-anchor" href="#mybatis历史" aria-hidden="true">#</a> MyBatis历史</h3>\n<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>MyBatis最初是Apache的一个开源项目iBatis, 2010年6月这个项目由Apache Software Foundation迁移到了Google Code。随着开发团队转投Google Code旗下，iBatis3.x正式更名为MyBatis。代码于2013年11月迁移到Github</p>\n<p>iBatis一词来源于“internet”和“abatis”的组合，是一个基于Java的持久层框架。iBatis提供的持久层框架包括SQL Maps和Data Access Objects（DAO）</p>\n</div>\n<h3 id="mybatis特性" tabindex="-1"><a class="header-anchor" href="#mybatis特性" aria-hidden="true">#</a> MyBatis特性</h3>\n<ol>\n<li>MyBatis 是支持定制化 SQL、存储过程以及高级映射的优秀的持久层框架</li>\n<li>MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集</li>\n<li>MyBatis可以使用简单的XML或注解用于配置和原始映射，将接口和Java的POJO（Plain Old Java Objects，普通的Java对象）映射成数据库中的记录</li>\n<li>MyBatis 是一个半自动的ORM（Object Relation Mapping）框架</li>\n</ol>\n<h3 id="mybatis下载" tabindex="-1"><a class="header-anchor" href="#mybatis下载" aria-hidden="true">#</a> MyBatis下载</h3>\n<p>Mybatis下载地址：<a href="https://github.com/mybatis/mybatis-3" target="_blank" rel="noopener noreferrer">GitHub - mybatis/mybatis-3: MyBatis SQL mapper framework for Java<ExternalLinkIcon/></a></p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="1.png" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/1.png" data="aurora"></p>\n<h3 id="和其它持久化层技术对比" tabindex="-1"><a class="header-anchor" href="#和其它持久化层技术对比" aria-hidden="true">#</a> 和其它持久化层技术对比</h3>\n<ul>\n<li>\n<p>JDBC</p>\n<ul>\n<li>SQL 夹杂在Java代码中耦合度高，导致硬编码内伤</li>\n<li>维护不易且实际开发需求中 SQL 有变化，频繁修改的情况多见</li>\n<li>代码冗长，开发效率低</li>\n</ul>\n</li>\n<li>\n<p>Hibernate 和 JPA</p>\n<ul>\n<li>操作简便，开发效率高</li>\n<li>程序中的长难复杂 SQL 需要绕过框架</li>\n<li>内部自动生产的 SQL，不容易做特殊优化</li>\n<li>基于全映射的全自动框架，大量字段的 POJO 进行部分映射时比较困难</li>\n<li>反射操作太多，导致数据库性能下降</li>\n</ul>\n</li>\n<li>\n<p>MyBatis</p>\n<ul>\n<li>轻量级，性能出色</li>\n<li>SQL 和 Java 编码分开，功能边界清晰。Java代码专注业务、SQL语句专注数据</li>\n<li>开发效率稍逊于HIbernate，但是完全能够接受</li>\n</ul>\n</li>\n</ul>\n<h2 id="搭建mybatis" tabindex="-1"><a class="header-anchor" href="#搭建mybatis" aria-hidden="true">#</a> 搭建MyBatis</h2>\n<div class="custom-container tip"><p class="custom-container-title">开发环境</p>\n<p>IDE：IntelliJ IDEA 2022.2.1</p>\n<p>构建工具：apache-maven-3.8.4</p>\n<p>MySQL版本：mysql 8.0.25</p>\n<p>MyBatis版本：MyBatis 3.5.7</p>\n</div>\n<h3 id="创建数据库" tabindex="-1"><a class="header-anchor" href="#创建数据库" aria-hidden="true">#</a> 创建数据库</h3>\n<div class="language-sql ext-sql line-numbers-mode"><pre v-pre class="language-sql"><code><span class="token keyword">SET</span> NAMES utf8mb4<span class="token punctuation">;</span>\n<span class="token keyword">SET</span> FOREIGN_KEY_CHECKS <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\n<span class="token comment">-- ----------------------------</span>\n<span class="token comment">-- Table structure for games</span>\n<span class="token comment">-- ----------------------------</span>\n<span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">`</span>games<span class="token punctuation">`</span></span><span class="token punctuation">;</span>\n<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>games<span class="token punctuation">`</span></span>  <span class="token punctuation">(</span>\n  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">int</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>username<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8mb4 <span class="token keyword">COLLATE</span> utf8mb4_unicode_ci <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>passwrod<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8mb4 <span class="token keyword">COLLATE</span> utf8mb4_unicode_ci <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>type<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8mb4 <span class="token keyword">COLLATE</span> utf8mb4_unicode_ci <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>company<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8mb4 <span class="token keyword">COLLATE</span> utf8mb4_unicode_ci <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>year<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8mb4 <span class="token keyword">COLLATE</span> utf8mb4_unicode_ci <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span>\n<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token operator">=</span> <span class="token number">5</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> <span class="token operator">=</span> utf8mb4 <span class="token keyword">COLLATE</span> <span class="token operator">=</span> utf8mb4_unicode_ci ROW_FORMAT <span class="token operator">=</span> Dynamic<span class="token punctuation">;</span>\n\n<span class="token comment">-- ----------------------------</span>\n<span class="token comment">-- Records of games</span>\n<span class="token comment">-- ----------------------------</span>\n<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>games<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">\'admin\'</span><span class="token punctuation">,</span> <span class="token string">\'123456\'</span><span class="token punctuation">,</span> <span class="token string">\'即时战略\'</span><span class="token punctuation">,</span> <span class="token string">\'暴雪\'</span><span class="token punctuation">,</span> <span class="token string">\'1995\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>games<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">\'test1\'</span><span class="token punctuation">,</span> <span class="token string">\'123456\'</span><span class="token punctuation">,</span> <span class="token string">\'RPG\'</span><span class="token punctuation">,</span> <span class="token string">\'光荣\'</span><span class="token punctuation">,</span> <span class="token string">\'1995\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>games<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">\'test2\'</span><span class="token punctuation">,</span> <span class="token string">\'123456\'</span><span class="token punctuation">,</span> <span class="token string">\'即时战略\'</span><span class="token punctuation">,</span> <span class="token string">\'拳头\'</span><span class="token punctuation">,</span> <span class="token string">\'2000\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>games<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">\'test3\'</span><span class="token punctuation">,</span> <span class="token string">\'123456\'</span><span class="token punctuation">,</span> <span class="token string">\'FPS\'</span><span class="token punctuation">,</span> <span class="token string">\'未知\'</span><span class="token punctuation">,</span> <span class="token string">\'1988\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">SET</span> FOREIGN_KEY_CHECKS <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h3 id="创建maven工程" tabindex="-1"><a class="header-anchor" href="#创建maven工程" aria-hidden="true">#</a> 创建maven工程</h3>\n<div class="custom-container warning"><p class="custom-container-title">警告</p>\n<p>在学习本文章前应先熟悉maven构建，并且在idea中已将maven配置好</p>\n</div>\n<p>若还不知道maven工程如何构建，请点击查看：<a href="https://hyd0.cc/maven/Maven%E8%AF%A6%E8%A7%A3.html" target="_blank" rel="noopener noreferrer">Maven详解(基础到高级)(入门到入土) | 信仰的个人博客 (hyd0.cc)<ExternalLinkIcon/></a></p>\n<details class="custom-container details"><summary>点击查看示例</summary>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="2.png" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/2.png" data="aurora"></p>\n</details>\n<p>构建完成后再工程根目录中找到pom.xml文件，引入对应依赖</p>\n<div class="language-xml ext-xml line-numbers-mode"><pre v-pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>\n    <span class="token comment">&lt;!-- Mybatis核心 --\x3e</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>\n    <span class="token comment">&lt;!-- junit测试 --\x3e</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>\n    <span class="token comment">&lt;!-- MySQL驱动 --\x3e</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>8.0.25<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><details class="custom-container details"><summary>点击查看示例</summary>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="3.png" originSrc="https://bdqn-blog.oss-cn-beijing.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/3.png" data="aurora"></p>\n</details>\n<details class="custom-container details"><summary>常见问题及解决方案</summary>\n<p>因网速太慢导致依赖下载失败或者中途不小心点到退出</p>\n<p>解决方案：</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="4.png" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/4.png" data="aurora"></p>\n<p>若还是不行请更换网络或者配置maven国内镜像仓库后重试</p>\n<p><a href="https://hyd0.cc/maven/Maven%E8%AF%A6%E8%A7%A3.html#_5%E3%80%81%E9%85%8D%E7%BD%AE%E9%98%BF%E9%87%8C%E4%BA%91%E7%9A%84%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93" target="_blank" rel="noopener noreferrer">配置阿里云的镜像仓库)<ExternalLinkIcon/></a></p>\n</details>\n<h3 id="创建mybatis的核心配置文件" tabindex="-1"><a class="header-anchor" href="#创建mybatis的核心配置文件" aria-hidden="true">#</a> 创建MyBatis的核心配置文件</h3>\n<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>习惯上命名为mybatis-config.xml，这个文件名仅仅只是建议，并非强制要求。将来整合Spring之后，这个配置文件可以省略，但是其中的配置项非常重要，关乎到我们后面所有的开发。</p>\n<p>核心配置文件主要用于配置连接数据库的环境以及MyBatis的全局配置信息</p>\n<p>核心配置文件存放的位置是<code>src/main/resources</code>目录下</p>\n</div>\n<div class="language-xml ext-xml line-numbers-mode"><pre v-pre class="language-xml"><code><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span>\n<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">configuration</span>\n        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Config 3.0//EN"</span>\n        <span class="token string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>\n    <span class="token comment">&lt;!-- 设置连接数据库的环境 default代表的是当前选择的环境 --\x3e</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n        <span class="token comment">&lt;!-- 配置环境并将该套环境标识为development，供父级标签使用，可配置多套环境  --\x3e</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n            <span class="token comment">&lt;!-- 配置事务管理器为JDBC --\x3e</span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>\n            <span class="token comment">&lt;!-- 配置数据源 --\x3e</span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n                <span class="token comment">&lt;!-- 数据库驱动，数据库版本8.0以下的不用加cj --\x3e</span>\n                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mysql.cj.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>\n                <span class="token comment">&lt;!-- 数据库连接地址，8.0以上记得加上时区，否则会导致查询时间错乱 serverTimezone=UTC --\x3e</span>\n                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/game?serverTimezone=UTC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>\n                <span class="token comment">&lt;!-- 账号 --\x3e</span>\n                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>\n                <span class="token comment">&lt;!-- 密码 --\x3e</span>\n                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1234<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><details class="custom-container details"><summary>点击查看示例</summary>\n<p>在资源文件夹<code>src/main/resources</code>中，创建一个名为mybatis-config.xml的配置文件</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="5.png" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/5.png" data="aurora"></p>\n<p>根据注释进行配套环境设置</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="6.png" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/6.png" data="aurora"></p>\n</details>\n<h3 id="创建mapper接口" tabindex="-1"><a class="header-anchor" href="#创建mapper接口" aria-hidden="true">#</a> 创建mapper接口</h3>\n<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>Mybatis中的mapper接口相当于以前的dao，但是区别在于，mapper仅仅是接口，我们不需要提供实现类</p>\n</div>\n<div class="language-java ext-java line-numbers-mode"><pre v-pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>bdqn<span class="token punctuation">.</span>mapper</span><span class="token punctuation">;</span>\n\n<span class="token doc-comment comment">/**\n * @ClassName: GameMapper\n * @Description: mapper接口\n * @Date: 2022-09-06 11:23:10\n * @Author: HuangYaoDong\n */</span>\n<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">GameMapper</span> <span class="token punctuation">{</span>\n\n    <span class="token doc-comment comment">/**\n      * 添加游戏\n      *\n      * <span class="token keyword">@date</span> 2022/9/6 11:30\n      * <span class="token keyword">@author</span> HangYaoDong\n      * <span class="token keyword">@return</span> int 受影响的行数\n      */</span>\n    <span class="token keyword">int</span> <span class="token function">insertGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><details class="custom-container details"><summary>点击查看示例</summary>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="7.png" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/7.png" data="aurora"></p>\n</details>\n<h3 id="创建mybatis的映射文件" tabindex="-1"><a class="header-anchor" href="#创建mybatis的映射文件" aria-hidden="true">#</a> 创建MyBatis的映射文件</h3>\n<div class="custom-container tip"><p class="custom-container-title">相关概念</p>\n<p>ORM（Object Relationship Mapping）对象关系映射</p>\n<ul>\n<li>对象：Java的实体类对象</li>\n<li>关系：关系型数据库</li>\n<li>映射：二者之间的对应关系</li>\n</ul>\n</div>\n<table>\n<thead>\n<tr>\n<th style="text-align:center">Java概念</th>\n<th style="text-align:center">数据库概念</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style="text-align:center">类</td>\n<td style="text-align:center">表</td>\n</tr>\n<tr>\n<td style="text-align:center">属性</td>\n<td style="text-align:center">字段/列</td>\n</tr>\n<tr>\n<td style="text-align:center">对象</td>\n<td style="text-align:center">记录/行</td>\n</tr>\n</tbody>\n</table>\n<p><span style="color:red" ><strong>映射文件的命名规则</strong></span>：与接口同名的xml文件</p>\n<p>MyBatis中可以面向接口操作数据，但是要保证接口及映射文件的一致：</p>\n<ul>\n<li>mapper接口的全路径名（包名+类名）和映射文件的命名空间（namespace）保持一致</li>\n<li>mapper接口中方法的方法名和映射文件中编写SQL的标签的id属性保持一致</li>\n</ul>\n<div class="language-xml ext-xml line-numbers-mode"><pre v-pre class="language-xml"><code><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span>  \n<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span>  \n<span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>  \n<span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token punctuation">></span></span>  \n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cn.bdqn.mapper.GameMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  \n\t<span class="token comment">&lt;!--int insertGame();--\x3e</span>  \n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>insertGame<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  \n\t\tinsert into games(username,password,type,company,year) values(\'test4\',\'123456\',\'FPS\',\'未知\',\'2022\')  \n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span>  \n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><details class="custom-container details"><summary>点击查看示例</summary>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="8.png" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/8.png" data="aurora"></p>\n<div class="custom-container warning"><p class="custom-container-title">注意</p>\n<p>添加<code>&lt;insert&gt;&lt;/insert&gt;</code>，修改<code>&lt;update&gt;&lt;/update&gt;</code>，删除<code>&lt;delete&gt;&lt;/delete&gt;</code>三个标签的返回值默认都是<span style="red"><strong>int</strong></span>类型</p>\n</div>\n</details>\n<h3 id="注册-引入-映射文件" tabindex="-1"><a class="header-anchor" href="#注册-引入-映射文件" aria-hidden="true">#</a> 注册（引入）映射文件</h3>\n<p>我们在映射文件中定义完SQL映射语句之后，首先，我们需要告诉mybatis到哪里去找到这些语句。但是，在自动查找资源方面，Java并没有提供一个很好的解决方案，所以最好的方法就是直接告诉mybatis到哪里去找映射文件，如下：</p>\n<div class="language-xml ext-xml line-numbers-mode"><pre v-pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mapper/GameMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><details class="custom-container details"><summary>点击查看解析</summary>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="9.png" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/9.png" data="aurora"></p>\n</details>\n<p>mybatis给我们提供了四种注册映射文件的方式，详情请点击下方查看：</p>\n<details class="custom-container details"><summary>点击查看<span style="color:red" >映射器（mappers）</span>详细配置</summary>\n<h4 id="_1、resource" tabindex="-1"><a class="header-anchor" href="#_1、resource" aria-hidden="true">#</a> 1、resource</h4>\n<p>resource中填写的路径是针对于编译后映射文件的所处位置，可从编译文件夹中查看，idea是<code>out</code>文件夹。</p>\n<p>若映射文件处于资源文件夹(resources)中时，resource属性中填写的就是映射文件与resources的相对路径。</p>\n<p>若映射文件处于java文件夹其下，那resource属性中填写的就是映射文件与java的相对路径，注意，在此环境下包名也算是文件夹，需要以路径的形式写入。</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="10.png" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/10.png" data="aurora"></p>\n<h4 id="_2、url" tabindex="-1"><a class="header-anchor" href="#_2、url" aria-hidden="true">#</a> 2、url</h4>\n<p>直接使用对于mybatis映射文件的绝对路径或者相对路径，这个使用的比较少，仅做了解扩展即可</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="11.png" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/11.png" data="aurora"></p>\n<h4 id="_3、class" tabindex="-1"><a class="header-anchor" href="#_3、class" aria-hidden="true">#</a> 3、class</h4>\n<p>class属性比较特殊，他是直接注册当前接口，一般来讲都是在无映射文件的时候直接在接口的方法上方使用注解进行开发才会用到的，例如：</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="12.png" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/12.png" data="aurora"></p>\n<p><span style="color:red" ><strong>不推荐使用此种模式开发，因为当遇到复杂sql的时候整个sql语句会显得特别杂乱，不好维护</strong></span></p>\n<h4 id="_4、package标签" tabindex="-1"><a class="header-anchor" href="#_4、package标签" aria-hidden="true">#</a> 4、package标签</h4>\n<p>以上三种方式都是只要你有一个接口或者一个映射文件就必须要去mybatis配置文件中注册一次，也就是说如果你有100个接口，那么你就要写100次</p>\n<p><code>&lt;mapper resource=&quot;&quot;&gt;</code>标签</p>\n<p>这样太过于繁琐，并且也不利于维护，所以mybatis给我们提供了一种批量注册的方式，虽然说局限性有点儿大</p>\n<p>首先，要使用package标签必须保证：</p>\n<ol>\n<li>当前所有的接口及映射文件必须位于同一个包下</li>\n<li>映射文件的名称必须和接口类名一致</li>\n</ol>\n<p>当满足以上条件时，我们只需要在package标签的name属性中填入接口及映射文件所在的全路径包名即可， 并且无论有多少个接口都能够实现自动注册</p>\n<p>方式一：</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="13.png" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/13.png" data="aurora"></p>\n<p>方式二：</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="19.png" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/19.png" data="aurora"></p>\n<div class="custom-container warning"><p class="custom-container-title">提示</p>\n<p>因为mybatis的判定方式是编译后的文件夹，所以我们可以直接在Resources中使用相同目录的方式让映射文件与接口处于同一个包下</p>\n</div>\n</details>\n<h3 id="通过junit测试功能-main方法也可以" tabindex="-1"><a class="header-anchor" href="#通过junit测试功能-main方法也可以" aria-hidden="true">#</a> 通过Junit测试功能(main方法也可以)</h3>\n<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>通过Junit的<code>@Test</code>注解可以实现类似于main方法一样的运行，无需通过服务器编译调用</p>\n<p>使用方式也简单，只需把<code>@Test</code>注解加在你要调用的方法上方即可</p>\n</div>\n<div class="language-java ext-java line-numbers-mode"><pre v-pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>bdqn<span class="token punctuation">.</span>mapper</span><span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Resources</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span></span><span class="token class-name">SqlSession</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span></span><span class="token class-name">SqlSessionFactory</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span></span><span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span><span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStream</span><span class="token punctuation">;</span>\n\n<span class="token doc-comment comment">/**\n * @ClassName: UserMapperTest\n * @Description: 测试类\n * @Date: 2022-09-07 08:50:08\n * @Author: HuangYaoDong\n */</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GameMapperTest</span> <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@Test</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testInsertGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n        <span class="token comment">//读取mybatis的核心配置文件</span>\n        <span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"mybatis-config.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//获取SqlSessionFactoryBuilder对象（工厂构建者）</span>\n        <span class="token class-name">SqlSessionFactoryBuilder</span> sqlSessionFactoryBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//通过核心配置文件所对应的字节输入流创建工厂类SqlSessionFactory，生产SqlSession对象</span>\n        <span class="token class-name">SqlSessionFactory</span> sqlSessionFactory <span class="token operator">=</span> sqlSessionFactoryBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//获取SqlSession，此时通过SqlSession对象所操作的sql都必须手动提交或者回滚事务</span>\n        <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//通过代理模式创建GameMapper接口的代理实现类对象</span>\n        <span class="token class-name">GameMapper</span> gameMapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">GameMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//调用UserMapper接口中的方法，就可以根据UserMapper的全类名匹配元素文件，通过调用的方法名匹配映射文件中的SQL标签，并执行标签中的SQL语句</span>\n        <span class="token keyword">int</span> i <span class="token operator">=</span> gameMapper<span class="token punctuation">.</span><span class="token function">insertGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//提交事务，SqlSession默认是手动提交事务，即增删改不提交事务则数据库中不生效</span>\n        sqlSession<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数据库受影响行数："</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br></div></div><p>执行后控制台显示：</p>\n<div class="language-java ext-java line-numbers-mode"><pre v-pre class="language-java"><code>数据库受影响行数：<span class="token number">1</span>行\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><details class="custom-container details"><summary>点击查看解析</summary>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="14.png" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/14.png" data="aurora"></p>\n<h4 id="步骤一" tabindex="-1"><a class="header-anchor" href="#步骤一" aria-hidden="true">#</a> 步骤一：</h4>\n<p>​\t\t使用Resources.getResourceAsStream读取<code>mybatis-config.xml</code>核心配置文件，这是为了获取到数据库链接以及在配置文件中所注册的映射文件位置</p>\n<h4 id="步骤二" tabindex="-1"><a class="header-anchor" href="#步骤二" aria-hidden="true">#</a> 步骤二：</h4>\n<p>​\t\t获取工厂构建者SqlSessionFactoryBuilder对象，此对象在全局中唯一的作用就是创建出SqlSessionFactory工厂对象，就好比是一个建筑团队，在一个地方去建造汽车工厂，工厂建造完了之后就不需要建筑团队了，工厂自己本身就可以源源不断的生产汽车，同理SqlSessionFactoryBuilder也是一样，当SqlSessionFactoryBuilder（建筑团队）把SqlSessionFactory（汽车工厂）构建完成之后，SqlSessionFactory就可以源源不断的生产SqlSession（汽车）</p>\n<table>\n<thead>\n<tr>\n<th style="text-align:center">对象</th>\n<th style="text-align:center">解析</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style="text-align:center">SqlSessionFactoryBuilder</td>\n<td style="text-align:center">通过读取到的配置文件来构建SqlSessionFactory</td>\n</tr>\n<tr>\n<td style="text-align:center">SqlSessionFactory</td>\n<td style="text-align:center">SqlSession工厂，专门用来生产SqlSession的</td>\n</tr>\n<tr>\n<td style="text-align:center">SqlSession</td>\n<td style="text-align:center">完全包含以数据库为背景的所有执行SQL操作的方法</td>\n</tr>\n</tbody>\n</table>\n<p>总而言之，在绝大多数的时候，SqlSessionFactoryBuilder在全局中只会执行一次，所以大部分人都会把他设置为一个单例对象</p>\n<h4 id="步骤三" tabindex="-1"><a class="header-anchor" href="#步骤三" aria-hidden="true">#</a> 步骤三：</h4>\n<p>​\t\t通过代理模式创建GameMapper接口的代理实现类对象，使用SqlSession对象的实例获取到我们所要去调用的mapper接口，并且通过代理的方式将该类的实现获取到，直接调用其中的方法就可执行映射文件中对应的sql语句并返回结果</p>\n<p>​\t\t但是需要注意，此时若是执行<span style="color:red">增删改</span>操作的话，需要手动提交事务才能让数据持久化到数据库中。若想实现自动提交事务可将事务交由mybatis进行管理，只需在初始化SqlSession对象时加上一个参数即可，如下：</p>\n<div class="language-java ext-java line-numbers-mode"><pre v-pre class="language-java"><code><span class="token comment">//创建SqlSession对象，此时通过SqlSession对象所操作的sql都会自动提交  </span>\n<span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="custom-container tip"><p class="custom-container-title">步骤总结</p>\n<ol>\n<li>读取mybatis-config.xml核心配置文件</li>\n<li>创建SqlSessionFactoryBuilder对象</li>\n<li>创建SqlSessionFactory对象</li>\n<li>创建SqlSession对象</li>\n<li>通过sqlSession.getMapper()方法获取mapper接口实例</li>\n<li>调用方法并返回值</li>\n</ol>\n</div>\n</details>\n<details class="custom-container details"><summary>常见报错</summary>\n<h4 id="_1、-test注解爆红无法使用" tabindex="-1"><a class="header-anchor" href="#_1、-test注解爆红无法使用" aria-hidden="true">#</a> 1、<code>@Test</code>注解爆红无法使用</h4>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="15.png" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/15.png" data="aurora"></p>\n<p>解决方式：检查pom.xml中是否有导入对应的依赖</p>\n<div class="language-xml ext-xml line-numbers-mode"><pre v-pre class="language-xml"><code><span class="token comment">&lt;!-- junit测试 --\x3e</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h4 id="_2、resources无法调用getresourceasstream方法-方法爆红" tabindex="-1"><a class="header-anchor" href="#_2、resources无法调用getresourceasstream方法-方法爆红" aria-hidden="true">#</a> 2、Resources无法调用getResourceAsStream方法，方法爆红</h4>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="16.png" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/16.png" data="aurora"></p>\n<p>解决方式：根本原因在于Resources引入错误，Resources应该是要在<code>org.apache.ibatis.io.Resources</code>下的才对</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="17.png" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/17.png" data="aurora"></p>\n<h4 id="_3、明明已经执行了-也没有报错-数据库的数据却没有更新" tabindex="-1"><a class="header-anchor" href="#_3、明明已经执行了-也没有报错-数据库的数据却没有更新" aria-hidden="true">#</a> 3、明明已经执行了，也没有报错，数据库的数据却没有更新</h4>\n<p>解决方式：检查是否开启事务自动提交，若未开启则尝试手动提交事务，详情请自行查看上方解析</p>\n<h4 id="_4、报错-type-interface-cn-bdqn-mapper-gamemapper-is-not-known-to-the-mapperregistry" tabindex="-1"><a class="header-anchor" href="#_4、报错-type-interface-cn-bdqn-mapper-gamemapper-is-not-known-to-the-mapperregistry" aria-hidden="true">#</a> 4、报错：<span style="color:red">Type interface cn.bdqn.mapper.GameMapper is not known to the MapperRegistry</span></h4>\n<p>报错原因：MapperRegistry找不到cn.bdqn.mapper.GameMapper，mybatis核心配置文件中没有注册该映射文件</p>\n<p>解决方式：注册一下映射文件即可</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="18.png" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/18.png" data="aurora"></p>\n</details>\n<h2 id="核心配置文件详解" tabindex="-1"><a class="header-anchor" href="#核心配置文件详解" aria-hidden="true">#</a> 核心配置文件详解</h2>\n<div class="custom-container tip"><p class="custom-container-title">核心配置文件</p>\n<p>核心配置文件中的标签必须按照固定的顺序(有的标签可以不写，但顺序一定不能乱)从上往下的顺序依次为：</p>\n<p>properties、settings、typeAliases、typeHandlers、objectFactory、objectWrapperFactory、reflectorFactory、plugins、environments、databaseIdProvider、mappers</p>\n</div>\n<div class="language-xml ext-xml line-numbers-mode"><pre v-pre class="language-xml"><code><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span>\n<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">configuration</span>\n        <span class="token name">PUBLIC</span> <span class="token string">"-//MyBatis.org//DTD Config 3.0//EN"</span>\n        <span class="token string">"http://MyBatis.org/dtd/MyBatis-3-config.dtd"</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>\n    <span class="token comment">&lt;!--引入properties文件，此时就可以${属性名}的方式访问属性值--\x3e</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbc.properties<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span>\n        <span class="token comment">&lt;!--将表中字段的下划线自动转换为驼峰--\x3e</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mapUnderscoreToCamelCase<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>\n        <span class="token comment">&lt;!--开启延迟加载--\x3e</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lazyLoadingEnabled<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>\n        <span class="token comment">&lt;!--\n        typeAlias：设置某个具体的类型的别名\n        属性：\n        type：需要设置别名的类型的全类名\n        alias：设置此类型的别名，且别名不区分大小写。若不设置此属性，该类型拥有默认的别名，即类名\n        --\x3e</span>\n        <span class="token comment">&lt;!--&lt;typeAlias type="cn.bdqn.model.Game">&lt;/typeAlias>--\x3e</span>\n        <span class="token comment">&lt;!--&lt;typeAlias type="cn.bdqn.model.Game" alias="game">\n        &lt;/typeAlias>--\x3e</span>\n        <span class="token comment">&lt;!--以包为单位，设置改包下所有的类型都拥有默认的别名，即类名且不区分大小写--\x3e</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cn.bdqn.model<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span>\n    <span class="token comment">&lt;!--\n    environments：设置多个连接数据库的环境\n    属性：\n\t    default：设置默认使用的环境的id\n    --\x3e</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mysql_test<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n        <span class="token comment">&lt;!--\n        environment：设置具体的连接数据库的环境信息\n        属性：\n\t        id：设置环境的唯一标识，可通过environments标签中的default设置某一个环境的id，表示默认使用的环境\n        --\x3e</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mysql_test<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n            <span class="token comment">&lt;!--\n            transactionManager：设置事务管理方式\n            属性：\n\t            type：设置事务管理方式，type="JDBC|MANAGED"\n\t            type="JDBC"：设置当前环境的事务管理都必须手动处理\n\t            type="MANAGED"：设置事务被管理，例如spring中的AOP\n            --\x3e</span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>\n            <span class="token comment">&lt;!--\n            dataSource：设置数据源\n            属性：\n\t            type：设置数据源的类型，type="POOLED|UNPOOLED|JNDI"\n\t            type="POOLED"：使用数据库连接池，即会将创建的连接进行缓存，下次使用可以从缓存中直接获取，不需要重新创建\n\t            type="UNPOOLED"：不使用数据库连接池，即每次使用连接都需要重新创建\n\t            type="JNDI"：调用上下文中的数据源\n            --\x3e</span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n                <span class="token comment">&lt;!--设置驱动类的全类名--\x3e</span>\n                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${jdbc.driver}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>\n                <span class="token comment">&lt;!--设置连接数据库的连接地址--\x3e</span>\n                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${jdbc.url}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>\n                <span class="token comment">&lt;!--设置连接数据库的用户名--\x3e</span>\n                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${jdbc.username}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>\n                <span class="token comment">&lt;!--设置连接数据库的密码--\x3e</span>\n                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${jdbc.password}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span>\n    <span class="token comment">&lt;!--引入映射文件--\x3e</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>\n        <span class="token comment">&lt;!-- &lt;mapper resource="GameMapper.xml"/> --\x3e</span>\n        <span class="token comment">&lt;!--\n        以包为单位，将包下所有的映射文件引入核心配置文件\n        注意：\n\t\t\t1. 此方式必须保证mapper接口和mapper映射文件必须在相同的包下\n\t\t\t2. mapper接口要和mapper映射文件的名字一致\n        --\x3e</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cn.bdqn.mapper<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br></div></div><h2 id="默认的类型别名" tabindex="-1"><a class="header-anchor" href="#默认的类型别名" aria-hidden="true">#</a> 默认的类型别名</h2>\n<h3 id="基本数据类型映射" tabindex="-1"><a class="header-anchor" href="#基本数据类型映射" aria-hidden="true">#</a> 基本数据类型映射</h3>\n<table>\n<thead>\n<tr>\n<th style="text-align:center">Alias(别名)</th>\n<th style="text-align:center">Mapped Type（对应类型）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style="text-align:center">_byte</td>\n<td style="text-align:center">byte</td>\n</tr>\n<tr>\n<td style="text-align:center">_long</td>\n<td style="text-align:center">long</td>\n</tr>\n<tr>\n<td style="text-align:center">_short</td>\n<td style="text-align:center">short</td>\n</tr>\n<tr>\n<td style="text-align:center">_int</td>\n<td style="text-align:center">int</td>\n</tr>\n<tr>\n<td style="text-align:center">_integer</td>\n<td style="text-align:center">int</td>\n</tr>\n<tr>\n<td style="text-align:center">_double</td>\n<td style="text-align:center">double</td>\n</tr>\n<tr>\n<td style="text-align:center">_float</td>\n<td style="text-align:center">float</td>\n</tr>\n<tr>\n<td style="text-align:center">_boolean</td>\n<td style="text-align:center">boolean</td>\n</tr>\n</tbody>\n</table>\n<h3 id="封装类型映射" tabindex="-1"><a class="header-anchor" href="#封装类型映射" aria-hidden="true">#</a> 封装类型映射</h3>\n<table>\n<thead>\n<tr>\n<th style="text-align:center">Alias(别名)</th>\n<th style="text-align:center">Mapped Type（对应类型）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style="text-align:center">string</td>\n<td style="text-align:center">String</td>\n</tr>\n<tr>\n<td style="text-align:center">byte</td>\n<td style="text-align:center">Byte</td>\n</tr>\n<tr>\n<td style="text-align:center">long</td>\n<td style="text-align:center">Long</td>\n</tr>\n<tr>\n<td style="text-align:center">short</td>\n<td style="text-align:center">Short</td>\n</tr>\n<tr>\n<td style="text-align:center">int</td>\n<td style="text-align:center">Integer</td>\n</tr>\n<tr>\n<td style="text-align:center">integer</td>\n<td style="text-align:center">Integer</td>\n</tr>\n<tr>\n<td style="text-align:center">double</td>\n<td style="text-align:center">Double</td>\n</tr>\n<tr>\n<td style="text-align:center">float</td>\n<td style="text-align:center">Float</td>\n</tr>\n<tr>\n<td style="text-align:center">boolean</td>\n<td style="text-align:center">Boolean</td>\n</tr>\n<tr>\n<td style="text-align:center">date</td>\n<td style="text-align:center">Date</td>\n</tr>\n<tr>\n<td style="text-align:center">decimal</td>\n<td style="text-align:center">BigDecimal</td>\n</tr>\n<tr>\n<td style="text-align:center">bigdecimal</td>\n<td style="text-align:center">BigDecimal</td>\n</tr>\n<tr>\n<td style="text-align:center">object</td>\n<td style="text-align:center">Object</td>\n</tr>\n<tr>\n<td style="text-align:center">map</td>\n<td style="text-align:center">Map</td>\n</tr>\n<tr>\n<td style="text-align:center">hashmap</td>\n<td style="text-align:center">HashMap</td>\n</tr>\n<tr>\n<td style="text-align:center">list</td>\n<td style="text-align:center">List</td>\n</tr>\n<tr>\n<td style="text-align:center">arraylist</td>\n<td style="text-align:center">ArrayList</td>\n</tr>\n<tr>\n<td style="text-align:center">collection</td>\n<td style="text-align:center">Collection</td>\n</tr>\n<tr>\n<td style="text-align:center">iterator</td>\n<td style="text-align:center">Iterator</td>\n</tr>\n</tbody>\n</table>\n<h2 id="mybatis的增删改查" tabindex="-1"><a class="header-anchor" href="#mybatis的增删改查" aria-hidden="true">#</a> MyBatis的增删改查</h2>\n<h3 id="_1、添加" tabindex="-1"><a class="header-anchor" href="#_1、添加" aria-hidden="true">#</a> 1、添加</h3>\n<div class="language-xml ext-xml line-numbers-mode"><pre v-pre class="language-xml"><code><span class="token comment">&lt;!-- 接口中的方法 int insertGame();--\x3e</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>insertGame<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    insert into games(username,password,type,company,year) values(\'test4\',\'123456\',\'FPS\',\'未知\',\'2022\')\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="_2、删除" tabindex="-1"><a class="header-anchor" href="#_2、删除" aria-hidden="true">#</a> 2、删除</h3>\n<div class="language-xml ext-xml line-numbers-mode"><pre v-pre class="language-xml"><code><span class="token comment">&lt;!-- 接口中的方法 int deleteGame();--\x3e</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deleteGame<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    delete from games where id = 1\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="_3、修改" tabindex="-1"><a class="header-anchor" href="#_3、修改" aria-hidden="true">#</a> 3、修改</h3>\n<div class="language-xml ext-xml line-numbers-mode"><pre v-pre class="language-xml"><code><span class="token comment">&lt;!-- 接口中的方法 int updateGame();--\x3e</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>updateGame<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    UPDATE `game`.`games` \n    SET `username` = \'admin\',\n    `password` = \'123456\',\n    `type` = \'即时战略\',\n    `company` = \'暴雪\',\n    `year` = \'1995\' \n    WHERE\n    `id` = 1;\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="_4、查询" tabindex="-1"><a class="header-anchor" href="#_4、查询" aria-hidden="true">#</a> 4、查询</h3>\n<div class="custom-container warning"><p class="custom-container-title">注意</p>\n<p>查询的标签select相比于其他标签比较特殊，添加、删除、修改的返回值都是受影响的行数所以类型都为int类型，但是查询不一样，查询的返回类型是多变的，通常情况下mybatis是不知道你要返回的数据是什么类型的，所以需要我们手动去指定</p>\n<p>查询的标签必须设置属性<code>resultType</code>或者<code>resultMap</code>,用来指定实体类与数据库表的映射关系，其实这一步骤相当于我们之前的ResultSet设置实体类，只不过mybatis帮我们做了这一件事情，我们只需要设置返回类型，其余映射的mybatis会自动帮我们完成</p>\n</div>\n<div class="custom-container warning"><p class="custom-container-title">resultType与resultMap的区别</p>\n<p>resultType采用的是自动映射，也就是说只要你实体类的属性名称与数据库表的列名一致，那么mybatis就能够直接进行映射</p>\n<p>resultMap是为自定义映射，通常用于一对多、多对一的复杂查询，或者实体类属性名与数据库列明不一致的情况</p>\n</div>\n<h4 id="查询单条数据" tabindex="-1"><a class="header-anchor" href="#查询单条数据" aria-hidden="true">#</a> 查询单条数据</h4>\n<p>创建实体类</p>\n<details class="custom-container details"><summary>点击查看代码</summary>\n<div class="language-java ext-java line-numbers-mode"><pre v-pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>bdqn<span class="token punctuation">.</span>model</span><span class="token punctuation">;</span>\n\n<span class="token doc-comment comment">/**\n * @ClassName: Games\n * @Description: Game实体类\n * @Date: 2022-09-07 11:34:01\n * @Author: HuangYaoDong\n */</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Game</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> type<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> company<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> year<span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> id<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> username<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>username <span class="token operator">=</span> username<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> password<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token class-name">String</span> password<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>password <span class="token operator">=</span> password<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> type<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setType</span><span class="token punctuation">(</span><span class="token class-name">String</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getCompany</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> company<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCompany</span><span class="token punctuation">(</span><span class="token class-name">String</span> company<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>company <span class="token operator">=</span> company<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> year<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setYear</span><span class="token punctuation">(</span><span class="token class-name">String</span> year<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>year <span class="token operator">=</span> year<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token string">"Game{"</span> <span class="token operator">+</span>\n                <span class="token string">"id="</span> <span class="token operator">+</span> id <span class="token operator">+</span>\n                <span class="token string">", username=\'"</span> <span class="token operator">+</span> username <span class="token operator">+</span> <span class="token char">\'\\\'\'</span> <span class="token operator">+</span>\n                <span class="token string">", password=\'"</span> <span class="token operator">+</span> password <span class="token operator">+</span> <span class="token char">\'\\\'\'</span> <span class="token operator">+</span>\n                <span class="token string">", type=\'"</span> <span class="token operator">+</span> type <span class="token operator">+</span> <span class="token char">\'\\\'\'</span> <span class="token operator">+</span>\n                <span class="token string">", company=\'"</span> <span class="token operator">+</span> company <span class="token operator">+</span> <span class="token char">\'\\\'\'</span> <span class="token operator">+</span>\n                <span class="token string">", year=\'"</span> <span class="token operator">+</span> year <span class="token operator">+</span> <span class="token char">\'\\\'\'</span> <span class="token operator">+</span>\n                <span class="token char">\'}\'</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br></div></div></details>\n<p>编写mapper接口代码</p>\n<div class="language-java ext-java line-numbers-mode"><pre v-pre class="language-java"><code><span class="token doc-comment comment">/**\n  * 查询单条数据\n  *\n  * <span class="token keyword">@date</span> 2022/9/7 11:37\n  * <span class="token keyword">@author</span> HangYaoDong\n  * <span class="token keyword">@return</span> cn.bdqn.model.Game 游戏信息\n  */</span>\n<span class="token class-name">Game</span> <span class="token function">selectOneGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>编写mapper映射文件</p>\n<div class="language-xml ext-xml line-numbers-mode"><pre v-pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectOneGame<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cn.bdqn.model.Game<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    select * from games limit 1\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>测试：</p>\n<div class="language-java ext-java line-numbers-mode"><pre v-pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testInsertGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n    <span class="token comment">//读取mybatis的核心配置文件</span>\n    <span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"mybatis-config.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//获取SqlSessionFactoryBuilder对象（工厂构建者）</span>\n    <span class="token class-name">SqlSessionFactoryBuilder</span> sqlSessionFactoryBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//通过核心配置文件所对应的字节输入流创建工厂类SqlSessionFactory，生产SqlSession对象</span>\n    <span class="token class-name">SqlSessionFactory</span> sqlSessionFactory <span class="token operator">=</span> sqlSessionFactoryBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//获取SqlSession，此时通过SqlSession对象所操作的sql都必须手动提交或者回滚事务</span>\n    <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//通过代理模式创建GameMapper接口的代理实现类对象</span>\n    <span class="token class-name">GameMapper</span> gameMapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">GameMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//调用UserMapper接口中的方法，就可以根据UserMapper的全类名匹配元素文件，通过调用的方法名匹配映射文件中的SQL标签，并执行标签中的SQL语句</span>\n    <span class="token class-name">Game</span> game <span class="token operator">=</span> gameMapper<span class="token punctuation">.</span><span class="token function">selectOneGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>game<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>运行结果：</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="20.png" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/20.png" data="aurora"></p>\n<details class="custom-container details"><summary>点击查看详细解析</summary>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="21.png" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/21.png" data="aurora"></p>\n</details>\n<h4 id="查询多条数据" tabindex="-1"><a class="header-anchor" href="#查询多条数据" aria-hidden="true">#</a> 查询多条数据</h4>\n<div class="custom-container warning"><p class="custom-container-title">返回值</p>\n<p>当查询的数据为多条时，不能使用实体类作为返回值，只能使用集合，否则会抛出异常<span style="color:red"><strong>TooManyResultsException</strong></span>,但若查询的数据只有一条时，可以使用实体类或者集合作为返回类型</p>\n</div>\n<p>编写mapper接口代码</p>\n<div class="language-java ext-java line-numbers-mode"><pre v-pre class="language-java"><code><span class="token doc-comment comment">/**\n  * 查询多条数据\n  *\n  * <span class="token keyword">@date</span> 2022/9/7 11:55\n  * <span class="token keyword">@author</span> HangYaoDong\n  * <span class="token keyword">@return</span> java.util.List<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cn.bdqn.model.Game</span><span class="token punctuation">></span></span> 游戏信息集合\n  */</span>\n<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Game</span><span class="token punctuation">></span></span> <span class="token function">selectGameList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>编写mapper映射文件</p>\n<div class="custom-container warning"><p class="custom-container-title">resultType返回值</p>\n<p>查询多条数据的时候，接口中方法返回值必须为集合，resultType内的值为集合的泛型，mybatis会自动进行数据填充</p>\n</div>\n<div class="language-xml ext-xml line-numbers-mode"><pre v-pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectGameList<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cn.bdqn.model.Game<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    select * from games\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>测试</p>\n<div class="language-java ext-java line-numbers-mode"><pre v-pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testInsertGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n    <span class="token comment">//读取mybatis的核心配置文件</span>\n    <span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"mybatis-config.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//获取SqlSessionFactoryBuilder对象（工厂构建者）</span>\n    <span class="token class-name">SqlSessionFactoryBuilder</span> sqlSessionFactoryBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//通过核心配置文件所对应的字节输入流创建工厂类SqlSessionFactory，生产SqlSession对象</span>\n    <span class="token class-name">SqlSessionFactory</span> sqlSessionFactory <span class="token operator">=</span> sqlSessionFactoryBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//获取SqlSession，此时通过SqlSession对象所操作的sql都必须手动提交或者回滚事务</span>\n    <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//通过代理模式创建GameMapper接口的代理实现类对象</span>\n    <span class="token class-name">GameMapper</span> gameMapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">GameMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//调用UserMapper接口中的方法，就可以根据UserMapper的全类名匹配元素文件，通过调用的方法名匹配映射文件中的SQL标签，并执行标签中的SQL语句</span>\n    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Game</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> gameMapper<span class="token punctuation">.</span><span class="token function">selectGameList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//提交事务，SqlSession默认是手动提交事务，即增删改不提交事务则数据库中不生效</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Game</span> game <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>game<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>运行结果：</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="22.png" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/22.png" data="aurora"></p>\n<h2 id="mybatis获取参数值的两种方式-重点" tabindex="-1"><a class="header-anchor" href="#mybatis获取参数值的两种方式-重点" aria-hidden="true">#</a> MyBatis获取参数值的两种方式（<span style="color:red">重点</span>）</h2>\n<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>以上我们所进行的操作全部都是直接在sql中把值定死的，但是实际开发中这么去写显然是不合理的</p>\n<p>mybatis给我们提供了两种方式进行传参，分别是<code>${}</code>与<code>#{}</code></p>\n<p><code>${}</code>的本质就是字符串拼接，<code>${}</code>使用字符串拼接的方式拼接sql，若为字符串类型或日期类型的字段进行赋值时，需要手动加单引号</p>\n<p><code>#{}</code>的本质就是字符串替换，<code>#{}</code>使用占位符赋值的方式拼接sql，此时为字符串类型或日期类型的字段进行赋值时，可以自动添加单引号</p>\n</div>\n<div class="custom-container danger"><p class="custom-container-title">警告</p>\n<p>我们之前在学习JDBC的时候就已经讲过了，在程序中最好不要使用<code>${}</code>也就是字符串拼接，因为这种拼接方式是有被SQL注入的风险的，所以一般来讲我们在开发的时候用的都是<code>#{}</code>字符串替换</p>\n</div>\n<h3 id="单个字面量类型的参数" tabindex="-1"><a class="header-anchor" href="#单个字面量类型的参数" aria-hidden="true">#</a> 单个字面量类型的参数</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="23.png" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/23.png" data="aurora"></p>\n<details class="custom-container details"><summary>使用${}方式传参，仅演示一次，因使用次数较少不过多演示</summary>\n<div class="language-xml ext-xml line-numbers-mode"><pre v-pre class="language-xml"><code><span class="token comment">&lt;!--Game selectGameByName(String name);--\x3e</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectGameByName<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Game<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  \n\tselect * from games where name = \'${name}\'  \n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></details>\n<h3 id="多个字面量类型的参数" tabindex="-1"><a class="header-anchor" href="#多个字面量类型的参数" aria-hidden="true">#</a> 多个字面量类型的参数</h3>\n<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>当mapper接口中的参数为多个时，mybatis会自动将这些参数放在一个map集合当中，在这个由参数组成的map集合里，key划分为两种，分别是：</p>\n<ol>\n<li>以<code>arg0</code>,<code>arg1</code>...为键（key），以参数为值（value）</li>\n<li>以<code>param1</code>，<code>param2</code>...为键（key），以参数为值（value）</li>\n</ol>\n<p>因此，我们只需要通过<code>${}</code>或<code>#{}</code>来访问map集合的键就可以获取到对应的值，注意如果你使用的是${}的话记得手动加上单引号</p>\n<p>使用arg或者param都行，但是要注意的是：</p>\n<ol>\n<li>arg是从起始索引0开始计算的，假设现在有两个参数需要调用，按照从左往右的顺序，第一个参数就是arg0，第二个参数就是arg1以此类推</li>\n<li>param是从参数位置1开始计算的，假设现在有两个参数需要调用，按照从左往右的顺序，第一个参数就是param1，第二个参数就是param2以此类推</li>\n</ol>\n</div>\n<div class="custom-container danger"><p class="custom-container-title">警告</p>\n<p>当你有多个参数，并且保持默认状态没有指定各参数的标识名称时，是无法直接使用参数名称来进行调用的，可调用方式仅局限于arg及param</p>\n</div>\n<p>使用arg的方式进行参数调用：</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="24.png" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/24.png" data="aurora"></p>\n<div class="language-xml ext-xml line-numbers-mode"><pre v-pre class="language-xml"><code><span class="token comment">&lt;!-- Game selectGameByName(String name,String type) --\x3e</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectGameByName<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cn.bdqn.model.Game<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    select * from games where username = #{arg0} and type = #{arg1}\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>使用param的方式进行参数调用：</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="25.png" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/25.png" data="aurora"></p>\n<div class="language-xml ext-xml line-numbers-mode"><pre v-pre class="language-xml"><code><span class="token comment">&lt;!-- Game selectGameByName(String name,String type) --\x3e</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectGameByName<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cn.bdqn.model.Game<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    select * from games where username = #{param1} and type = #{param2}\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/mybatis/Mybatis详解.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"Mybatis详解",filePath:"D:/blog/docs/mybatis/Mybatis详解.md",filePathRelative:"mybatis/Mybatis详解.md",componentFilePath:"D:/blog/docs/.vuepress/.temp/pages/mybatis/Mybatis详解.html.vue",componentFilePathRelative:"pages/mybatis/Mybatis详解.html.vue",componentFileChunkName:"v-435885cf",dataFilePath:"D:/blog/docs/.vuepress/.temp/pages/mybatis/Mybatis详解.html.js",dataFilePathRelative:"pages/mybatis/Mybatis详解.html.js",dataFileChunkName:"v-435885cf",htmlFilePath:"D:/blog/docs/.vuepress/dist/mybatis/Mybatis详解.html",htmlFilePathRelative:"mybatis/Mybatis详解.html"},{data:{key:"v-13c9aef5",path:"/vue/vue.html",title:"Vue基础",lang:"zh-CN",frontmatter:{title:"Vue基础",date:"2022/9/2 11:06",tag:["vue"],categories:["前端"],coverUrl:"https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210831004055590.png"},excerpt:"",headers:[{level:3,title:"vue技术栈",slug:"vue技术栈",children:[]},{level:3,title:"解决什么问题",slug:"解决什么问题",children:[]},{level:2,title:"1.安装",slug:"_1-安装",children:[{level:3,title:"VUE初体验",slug:"vue初体验",children:[]}]},{level:2,title:"2.Vue实例",slug:"_2-vue实例",children:[{level:3,title:"基本概念",slug:"基本概念",children:[]},{level:3,title:"创建",slug:"创建",children:[]},{level:3,title:"数据与方法",slug:"数据与方法",children:[]},{level:3,title:"生命周期钩子",slug:"生命周期钩子",children:[]}]},{level:2,title:"3.指令",slug:"_3-指令",children:[{level:3,title:"指令概念",slug:"指令概念",children:[]}]},{level:2,title:"4.过滤器",slug:"_4-过滤器",children:[{level:3,title:"作用",slug:"作用-9",children:[]},{level:3,title:"适用场景",slug:"适用场景-1",children:[]},{level:3,title:"语法",slug:"语法-1",children:[]},{level:3,title:"例子",slug:"例子",children:[]}]},{level:2,title:"5.计算属性",slug:"_5-计算属性",children:[]},{level:2,title:"6.侦听器",slug:"_6-侦听器",children:[]},{level:2,title:"7.Vue组件",slug:"_7-vue组件",children:[{level:3,title:"7-1.组件的定义",slug:"_7-1-组件的定义",children:[]},{level:3,title:"7-2.组件中的结构",slug:"_7-2-组件中的结构",children:[]},{level:3,title:"7-3.组件中的data只能是一个function",slug:"_7-3-组件中的data只能是一个function",children:[]},{level:3,title:"7-4.父组件向子组件传值(子组件使用父组件的数据)",slug:"_7-4-父组件向子组件传值-子组件使用父组件的数据",children:[]},{level:3,title:"7-5.子组件调用父组件的方法(父组件的方法传递给子组件)",slug:"_7-5-子组件调用父组件的方法-父组件的方法传递给子组件",children:[]},{level:3,title:"7-6.子组件调用父组件方法的时候传参",slug:"_7-6-子组件调用父组件方法的时候传参",children:[]},{level:3,title:"7-7.兄弟组件之间的通信",slug:"_7-7-兄弟组件之间的通信",children:[]},{level:3,title:"7-8.采用v-if来实现不同组件的切换",slug:"_7-8-采用v-if来实现不同组件的切换",children:[]},{level:3,title:"7-9.动态组件",slug:"_7-9-动态组件",children:[]},{level:3,title:"7-10.插槽",slug:"_7-10-插槽",children:[]},{level:3,title:"7-11.组件的嵌套",slug:"_7-11-组件的嵌套",children:[]},{level:3,title:"7-12.组件复用案例：购物车",slug:"_7-12-组件复用案例-购物车",children:[]}]},{level:2,title:"8.VUE路由",slug:"_8-vue路由",children:[{level:3,title:"8-0.路由原理",slug:"_8-0-路由原理",children:[]},{level:3,title:"8-1.路由概述",slug:"_8-1-路由概述",children:[]},{level:3,title:"8-2.定义一个基本的路由",slug:"_8-2-定义一个基本的路由",children:[]},{level:3,title:"8-3.路由重定向",slug:"_8-3-路由重定向",children:[]},{level:3,title:"8-4.编程式导航",slug:"_8-4-编程式导航",children:[]},{level:3,title:"8-5.路由传参",slug:"_8-5-路由传参",children:[]},{level:3,title:"8-6.嵌套路由",slug:"_8-6-嵌套路由",children:[]},{level:3,title:"8-7.命名路由",slug:"_8-7-命名路由",children:[]},{level:3,title:"8-8.命名视图",slug:"_8-8-命名视图",children:[]},{level:3,title:"8-9.路由中监视当前路由的路径",slug:"_8-9-路由中监视当前路由的路径",children:[]}]},{level:2,title:"9.前端工程化",slug:"_9-前端工程化",children:[{level:3,title:"各种方式搭建脚手架",slug:"各种方式搭建脚手架",children:[]},{level:3,title:"vue脚手架目录说明",slug:"vue脚手架目录说明",children:[]},{level:3,title:"9-0.项目基础配置",slug:"_9-0-项目基础配置",children:[]},{level:3,title:"9-1.导入less",slug:"_9-1-导入less",children:[]},{level:3,title:"9-2.导入element",slug:"_9-2-导入element",children:[]},{level:3,title:"9-3.两种不同的组件配置",slug:"_9-3-两种不同的组件配置",children:[]},{level:3,title:"9-4.较为全面的路由配置",slug:"_9-4-较为全面的路由配置",children:[]}]}],git:{}},key:"v-13c9aef5",path:"/vue/vue.html",title:"Vue基础",lang:"zh-CN",frontmatter:{title:"Vue基础",date:"2022/9/2 11:06",tag:["vue"],categories:["前端"],coverUrl:"https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210831004055590.png"},excerpt:"",headers:[{level:3,title:"vue技术栈",slug:"vue技术栈",children:[]},{level:3,title:"解决什么问题",slug:"解决什么问题",children:[]},{level:2,title:"1.安装",slug:"_1-安装",children:[{level:3,title:"VUE初体验",slug:"vue初体验",children:[]}]},{level:2,title:"2.Vue实例",slug:"_2-vue实例",children:[{level:3,title:"基本概念",slug:"基本概念",children:[]},{level:3,title:"创建",slug:"创建",children:[]},{level:3,title:"数据与方法",slug:"数据与方法",children:[]},{level:3,title:"生命周期钩子",slug:"生命周期钩子",children:[]}]},{level:2,title:"3.指令",slug:"_3-指令",children:[{level:3,title:"指令概念",slug:"指令概念",children:[]}]},{level:2,title:"4.过滤器",slug:"_4-过滤器",children:[{level:3,title:"作用",slug:"作用-9",children:[]},{level:3,title:"适用场景",slug:"适用场景-1",children:[]},{level:3,title:"语法",slug:"语法-1",children:[]},{level:3,title:"例子",slug:"例子",children:[]}]},{level:2,title:"5.计算属性",slug:"_5-计算属性",children:[]},{level:2,title:"6.侦听器",slug:"_6-侦听器",children:[]},{level:2,title:"7.Vue组件",slug:"_7-vue组件",children:[{level:3,title:"7-1.组件的定义",slug:"_7-1-组件的定义",children:[]},{level:3,title:"7-2.组件中的结构",slug:"_7-2-组件中的结构",children:[]},{level:3,title:"7-3.组件中的data只能是一个function",slug:"_7-3-组件中的data只能是一个function",children:[]},{level:3,title:"7-4.父组件向子组件传值(子组件使用父组件的数据)",slug:"_7-4-父组件向子组件传值-子组件使用父组件的数据",children:[]},{level:3,title:"7-5.子组件调用父组件的方法(父组件的方法传递给子组件)",slug:"_7-5-子组件调用父组件的方法-父组件的方法传递给子组件",children:[]},{level:3,title:"7-6.子组件调用父组件方法的时候传参",slug:"_7-6-子组件调用父组件方法的时候传参",children:[]},{level:3,title:"7-7.兄弟组件之间的通信",slug:"_7-7-兄弟组件之间的通信",children:[]},{level:3,title:"7-8.采用v-if来实现不同组件的切换",slug:"_7-8-采用v-if来实现不同组件的切换",children:[]},{level:3,title:"7-9.动态组件",slug:"_7-9-动态组件",children:[]},{level:3,title:"7-10.插槽",slug:"_7-10-插槽",children:[]},{level:3,title:"7-11.组件的嵌套",slug:"_7-11-组件的嵌套",children:[]},{level:3,title:"7-12.组件复用案例：购物车",slug:"_7-12-组件复用案例-购物车",children:[]}]},{level:2,title:"8.VUE路由",slug:"_8-vue路由",children:[{level:3,title:"8-0.路由原理",slug:"_8-0-路由原理",children:[]},{level:3,title:"8-1.路由概述",slug:"_8-1-路由概述",children:[]},{level:3,title:"8-2.定义一个基本的路由",slug:"_8-2-定义一个基本的路由",children:[]},{level:3,title:"8-3.路由重定向",slug:"_8-3-路由重定向",children:[]},{level:3,title:"8-4.编程式导航",slug:"_8-4-编程式导航",children:[]},{level:3,title:"8-5.路由传参",slug:"_8-5-路由传参",children:[]},{level:3,title:"8-6.嵌套路由",slug:"_8-6-嵌套路由",children:[]},{level:3,title:"8-7.命名路由",slug:"_8-7-命名路由",children:[]},{level:3,title:"8-8.命名视图",slug:"_8-8-命名视图",children:[]},{level:3,title:"8-9.路由中监视当前路由的路径",slug:"_8-9-路由中监视当前路由的路径",children:[]}]},{level:2,title:"9.前端工程化",slug:"_9-前端工程化",children:[{level:3,title:"各种方式搭建脚手架",slug:"各种方式搭建脚手架",children:[]},{level:3,title:"vue脚手架目录说明",slug:"vue脚手架目录说明",children:[]},{level:3,title:"9-0.项目基础配置",slug:"_9-0-项目基础配置",children:[]},{level:3,title:"9-1.导入less",slug:"_9-1-导入less",children:[]},{level:3,title:"9-2.导入element",slug:"_9-2-导入element",children:[]},{level:3,title:"9-3.两种不同的组件配置",slug:"_9-3-两种不同的组件配置",children:[]},{level:3,title:"9-4.较为全面的路由配置",slug:"_9-4-较为全面的路由配置",children:[]}]}],content:'\r\n# Vue.js简介\r\n\r\n- 一套用于构建用户界面的**渐进式框架**\r\n- Vue 被设计为可以自底向上逐层应用\r\n- Vue 的核心库只关注视图层\r\n\r\n**按需导入**\r\n\r\nVue是三大前端流行框架之一\r\n\r\n声明式编程，符合MVC的设计\r\n\r\n### `vue技术栈`\r\n\r\n| **`web技术栈`**                                              | **`移动端技术栈`**                                           |\r\n| ------------------------------------------------------------ | ------------------------------------------------------------ |\r\n| VUE基础(语法/组件)                                           | VUE基础(语法/组件)                                           |\r\n| VUE_Router----路由                                           | VUE_Router----路由                                           |\r\n| axios-----交互                                               | axios-----交互                                               |\r\n| webpakage----打包工具                                        | webpakage----打包工具                                        |\r\n| Element UI------UI框架(iview  UI \\| HeyUI \\| Ant Design of Vue \\|  AmazeUI \\| MuseUI ) | EEUI----UI框架(Vant https://vant-contrib.gitee.io/vant/#/zh-CN/ ) |\r\n| VUEX------数据共享                                           | VUEX------数据共享                                           |\r\n\r\n### `解决什么问题`\r\n\r\n> > 前端渲染的方式：\r\n> >\r\n> > 1.原生字符串拼接: 容易拼接出错，且不同的人代码风格不同，项目换人后，较难维护\r\n> >\r\n> > 2.模版引擎: 解决了代码可读性问题，但是仍然容易出错，且没有专门的事件机制\r\n> >\r\n> > 3.vue模版语法\r\n>\r\n> vue模版语法有效的解决了上述问题\r\n\r\n![image-20210827104742406](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210827104742406.png)\r\n\r\nvue工作原理\r\n\r\n![image-20210827171240521](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210827171240521.png)\r\n\r\n\r\n\r\n\r\n\r\n## 1.安装\r\n\r\n离线：使用页面的script标签进行导入下载好的vue.js文档(https://cn.vuejs.org/js/vue.js)\r\n\r\n```html\r\n<script src="文件路径/vue.js"><\/script>\r\n```\r\n\r\n在线:\r\n\r\n```html\r\n <script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"><\/script>\r\n```\r\n\r\n### `VUE初体验`\r\n\r\n![image-20210827101732307](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210827101732307.png)\r\n\r\n## 2.Vue实例\r\n\r\n### 基本概念\r\n\r\n>MVVM:\r\n>\r\n>m--model: 模型\r\n>\r\n>v--view： 视图\r\n>\r\n>vm--viewModel: 模型视图，介于模型和视图之间的东西，起到桥梁作用，使得模型和视图能够分开，也能保持通讯\r\n\r\n![image-20210831004055590](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210831004055590.png)\r\n\r\n### 创建\r\n\r\n每个 Vue 应用都是通过用 `Vue` 函数创建一个新的 **Vue 实例**开始的：\r\n\r\n```javascript\r\nconst\t vm = new Vue({\r\n  // 选项\r\n})\r\n```\r\n\r\n### 数据与方法\r\n\r\n```vue\r\ndata的两种方式:\r\n//数据对象\r\ndata:{\r\n    \r\n}\r\n\r\n//数据函数方法\r\ndata() {\r\n    return {}\r\n}\r\n```\r\n\r\n**对象必须是纯粹的对象 (含有零个或多个的 key/value 对)**\r\n\r\n```javascript\r\n// 我们的数据对象\r\nvar data = { a: 1 }\r\n\r\n// 该对象被加入到一个 Vue 实例中\r\nvar vm = new Vue({\r\n  data: data\r\n})\r\n\r\n// 获得这个实例上的 property\r\n// 返回源数据中对应的字段\r\nvm.a == data.a // => true\r\n\r\n// 设置 property 也会影响到原始数据\r\nvm.a = 2\r\ndata.a // => 2\r\n\r\n// ……反之亦然\r\ndata.a = 3\r\nvm.a // => 3\r\n```\r\n\r\n如果你知道你后面需要一个 property，但是一开始它为空或不存在，那么你仅需要设置一些初始值\r\n\r\n```javascript\r\ndata: {\r\n  newTodoText: \'\',\r\n  visitCount: 0,\r\n  hideCompletedTodos: false,\r\n  todos: [],\r\n  error: null\r\n}\r\n```\r\n\r\n如果要阻止修改现有的property的行为，那么可以使用Object.freeze()\r\n\r\n```javascript\r\nvar data = { a: 1 }\r\nvar vm = new Vue({\r\n  el: \'#example\',\r\n  data: data\r\n})\r\n\r\nvm.$data === data // => true\r\nvm.$el === document.getElementById(\'example\') // => true\r\n\r\n// $watch 是一个实例方法  监听该值\r\nvm.$watch(\'a\', function (newValue, oldValue) {\r\n  // 这个回调将在 `vm.a` 改变后调用\r\n})\r\n```\r\n\r\n\r\n\r\n### 生命周期钩子\r\n\r\n- created:在实例创建完成后立即执行，\r\n- beforeMount:在挂载之前被调用，相关的渲染函数首次被调用\r\n- mounted:el被新创建的vm.$el替换，挂载成功\r\n- beforeUpdate:数据更新的调用\r\n- updated:组件DOM已经更新，组件更新完毕\r\n\r\n**不要在选项 property 或回调上使用箭头函数  =>,因为这样无法使用this指向Vue实例**\r\n\r\n## 3.指令\r\n\r\n###  指令概念\r\n\r\n- 本质就是自定义属性 \r\n- Vue中指令都是以 v- 开头  \r\n\r\n#### 插值\r\n\r\n数据绑定最常见的形式就是使用“Mustache”语法 (双大括号) 的文本插值：\r\n\r\n```vue\r\n<span>Message: {{ msg }}</span>\r\n```\r\n\r\nvue的指令： v- 开头的特殊属性\r\n作用是：将dom和数据进行响应\r\n\r\n####  v-cloak\r\n\r\n- 防止页面加载时出现闪烁问题\r\n\r\n  ```html\r\n   <style type="text/css">\r\n    /* \r\n      1、通过属性选择器 选择到 带有属性 v-cloak的标签  让他隐藏\r\n   */\r\n    [v-cloak]{\r\n      /* 元素隐藏    */\r\n      display: none;\r\n    }\r\n    </style>\r\n  <body>\r\n    <div id="app">\r\n      \x3c!-- 2、 让带有插值 语法的   添加 v-cloak 属性 \r\n           在 数据渲染完场之后，v-cloak 属性会被自动去除，\r\n           v-cloak一旦移除也就是没有这个属性了  属性选择器就选择不到该标签\r\n  \t\t 也就是对应的标签会变为可见\r\n      --\x3e\r\n      <div  v-cloak  >{{msg}}</div>\r\n    </div>\r\n    <script type="text/javascript" src="js/vue.js"><\/script>\r\n    <script type="text/javascript">\r\n      var vm = new Vue({\r\n        //  el   指定元素 id 是 app 的元素  \r\n        el: \'#app\',\r\n        //  data  里面存储的是数据\r\n        data: {\r\n          msg: \'Hello Vue\'\r\n        }\r\n      });\r\n  <\/script>\r\n  </body>\r\n  </html>\r\n  ```\r\n\r\n####  v-pre\r\n\r\n- 显示原始信息跳过编译过程\r\n- 跳过这个元素和它的子元素的编译过程。\r\n- **一些静态的内容不需要编译加这个指令可以加快渲染**\r\n\r\n```html\r\n    <span v-pre>{{ this will not be compiled }}</span>    \r\n\t\x3c!--  显示的是{{ this will not be compiled }}  --\x3e\r\n\t<span v-pre>{{msg}}</span>  \r\n     \x3c!--   即使data里面定义了msg这里仍然是显示的{{msg}}  --\x3e\r\n<script>\r\n    new Vue({\r\n        el: \'#app\',\r\n        data: {\r\n            msg: \'Hello Vue.js\'\r\n        }\r\n    });\r\n\r\n<\/script>\r\n```\r\n\r\n#### **v-once**\r\n\r\n- 执行一次性的插值【当数据改变时，插值处的内容不会继续更新】\r\n\r\n```html\r\n  \x3c!-- 即使data里面定义了msg 后期我们修改了 仍然显示的是第一次data里面存储的数据即 Hello Vue.js  --\x3e\r\n     <span v-once>{{ msg}}</span>    \r\n<script>\r\n    new Vue({\r\n        el: \'#app\',\r\n        data: {\r\n            msg: \'Hello Vue.js\'\r\n        }\r\n    });\r\n<\/script>\r\n```\r\n\r\n\r\n\r\n#### v-text\r\n\r\nv-text:一定程度上等效于{{}}\r\n\r\n#####         作用\r\n\r\n​            将v-text=""内部的变量渲染(覆盖)到标签的内部\r\n\r\n#####         用法\r\n\r\n​            在标签内部给定v-text="绑定到data的键"\r\n\r\n#####         作用机理\r\n\r\n​            v-text实际上是将指定键的值给到元素的InnerText属性\r\n\r\n#####         注意事项\r\n\r\n​            只能用于元素的InnerText属性能够接收数据的元素\r\n\r\n#####  v-text和{{}}的区别\r\n\r\n- 里面都能够放置表达式|表达式\r\n- {{}}不会覆盖标签体中已有的数据，而v-text会将标签体进行覆盖\r\n- 在网络延迟高的情况下，{{}}会将未填充数据的格式直接显示出来，这样会导致用户体验不佳，而v-text会等数据加载完后再进行渲染\r\n- 如果非要用{{}}又要解决上面的显示表达式的问题，就在父元素上面添加v-cloak，然后再`<style>`里面设置`[v-cloak]{display:none;}`\r\n\r\n#### v-html\r\n\r\n##### 作用\r\n\r\n​\t将v-html=""内部的变量渲染到标签的内部\r\n\r\n##### 作用机理\r\n\r\n```html\r\nv-html实际上是将指定键的值给到元素的innerHtml属性\r\n```\r\n\r\n##### 注意事项\r\n\r\n​\t只能用给innerHtml能接收值得元素赋值\r\n\r\n​\tv-html会覆盖标签体的值\r\n\r\n#### v-model\r\n\r\n##### 作用\r\n\r\n​     **双向绑定指令**，限制在 `<input>、<select>、<textarea>、components`中使用\r\n\r\n> - 当数据发生变化的时候，视图也就发生变化\r\n> - 当视图发生变化的时候，数据也会跟着同步变化\r\n\r\n##### 注意事项\r\n\r\n​\t他不能用在纯展示信息的元素上，否则会报错\r\n\r\n##### 底层原理\r\n\r\n```vue\r\n<input :value="msg" @input="shuru">\r\n<input :value="msg" @input="msg = $event.target.value">\r\n\r\n<script>\r\n    const vm = new Vue({\r\n        el: "#app",\r\n        data: {\r\n            msg: "哈麻皮"\r\n        },\r\n        methods: {\r\n            shuru(event) { \r\n                console.log(event.target.value)\r\n            }\r\n        }\r\n    })\r\n<\/script>\r\n```\r\n\r\n#### v-if\r\n\r\n##### 作用\r\n\r\n​\t根据不同的条件对数据显示或隐藏\r\n\r\n##### 作用机理\r\n\r\n​\t当v-if条件满足时对应的元素或数据进行渲染\r\n\r\n##### 注意事项\r\n\r\n​\tv-else-if 或 v-else 依托于 v-if\r\n\r\n##### 适用场景\r\n\r\n​\t后台给的数据对应了不同的前端展示\r\n\r\n#### v-show\r\n\r\n##### 作用\r\n\r\n​\t判断条件是否成立，成立就显示，不成立则不显示\r\n\r\n##### 作用机理\r\n\r\n```html\r\nv-show是通过添加行内样式style="display:none"来隐藏\r\n```\r\n\r\n##### v-if和v-show的区别\r\n\r\n​\tv-if:先进行判断再渲染到dom中，如果没有满足就不渲染\r\n\r\n​\tv-show:不管是否满足，首先渲染在页面 然后通过判断来是否添加display:none\r\n\r\n##### 使用场景上的区别\r\n\r\n​\tv-if: **保密性较强时**，使用v-if\r\n\r\n​\t\t\t需要**反复渲染dom，对性能消耗较大**\r\n\r\n​\tv-show:**保密性较低**，使用v-show\r\n\r\n​\t\t\t**只是对dom的显示进行设置**，所以性能较高，但安全性不高\r\n\r\n#### v-on\r\n\r\n##### 缩写 @\r\n\r\n##### 作用\r\n\r\n​\t将事件绑定至vm的实例中\r\n\r\n##### 使用方式\r\n\r\n1. 绑定函数\r\n2. 绑定内联语句\r\n\r\n##### 参数\r\n\r\n​\t$event 就是事件本身  该形参的位置完全无关紧要\r\n\r\n##### 事件修饰符\r\n\r\n- 在事件处理程序中调用 `event.preventDefault()` 或 `event.stopPropagation()` 是非常常见的需求。\r\n- Vue 不推荐我们操作DOM    为了解决这个问题，Vue.js 为 `v-on` 提供了**事件修饰符**\r\n- 修饰符是由点开头的指令后缀来表示的\r\n\r\n```html\r\n\x3c!-- 阻止单击事件继续传播 --\x3e\r\n<a v-on:click.stop="doThis"></a>\r\n\r\n\x3c!-- 提交事件不再重载页面 --\x3e\r\n<form v-on:submit.prevent="onSubmit"></form>\r\n\r\n\x3c!-- 修饰符可以串联   即阻止冒泡也阻止默认事件 --\x3e\r\n<a v-on:click.stop.prevent="doThat"></a>\r\n\r\n\x3c!-- 只当在 event.target 是当前元素自身时触发处理函数 --\x3e\r\n\x3c!-- 即事件不是从内部元素触发的 --\x3e\r\n<div v-on:click.self="doThat">...</div>\r\n\r\n使用修饰符时，顺序很重要；相应的代码会以同样的顺序产生。因此，用 v-on:click.prevent.self 会阻止所有的点击，而 v-on:click.self.prevent 只会阻止对元素自身的点击。\r\n```\r\n\r\n\r\n\r\n##### 按键修饰符\r\n\r\n- 在做项目中有时会用到键盘事件，在监听键盘事件时，我们经常需要检查详细的按键。Vue 允许为 `v-on` 在监听键盘事件时添加按键修饰符\r\n\r\n```html\r\n\x3c!-- 只有在 `keyCode` 是 13 时调用 `vm.submit()` --\x3e\r\n<input v-on:keyup.13="submit">\r\n\r\n\x3c!-- -当点击enter 时调用 `vm.submit()` --\x3e\r\n<input v-on:keyup.enter="submit">\r\n\r\n\x3c!--当点击enter或者space时  时调用 `vm.alertMe()`   --\x3e\r\n<input type="text" v-on:keyup.enter.space="alertMe" >\r\n\r\n常用的按键修饰符\r\n.enter =>    enter键\r\n.tab => tab键\r\n.delete (捕获“删除”和“退格”按键) =>  删除键\r\n.esc => 取消键\r\n.space =>  空格键\r\n.up =>  上\r\n.down =>  下\r\n.left =>  左\r\n.right =>  右\r\n\r\n<script>\r\n\tvar vm = new Vue({\r\n        el:"#app",\r\n        methods: {\r\n              submit:function(){},\r\n              alertMe:function(){},\r\n        }\r\n    })\r\n\r\n<\/script>\r\n```\r\n\r\n##### 自定义按键修饰符别名\r\n\r\n- 在Vue中可以通过`config.keyCodes`自定义按键修饰符别名\r\n\r\n```html\r\n<div id="app">\r\n    预先定义了keycode 116（即F5）的别名为f5，因此在文字输入框中按下F5，会触发prompt方法\r\n    <input type="text" v-on:keydown.f5="prompt()">\r\n</div>\r\n\r\n<script>\r\n\t\r\n    Vue.config.keyCodes.f5 = 116;\r\n\r\n    let app = new Vue({\r\n        el: \'#app\',\r\n        methods: {\r\n            prompt: function() {\r\n                alert(\'我是 F5！\');\r\n            }\r\n        }\r\n    });\r\n<\/script>\r\n```\r\n\r\n\r\n\r\n\r\n\r\n#### v-bind\r\n\r\n##### 缩写 :\r\n\r\n##### 修饰符\r\n\r\n- `.prop` - 作为 DOM property 绑定而不是作为 attribute 绑定\r\n- `.camel` - 将 kebab-case attribute 名转换为 camelCase。\r\n- `.sync` 语法糖，会扩展成一个更新父组件绑定值的 `v-on` 侦听器。\r\n\r\n##### 作用\r\n\r\n​\t主要用于JavaScript Object绑定到属性,从而通过数据对元素操作属性\r\n\r\n​\t多个属性可以多个对象的方式来进行绑定，也可以通过数组来绑定\r\n\r\n​\t支持三元表达式\r\n\r\n#### 数组\r\n\r\n```javascript\r\nthis.arrays.push(this.bianliang);\r\n```\r\n\r\n##### 元素移除\r\n\r\n>###### pop 移除数组末尾的元素\r\n>\r\n>###### shift  从头移除\r\n>\r\n\r\n##### 元素增加\r\n\r\n>###### unshift 从头开始加\r\n>\r\n>###### push 向后追加元素\r\n>\r\n\r\n##### splice\r\n\r\nsplice(起始下标(0维数组),删除数量,删除后替换的变量)\r\n\r\n```javascript\r\nthis.arrays.splice(0,1,parseFloat(this.bianliang));\r\n```\r\n\r\n##### sort\r\n\r\n对数组进行排序，sort中如果需要乱序，就需要通过返回随机数实现\r\n\r\n```javascript\r\n//\r\nthis.arrays.sort((a, b) => {\r\n    a = Math.random();\r\n    b = Math.random();\r\n    return a - b;\r\n})\r\n```\r\n\r\n##### reverse\r\n\r\n将数组反转\r\n\r\n##### filter\r\n\r\n\r\n传入的元素符合条件就留下，否则清除，但不会影响原始数组的数据，它会返回解析过后的数组\r\n\r\n###### 语法\r\n\r\nfilter((元素)=>{\r\n    return 筛选条件;\r\n}):\r\n\r\n```javascript\r\nthis.arrays = this.arrays.filter((item) => {\r\n    return item % 2 === 0;\r\n})\r\n```\r\n\r\n#### v-for\r\n\r\n> - **不推荐**同时使用 `v-if` 和 `v-for`\r\n> - 当 `v-if` 与 `v-for` 一起使用时，`v-for` 具有比 `v-if` 更高的优先级。\r\n\r\n##### 作用\r\n\r\n​\t基于源数据多次渲染元素或模板块,被标记的元素就生成哪种元素\r\n\r\n##### 用法\r\n\r\n​\tv-for = \' () in 被遍历对象 \'\r\n\r\n##### 形参区别\r\n\r\n​        遍历数字: (元素,下标)\r\n​        遍历对象: (属性名,属性值,属性下标)\r\n​        遍历数组对象:(数组下标,元素对象)\r\n\r\n##### :key\r\n\r\n为避免有时未加:Key修饰符导致的Vue对Dom算法渲染错误,通过加上:Key修饰符(唯一的标识)来解决\r\n\r\n例如以下例子\r\n\r\n没有添加:key修饰符之前\r\n\r\n\r\n\r\n添加后:\r\n\r\n\r\n\r\n结论：\r\n\r\n​\t\t当用户随机选中一条数据后，单击添加，按照正常逻辑，增加后，单选按钮应该跟随之前选中的信息，而这里并没有按照合理的流程进行操作，这就是因为Vue对Dom的算法操作导致的渲染问题,所以根据需求进行添加:key修饰符，大部分情况下是添加的\r\n\r\n​\t:key使用的注意事项:\r\n\r\n​\t\t\t它的值不能是对象(Object)\r\n\r\n```html\r\n<div id="app">\r\n    <input v-model="newName" id="write">\r\n    <el-button type="info" @click="clickUnshift">增加</el-button>\r\n    \x3c!--这里演示加不加 :key=\'boy.id\'的区别--\x3e\r\n    <p v-for="(boy,index) in boys" >\r\n        <label><input type="radio" name="boyBox">{{boy}}——{{index}}</label>\r\n    </p>\r\n</div>\r\n</body>\r\n</html>\r\n<script>\r\n    const vue = new Vue({\r\n        el: "#app",\r\n        data: {\r\n            num: 9,\r\n            arrays: ["项1", "项2", "项3", "项4", "项5"],\r\n            newName: "翠花",\r\n            boys: [\r\n                {\r\n                    id: 0,\r\n                    name: "小毛",\r\n                    age: 18\r\n                },\r\n                {\r\n                    id: 1,\r\n                    name: "小巴",\r\n                    age: 16\r\n                },\r\n                {\r\n                    id: 2,\r\n                    name: "小李",\r\n                    age: 12\r\n                },\r\n                {\r\n                    id: 3,\r\n                    name: "小王",\r\n                    age: 24\r\n                }\r\n            ]\r\n        }, methods: {\r\n            clickUnshift() {\r\n                //先根据输入的值生成对象\r\n                let newBoy = {id: this.boys.length + 1, name: this.newName, age: Math.floor(Math.random())};\r\n                //将新生成的对象加入数组头部\r\n                this.boys.unshift(newBoy);\r\n            }\r\n        }\r\n    });\r\n<\/script>\r\n```\r\n\r\n#### 自定义指令\r\n\r\n##### 作用\r\n\r\n​\t自己注册一个指令到Vue全局或局部\r\n\r\n##### 用法\r\n\r\n​\t注册全局指令: Vue.directive( id, [definition] )\r\n\r\n​\t注册局部指令: \r\n\r\n在Vue选项中添加\r\n\r\n```html\r\ndirectives: {\r\n    指令名称(元素, 绑定, 新虚拟节点, 旧虚拟节点) {\r\n        \r\n    }\r\n}\r\n```\r\n\r\n##### **directives**和**directive**的区别\r\n\r\n###### 创建方式\r\n\r\n一个是用Vue大类进行创建，一个是通过Vue的选项进行创建的\r\n\r\n全局自定义指令的创建相对局部自定义指令的创建要复杂一点\r\n\r\n![image-20210429102407804](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210429102407804.png)\r\n\r\n###### 绑定的方式\r\n\r\n全局自定义指令绑定是可以将事件或属性进行分开绑定\r\n\r\n​\t关于事件(元素的聚焦、失焦、悬停等)的绑定在inserted中\r\n\r\n​\t关于属性(元素的样式、属性)的绑定在bind中\r\n\r\n局部自定义指令绑定是将update和bind合在一起\r\n\r\n## 4.过滤器\r\n\r\n###     作用\r\n\r\n​        可被用于文本格式化\r\n\r\n### 适用场景\r\n\r\n​        商品展示时的单位转换\r\n\r\n​\t\t日期的格式转换s\r\n\r\n### 语法\r\n\r\n​        通过花括号或者v-bind调用\r\n​        {{参数 | 处理参数的函数}}  返回处理后的结果\r\n​        处理函数的参数:第一个参数是管道符号前的结果\r\n​        多个过滤器链永远以最后一个过滤器输出的结果作为结果\r\n​        过滤器必须return  显示的值是最后一个过滤器return的结果\r\n\r\n### 例子\r\n\r\n```vue\r\n{{today| dateFilter}}\r\n\r\n------\r\nfilters: {\r\n    dateFilter(date) {\r\n        return moment(date).format(\'YYYY年MM月DD日 hh:mm:ss\');\r\n    }\r\n},\r\n```\r\n\r\n\r\n\r\n## 5.计算属性\r\n\r\n##### 解决问题\r\n\r\n> 在插值中使用表达式,可读性差，不利于维护\r\n>\r\n> 通过get() 获取相关属性的变化计算自己，通过set()监视自己的属性的主动变化(因此可以用来影响关联属性)\r\n\r\n##### 作用\r\n\r\n​\t\t通过关联属性对原始属性进行变更\r\n\r\n##### 用法\r\n\r\n​\tVue选项computed:{}\r\n\r\n![image-20210430085821451](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210430085821451.png)\r\n\r\n**计算属性是基于它们的响应式依赖进行缓存的,只在相关响应式依赖发生改变时它们才会重新求值。**\r\n\r\n**计算属性必须返回一个结果（计算过后的结果）**\r\n\r\n计算属性作为函数出现时默认的是：\r\n\r\n​\t这个属性对象的getter\r\n\r\n计算属性对象的setter其实是一个监视器，只要计算属性的本体发生变化,就会触发\r\n\r\n##### 应用场景\r\n\r\n​\t面向不同国家的一个商城，里面的价格只有一份，不同国家的人看到的货币都是经过汇率换算过的结果，这时就可以使用到计算属性进行计算\r\n\r\nPS:单选项中访问其他选项的属性或方法都需要通过this指向vm实例再通过实例得到其他选项中的属性或方法\r\n\r\n```vue\r\n<div id="app">\r\n    第一个输入框 <input v-model="input1"> <br>\r\n    第二个输入框 <input v-model="input2"> <br>\r\n    前两个数字相加的结果 <input v-model="result"> <br>\r\n</div>\r\n</body>\r\n</html>\r\n<script>\r\n    const app = new Vue({\r\n        el:"#app",\r\n        computed:{\r\n            result:{\r\n                //这其实是result属性的回调，回调的时机是获取当前属性值的时候，作用是将返回值作为属性值\r\n                get(){\r\n                    let regNum = /^\\d*$/ //申明数字的正则表达式\r\n                    let num1 = parseFloat(this.input1)\r\n                    let num2 = parseFloat(this.input2)\r\n                    if (regNum.test(num1) && regNum.test(num2)){\r\n                        return num1 + num2\r\n                    }else{\r\n                        return this.input1 + this.input2\r\n                    }\r\n                },\r\n                //这也是一个回调，回调的实际是属性值发生改变的时候，监视当前属性值的变化，同步更新相关属性值\r\n                set(value){\r\n                    let regNum = /^\\d*$/ //申明数字的正则表达式\r\n                    let num1 = parseFloat(this.input1)\r\n                    let num2 = parseFloat(this.input2)\r\n                    //如果是数字类型，就转化后相加\r\n                    if (regNum.test(num1) && regNum.test(num2)){\r\n                        this.input1 = value - this.input2\r\n                        this.input2 = value - this.input1\r\n                        value = num1 + num2\r\n                        //如果不是数字类型就拆分字符串\r\n                    }else{\r\n                        this.input1= value.split(this.input2)[0]\r\n                        this.input2= value.split(this.input1)[1]\r\n                        value = this.input1 + this.input2\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        data:{\r\n            input1:"",\r\n            input2:""\r\n        }\r\n\r\n    })\r\n<\/script>\r\n```\r\n\r\n\r\n\r\n## 6.侦听器\r\n\r\n观察和响应 Vue 实例上的数据变动,计算属性也是如此\r\n\r\n##### 侦听器的参数\r\n\r\n参数1：更改后的值,参数2:更改前的值\r\n\r\n##### 侦听器与计算属性的区别\r\n\r\n侦听器侦听对象的本身，并且在其他的选项中已经存在而计算属性不用\r\n\r\n1. 侦听器，侦听自己，当值发生变化的时候会触发，有两个参数（新值，旧值）\r\n2. 计算属性，侦听关联属性，当关联属性的值发生变化的时候，就得到一个值\r\n3. 计算属性具有缓存，证明方式是多次调用同一个计算属性，观察执行多少次，侦听器是每次变化都会执行\r\n4. 每个计算属性都有两个回调函数，一个是setter，一个是getter\r\n5. get用来返回当前属性的值，不会影响原始属性的值\r\n6. set用于监视属性，一旦属性改变，就会调用set，就会将新的值传入set(value)\r\n\r\n```vue\r\n<div id="app">\r\n    <p>现在的数字是:{{num}}</p>\r\n    <br>\r\n    <button @click="num++">num++</button>\r\n    <p>这个数字是一个{{result}}</p>\r\n</div>\r\n</body>\r\n</html>\r\n<script>\r\n    const vm = new Vue({\r\n        el: "#app",\r\n        data:{\r\n            num: 1,\r\n            result: "奇数"\r\n        },\r\n        watch: {\r\n            //监听某个值的变化\r\n            num(newValue, oldValue) {\r\n                if (newValue % 2 == 0) {\r\n                    return this.result = "偶数"\r\n                }\r\n                return this.result = "奇数"\r\n            }\r\n        }\r\n    })\r\n<\/script>\r\n```\r\n\r\n## 7.Vue组件\r\n\r\n> 模块：可复用的代码块\r\n>\r\n> 组件：可复用的UI\r\n\r\n用template声明一个需要复用的html结构 组件没有挂载点\r\n组件具有单根性,如果传入多个元素，就只渲染第一个元素，为了确保不出错，就直接使用div进行包裹\r\n全局组件 可以在不同的vue实例间进行调用\r\n\r\n```javascript\r\nVue.component("组件名称", {\r\n    template: `单标签`\r\n});\r\n```\r\n\r\n\r\n\r\n### 7-1.组件的定义\r\n\r\n组件的定义有三种方式：\r\n\r\n```javascript\r\n// 注册组件，传入一个扩展过的构造器\r\nVue.component(\'my-component\', Vue.extend({ /* ... */ }))\r\n\r\n// 注册组件，传入一个选项对象 (自动调用 Vue.extend)\r\nVue.component(\'my-component\', { /* ... */ })\r\n\r\n// 获取注册的组件 (始终返回构造器)\r\nvar MyComponent = Vue.component(\'my-component\')\r\n```\r\n\r\n#### 7-1-1.利用构造器创建子子类，再把子类注册到全局组件\r\n\r\n```html\r\n<div id="app">\r\n    \x3c!--使用组件--\x3e\r\n    <zujian></zujian>\r\n</div>\r\n</body>\r\n</html>\r\n<script>\r\n    //第一种方式,利用构造器 使用基础 Vue 构造器，创建一个“子类”。参数是一个包含组件选项的对象。\r\n    const zujian = Vue.extend({\r\n        template: `<div>\r\n           <p>美人不是母胎生</p>\r\n           <p>应是桃花树长成</p>\r\n        </div>`\r\n    })\r\n    //将zujian注册到全局组件\r\n    Vue.component("zujian",zujian)\r\n\r\n    const vm = new Vue({\r\n        el: "#app",\r\n        data: {}\r\n    })\r\n<\/script>\r\n```\r\n\r\n#### 7-1-2.直接注册\r\n\r\n```html\r\n<div id="app">\r\n  \x3c!--使用组件--\x3e\r\n    <zujian></zujian>\r\n</div>\r\n</body>\r\n</html>\r\n<script>\r\n  //直接注册全局组件\r\n  Vue.component(\'zujian\',{\r\n    template:`<div>\r\n    <p>人间四月芳菲尽</p>\r\n    <p>山寺桃花始盛开</p>\r\n    </div>`\r\n  })\r\n    const vm = new Vue({\r\n        el: "#app",\r\n        data: {}\r\n    })\r\n<\/script>\r\n```\r\n\r\n#### 7-1-3.通过选择器来定义\r\n\r\n```html\r\n<div id="app">\r\n    \x3c!--使用组件--\x3e\r\n    <zujian></zujian>\r\n</div>\r\n\x3c!--这里是一个template模板标签,专门定义UI结构的--\x3e\r\n<template id="xiakexing">\r\n  <div>\r\n    <p>十步杀一人,千里不留行</p>\r\n    <p>事了拂衣去,深藏功与名</p>\r\n  </div>\r\n</template>\r\n</body>\r\n</html>\r\n<script>\r\n    //通过引入上面<template>标签来注册组件\r\n    Vue.component(\'zujian\',{\r\n        //这里用的是反引号,如果用单引号,其实也没问题,就是爆红不好看\r\n        template:`#xiakexing`\r\n    })\r\n    const vm = new Vue({\r\n        el: "#app",\r\n        data: {}\r\n    })\r\n<\/script>\r\n```\r\n\r\n\r\n\r\n私有组件的定义方式：\r\n\r\n```javascript\r\nconst vm = new Vue({\r\n    el: "#app",\r\n    data: {\r\n    \r\n    },\r\n    components:{\r\n        组件名:{\r\n            template: "单根标签"\r\n        }\r\n    }\r\n})\r\n```\r\n\r\n\r\n\r\n### 7-2.组件中的结构\r\n\r\n由于组件本身就是一个vue实例，所以vue实例该有的它都有\r\n\r\n```html\r\n<div id="app">\r\n    <zujian></zujian>\r\n</div>\r\n</body>\r\n</html>\r\n<script>\r\n    //注册一个功能全面的组件\r\n    Vue.component(\'zujian\',{\r\n        template:`<div>\r\n        <el-button type="primary" @click="sayName">点击弹出诗人名字</el-button>\r\n        <p>安得世间两全法</p>\r\n        <p>不负如来不负卿</p>\r\n        <p>{{3.3 | priceFilter}}</p>\r\n        </div>`,\r\n        //方法\r\n        methods:{\r\n            sayName(){\r\n                this.$message.success(\'这首诗是大情圣仓央嘉措的作品\')\r\n            }\r\n        },\r\n        //过滤器\r\n        filters:{\r\n            priceFilter(value){\r\n                return "$" + value + "一个蛤蟆皮"\r\n            }\r\n        }\r\n    })\r\n    const vm = new Vue({\r\n        el: "#app",\r\n        data: {}\r\n    })\r\n<\/script>\r\n```\r\n\r\n\r\n\r\n### 7-3.组件中的data只能是一个function\r\n\r\n**一个组件的 `data` 选项必须是一个函数**，因此每个实例可以维护一份被返回对象的独立的拷贝：\r\n\r\n> 每次return都是一个新的对象\r\n\r\n```html\r\n<div id="app">\r\n    \x3c!--多个组件的num互不干扰--\x3e\r\n  <zujian></zujian>\r\n  <zujian></zujian>\r\n</div>\r\n</body>\r\n</html>\r\n<script>\r\n    //注册一个组件\r\n    Vue.component(\'zujian\', {\r\n        template:`<div>\r\n        <p>计数器:<el-button type="info" @click="num --">-</el-button> <input v-model="num"> <el-button type="info" @click="num ++">+</el-button> </p>\r\n        </div>`,\r\n        //组件中的data是函数才能互不影响\r\n        data(){\r\n            return{\r\n                num:1\r\n            }\r\n        },\r\n    })\r\n    const vm = new Vue({\r\n        el: "#app",\r\n        data: {}\r\n    })\r\n<\/script>\r\n```\r\n\r\n> data中的数据不是私有的时候的问题\r\n>\r\n> > 问题描述： 如下，在组件的data选项中return外部的obj，这样组件在调用的过程中，数据就会发生共享，这样也更加容易出错\r\n\r\n```html\r\n<div id="app">\r\n    <ok></ok>\r\n    <br>\r\n    <ok></ok>\r\n</div>\r\n</body>\r\n</html>\r\n<script>\r\n    //申明一个变量\r\n    let obj = {num: 0}\r\n    //申明一个组件\r\n    Vue.component(\'ok\', {\r\n        template: `\r\n          <div>\r\n          <el-tag>{{ num }}</el-tag>\r\n          <br>\r\n          <el-button @click="addSelf">点击</el-button>\r\n          </div>`,\r\n        data() {\r\n            return obj\r\n        },\r\n        methods: {\r\n            addSelf() {\r\n                this.num++\r\n            }\r\n        }\r\n    })\r\n    const vm = new Vue({\r\n        el: "#app",\r\n        data: {}\r\n    })\r\n<\/script>\r\n```\r\n\r\n### 7-4.父组件向子组件传值(子组件使用父组件的数据) \r\n\r\n> 注意：无论是子组件自定义事件还是子组件自定义方法，都不支持大小写的驼峰命名\r\n\r\n单纯传值：子组件中的props中自定义属性 ====>> 调用子组件标签的时候，通过v-bind绑定子组件自定义的属性实现传值 ===>> 子组件中正常使用值\r\n\r\nprops中申明的虽然只能是个字符串，但是这个字符串，可以接收对象/数组/字符串/数字\r\n\r\n```html\r\n<div id="app">\r\n    \x3c!--这里通过强制绑定子组件属性 v-bind:hamapi 对子组件进行传值--\x3e\r\n    <zujian :hamapi="msg"></zujian>\r\n</div>\r\n</body>\r\n</html>\r\n<script>\r\n    //父组件向子组件传值就是在子组件里面申明了子组件标签的一个特殊属性\r\n    Vue.component(\'zujian\',{\r\n        props:[\'hamapi\'],\r\n        template:`<div>\r\n        <p style="color: red">看看能不能调用到父组件的内容</p>\r\n        <p>{{hamapi}}</p>\r\n        </div>`\r\n    })\r\n    const vm = new Vue({\r\n        el: "#app",\r\n        data: {\r\n            msg:"父组件的内容"\r\n        }\r\n    })\r\n<\/script>\r\n```\r\n\r\n将父组件传入的值，赋值给子组件，赋值的时候，就直接在data里面，通过 this.$props里面申明的属性取父组件穿过来的值即可\r\n\r\n```htmL\r\n<div id="app">\r\n    \x3c!--这里通过强制绑定子组件属性 v-bind:hamapi 对子组件进行传值--\x3e\r\n    <zujian :hamapi="num"></zujian>\r\n</div>\r\n</body>\r\n</html>\r\n<script>\r\n    //父组件向子组件传值就是在子组件里面申明了子组件标签的一个特殊属性\r\n    Vue.component(\'zujian\',{\r\n        props:[\'hamapi\'],\r\n        template:`<div>\r\n        <p style="color: red">点击修改父组件传入的值</p>\r\n        <el-button type="primary" @click="subNum ++">+</el-button>\r\n        <p>{{subNum}}</p>\r\n        </div>`,\r\n        data(){\r\n            return{\r\n                //通过this 拿到hamapi的值,并给予msg\r\n                subNum:this.hamapi\r\n            }\r\n        }\r\n    })\r\n    const vm = new Vue({\r\n        el: "#app",\r\n        data: {\r\n            num:3\r\n        }\r\n    })\r\n<\/script>\r\n```\r\n\r\n### 7-5.子组件调用父组件的方法(父组件的方法传递给子组件)\r\n\r\n> 注意：无论是子组件自定义事件还是子组件自定义方法，都不支持大小写的驼峰命名\r\n\r\n```html\r\n<div id="app">\r\n    \x3c!--这里通过强制绑定子组件属性 @子组件自定义方法="父组件的方法" 实现子组件调用父组件的方法--\x3e\r\n    <zujian :hamapi="num" @subevent="parentMethod"></zujian>\r\n</div>\r\n</body>\r\n</html>\r\n<script>\r\n    //父组件向子组件传值就是在子组件里面申明了子组件标签的一个特殊属性\r\n    Vue.component(\'zujian\',{\r\n        props:[\'hamapi\'],\r\n        template:`<div>\r\n        <p style="color: red">点击触发父组件的方法</p>\r\n        <el-button type="primary" @click="sayParent">触发父组件的方法</el-button>\r\n        <p>{{subNum}}</p>\r\n        </div>`,\r\n        data(){\r\n            return{\r\n                //通过this 拿到hamapi的值,并给予msg\r\n                subNum:this.hamapi\r\n            }\r\n        },\r\n        methods:{\r\n            sayParent(){\r\n                //通过 this的$emit调用到子组件标签中定义的subevent事件 \r\n                //$emit\r\n                this.$emit(\'subevent\')\r\n            }\r\n        }\r\n    })\r\n    const vm = new Vue({\r\n        el: "#app",\r\n        data: {\r\n            num:3\r\n        },\r\n        methods:{\r\n            parentMethod(){\r\n                this.$message.success(\'大家都是蛤蟆皮\')\r\n            }\r\n        }\r\n    })\r\n<\/script>\r\n```\r\n\r\n### 7-6.子组件调用父组件方法的时候传参\r\n\r\n--子组件修改父组件的数据---\r\n\r\n```html\r\n<div id="app">\r\n父组件的num的值{{num}}\r\n    <zujian @addanum="change"></zujian>\r\n</div>\r\n</body>\r\n</html>\r\n<script>\r\n    //定义一个组件\r\n    Vue.component(\'zujian\',{\r\n        template:`<div>\r\n        <el-button type="info" @click="hamapi">点击给父组件加个数字</el-button>\r\n        </div>`,\r\n        methods:{\r\n            hamapi(){\r\n                let num = Math.floor(Math.random()*10)\r\n                //通过this.$emit(\'自定义方法\',arg1,arg2,arg3...)中的arg给父组件传参,并修改父组件\r\n                this.$emit("addanum",num)\r\n            }\r\n        }\r\n    })\r\n    const vm = new Vue({\r\n        el: "#app",\r\n        data: {\r\n            num:1\r\n        },\r\n        methods:{\r\n            change(num){\r\n                this.num = this.num + num\r\n            }\r\n        }\r\n    })\r\n<\/script>\r\n```\r\n\r\n### 7-7.兄弟组件之间的通信\r\n\r\n> 关键知识点：\r\n> 监听事件： 事件中心.$on(\'兄弟组件中$emit(中第一个参数)\',兄弟组件中$emit(中第2个参数))\r\n> 销毁事件： 事件中心.$off(被$emit()绑定过的第一个参数)\r\n> 触发事件： 事件中心.$emit(\'控制兄弟组件的方法\',传给兄弟组件的参数)\r\n> 监听事件要写在mounted(){}这个钩子方法里面\r\n\r\n\r\n\r\n![image-20210507235447237](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210507235447237.png)\r\n\r\n\r\n\r\n```html\r\n<div id="app">\r\n    \x3c!--在vm实例也就是事件中心的父组件里面进行注销--\x3e\r\n    <button @click="xiaohui">销毁组件间通讯</button>\r\n    \x3c!--a组件--\x3e\r\n    <azujian></azujian>\r\n    \x3c!--b组件--\x3e\r\n    <bzujian></bzujian>\r\n\r\n</div>\r\n</body>\r\n</html>\r\n<script>\r\n    //注册全局事件中心\r\n    let parent = new Vue();\r\n\r\n    //组件A\r\n    Vue.component("azujian",{\r\n        data(){\r\n            return {\r\n                num:0\r\n            }\r\n        },\r\n        template:`<div>\r\n            A组件的计数器读数:{{num}} <br>\r\n            <button @click="adomchange">操作B组件的计数器读数</button>\r\n        </div>`,\r\n        methods:{\r\n            //写本组件的方法\r\n            adomchange(){\r\n                let nums = [10,3,-6,1,2]\r\n                //使用事件中心监听兄弟对象\r\n                parent.$emit(\'bar\',nums[Math.floor(Math.random()*nums.length)])\r\n            }\r\n        },\r\n        //调用组件a的更新的钩子方法\r\n        mounted(){\r\n            //启用事件中心的监听,当bzujian被绑定了aar的那个事件被触发的时候,就调用这个方法\r\n            parent.$on(\'aar\',(num)=>{\r\n                this.num += num\r\n            })\r\n        }\r\n    })\r\n    //组件B\r\n    Vue.component("bzujian",{\r\n        props:["counter"],\r\n        template:`<div>\r\n            B组件的计数器读数:{{num}} <br>\r\n            <button @click="bdomchange">操作A组件的计数器读数</button>\r\n        </div>`,\r\n        data(){\r\n            return {\r\n                num:0\r\n            }\r\n        },\r\n        methods:{\r\n            //写本组件的方法\r\n            bdomchange(){\r\n                let nums = [-2,-1,1,2]\r\n                //给事件中心绑定一个aar的事件,传入参数\r\n                parent.$emit(\'aar\',nums[Math.floor(Math.random()*nums.length)])\r\n            }\r\n        },\r\n        //调用组件a的更新的钩子方法\r\n        mounted(){\r\n            //启用事件中心对azujian的bar的监听,当azujian里面的 bar触发的时候,就调用这个方法\r\n            parent.$on(\'bar\',(num)=>{\r\n                this.num += num\r\n            })\r\n        }\r\n    })\r\n    const app = new Vue({\r\n        el: "#app",\r\n        data: {},\r\n        methods:{\r\n            xiaohui(){\r\n                //销毁事件中心对不同事件的绑定\r\n                parent.$off(\'aar\')\r\n                parent.$off(\'bar\')\r\n            }\r\n        }\r\n    })\r\n<\/script>\r\n```\r\n\r\n\r\n\r\n### 7-8.采用v-if来实现不同组件的切换\r\n\r\n```html\r\n<div id="app">\r\n    \x3c!--点击不同的按钮,控制isdenglu的取值--\x3e\r\n    <el-button @click="isdenglu = true">登录</el-button>---<el-button @click="isdenglu = false">注册</el-button>\r\n    <denglu v-if="isdenglu"></denglu>\r\n    <zhuce v-else></zhuce>\r\n</div>\r\n</body>\r\n</html>\r\n<script>\r\n    //自定义登录组件\r\n    Vue.component(\'denglu\',{\r\n        template:`<div>\r\n          <el-card>\r\n          登录组件\r\n          </el-card>\r\n        </div>`\r\n    })\r\n    //自定义注册组件\r\n    Vue.component(\'zhuce\',{\r\n        template:`<div>\r\n          <el-card>\r\n          注册组件\r\n          </el-card>\r\n        </div>`\r\n    })\r\n    const vm = new Vue({\r\n        el: "#app",\r\n        data: {\r\n            isdenglu:true\r\n        }\r\n    })\r\n<\/script>\r\n```\r\n\r\n### 7-9.动态组件\r\n\r\n采用component标签结合is属性实现不同组件的切换 \r\n\r\n```html\r\n<div id="app">\r\n  \x3c!--点击修改componentName的值--\x3e\r\n<el-button type="text" @click="componentName = \'jin\'">金</el-button>\r\n<el-button type="text" @click="componentName = \'mu\'">木</el-button>\r\n<el-button type="text" @click="componentName = \'shui\'">水</el-button>\r\n<el-button type="text" @click="componentName = \'huo\'">火</el-button>\r\n<el-button type="text" @click="componentName = \'tu\'">土</el-button>\r\n\x3c!--通过引入component组件,实现不同组件的切换--\x3e\r\n  <component :is="componentName"></component>\r\n</div>\r\n</body>\r\n</html>\r\n<script>\r\n    //金\r\n    Vue.component(\'jin\',{\r\n      template:`<div>\r\n      <el-card>五行:金</el-card>\r\n      </div>`\r\n    })\r\n    //木\r\n    Vue.component(\'mu\',{\r\n      template:`<div>\r\n      <el-card>五行:木</el-card>\r\n      </div>`\r\n    })\r\n    //水\r\n    Vue.component(\'shui\',{\r\n      template:`<div>\r\n      <el-card>五行:水</el-card>\r\n      </div>`\r\n    })\r\n    //火\r\n    Vue.component(\'huo\',{\r\n      template:`<div>\r\n      <el-card>五行:火</el-card>\r\n      </div>`\r\n    })\r\n    //土\r\n    Vue.component(\'tu\',{\r\n      template:`<div>\r\n      <el-card>五行:土</el-card>\r\n      </div>`\r\n    })\r\n    const vm = new Vue({\r\n        el: "#app",\r\n        data: {\r\n          componentName:\'jin\'\r\n        }\r\n    })\r\n<\/script>\r\n```\r\n\r\n### 7-10.插槽\r\n\r\n![image-20210506003026446](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210506003026446.png)\r\n\r\n#### 7-10-1.匿名插槽\r\n\r\n> 1.使用插槽,插槽的标签名和slot的标签名将不会被渲染,kkl里面的内容会被夹在slot标签里面,\r\n>\r\n> 2.如果slot标签里面有值, 调用插槽的时候,如果不传值就会使用slot标签的默认值，如果传了值就覆盖掉原本的值,\r\n>\r\n> 3.VUE官方2.6之后的v-slot不能开槽，且不会覆盖，且会被渲染出来\r\n\r\n![image-20210506003351853](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210506003351853.png)\r\n\r\n```html\r\n<zujian>\r\n  \x3c!--这里的标签其实要不要无所谓--\x3e\r\n\x3c!--  <span>kkl</span>--\x3e\r\n  蛤蟆皮\r\n</zujian>\r\n</div>\r\n</body>\r\n</html>\r\n<script>\r\n  //定义一个组件  组件的模板里面留一个口子,这个口子就是父组件向里面传值的地方\r\n  Vue.component(\'zujian\',{\r\n    template:`<div>\r\n    <p>憨批的名字是<slot>杰杰</slot></p>\r\n    </div>`\r\n  })\r\n    const vm = new Vue({\r\n        el: "#app",\r\n        data: {}\r\n    })\r\n<\/script>\r\n```\r\n\r\n\r\n\r\n#### 7-10-2.具名插槽\r\n\r\n![image-20210911160440750](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210911160440750.png)\r\n\r\n\r\n\r\n\r\n\r\n```html\r\n<div id="app">\r\n<zujian>\r\n    <template v-slot:header>\r\n        <el-card>这是头部</el-card>\r\n    </template>\r\n\r\n    <p>你是风儿</p>\r\n    <p>我是沙</p>\r\n    <p>缠缠绵绵</p>\r\n    <p>到我家</p>\r\n    \r\n    <template v-slot:footer>\r\n        <el-card>这页脚</el-card>\r\n    </template>\r\n\r\n</zujian>\r\n</div>\r\n</body>\r\n</html>\r\n<script>\r\n    //注册一个全局的组件\r\n    Vue.component(\'zujian\',{\r\n        template:`<div>\r\n         <header>\r\n          <slot name="header"></slot>\r\n         </header>\r\n\r\n         <main>\r\n          <slot></slot>\r\n         </main>\r\n\r\n         <footer>\r\n         <slot name="footer"></slot>\r\n         </footer>\r\n        </div>`\r\n    })\r\n    const vm = new Vue({\r\n        el: "#app",\r\n        data: {}\r\n    })\r\n<\/script>\r\n```\r\n\r\n#### 7-10-3.插槽作用域\r\n\r\n> 插槽作用域的作用：方便父组件访问子组件的内容\r\n\r\n##### 简单案例\r\n\r\n```html\r\n<div id="app">\r\n\x3c!--使用子组件的作用域插槽   这里的scope显示的是{ "kkl": "哈麻皮" }这样的一个对象--\x3e\r\n<zizujian>\r\n    \x3c!--2.父组件通过 slot-scope接收子组件传递过来的对象 { "kkl": "哈麻皮" }--\x3e\r\n    <template slot-scope="scope">\r\n        {{scope}}\r\n    </template>\r\n</zizujian>\r\n</div>\r\n</body>\r\n</html>\r\n<script>\r\n    //申明一个子组件\r\n    Vue.component("zizujian",{\r\n        //1.在子组件的slot上使用v-bind的方式向父组件传递数据\r\n        template:`<div> 子组件\r\n         <slot :kkl="hamapi"></slot>\r\n        </div>`,\r\n        data(){\r\n            return{\r\n                hamapi:"哈麻皮"\r\n            }\r\n        }\r\n    })\r\n    const vm = new Vue({\r\n        el: "#app",\r\n        data: {}\r\n    })\r\n<\/script>\r\n```\r\n\r\n![image-20210913004713486](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210913004713486.png)\r\n\r\n##### 较为复杂的案例\r\n\r\n![image-20210506004202548](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210506004202548.png)\r\n\r\n```html\r\n<div id="app">\r\n  <chacao :doglist="doglist">\r\n    \x3c!-- 指定插槽的值的操作范围 这个scopeValue只是个变量名 --\x3e\r\n    <template slot-scope="scopeValue">\r\n      \x3c!-- 指定操作条件 --\x3e\r\n      <strong v-if="scopeValue.kkl.id %2 ==0">{{scopeValue.kkl.name}}</strong>\r\n      <span v-else>{{scopeValue.kkl.name}}</span>\r\n    </template>\r\n  </chacao>\r\n</div>\r\n</body>\r\n</html>\r\n<script>\r\n  //定义一个插槽\r\n  Vue.component(\'chacao\',{\r\n    props:[\'doglist\'],\r\n    template:` <div><ul>\r\n      <li v-for="item in doglist" :key="item.id">\r\n        <slot :kkl="item">\r\n          {{item.name}}\r\n        </slot>\r\n      </li>\r\n    </ul></div> `\r\n  })\r\n  const app = new Vue({\r\n    el: "#app",\r\n    data: {\r\n      doglist:[\r\n        {\r\n          name:\'小泉\',\r\n          id:1\r\n        },\r\n        {\r\n          name:\'小野寺梨纱\',\r\n          id:2\r\n        },\r\n        {\r\n          name:\'长濑茜\',\r\n          id:3\r\n        },\r\n        {\r\n          name:\'麻生希\',\r\n          id:4\r\n        },\r\n        {\r\n          name:\'北原多香子\',\r\n          id:5\r\n        }\r\n      ]\r\n    }\r\n  })\r\n<\/script>\r\n```\r\n\r\n![image-20210506012434509](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210506012434509.png)\r\n\r\n### 7-11.组件的嵌套\r\n\r\n> 一个组件里面可以嵌套另外的组件\r\n\r\n![image-20210507151206985](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210507151206985.png)\r\n\r\n```html\r\n<div id="app">\r\n<zujian></zujian>\r\n</div>\r\n</body>\r\n</html>\r\n<script>\r\n    //创建一个组件  将一个组件套入到另一个组件\r\n    Vue.component(\'zujian\',{\r\n        template:`<div>\r\n        <el-card>我是一只小小小鸟</el-card>\r\n        <wu></wu>\r\n        </div>`\r\n    })\r\n    Vue.component(\'wu\',{\r\n        template:`<div>\r\n        <el-card>我就不同了,我的鸟比较大</el-card>\r\n        </div>`\r\n    })\r\n    const vm = new Vue({\r\n        el: "#app",\r\n        data: {}\r\n    })\r\n<\/script>\r\n```\r\n\r\n\r\n\r\n### 7-12.组件复用案例：购物车\r\n\r\n```html\r\n<div id="app">\r\n    <zujian :price="appPrice" @tijiaors="countRs"></zujian>\r\n    <zujian :price="parPrice" @tijiaors="countRs"></zujian>\r\n    <div>总价:{{totalPrice}}</div>\r\n</div>\r\n</body>\r\n</html>\r\n<script>\r\n    //定义组件\r\n    Vue.component(\'zujian\', {\r\n        template: `\r\n          <div>\r\n          <el-row>\r\n            <el-col style="display: flex">\r\n              花椒 单价:{{ price }}\r\n              数量\r\n              <el-button @click="addNum">+</el-button>\r\n              <el-input style="width: 80px" v-model="num"></el-input>\r\n              <el-button @click="subNum">-</el-button>\r\n              总价: {{ rs }}\r\n            </el-col>\r\n          </el-row>\r\n          </div>`,\r\n        props: [\'price\'],\r\n        data() {\r\n            return {\r\n                num: 0,\r\n            }\r\n        },\r\n        computed:{\r\n            //根据价格和数量计算rs的值\r\n          rs(){\r\n              return parseInt(this.num) * this.price\r\n          }\r\n        },\r\n        watch: {\r\n            //根据rs的变化,提交新值和旧值\r\n            rs(newValue, oldValue) {\r\n                console.log(newValue,oldValue)\r\n                this.$emit(\'tijiaors\', oldValue, newValue)\r\n            }\r\n        },\r\n        methods: {\r\n            addNum() {\r\n                this.num++\r\n            },\r\n            subNum() {\r\n                this.num--\r\n            }\r\n        }\r\n    })\r\n    const vm = new Vue({\r\n        el: "#app",\r\n        data: {\r\n            //app的单价\r\n            appPrice: 3,\r\n            //par的单价\r\n            parPrice: 5,\r\n            totalPrice: 0\r\n        },\r\n        methods: {\r\n            //父组件减去旧值,再加上新值,然后赋值给总价\r\n            countRs(oldValue, newValue) {\r\n               this.totalPrice =  this.totalPrice - oldValue + newValue\r\n            }\r\n        }\r\n    })\r\n<\/script>\r\n```\r\n\r\n\r\n\r\n## 8.VUE路由\r\n\r\n### 8-0.路由原理\r\n\r\n#### 8-0.0.复习锚点知识\r\n\r\n> ```html\r\n> <body>\r\n> \x3c!--1设置锚点链接--\x3e\r\n> <a href="#hamapi">点击直接跳转到哈麻皮</a>\r\n> \x3c!--设置锚点链接与锚点之间的阻拦--\x3e\r\n> <div style="width: 30px;height: 2000px;background: rebeccapurple"></div>\r\n> \x3c!--1定义锚点--\x3e\r\n> <a name="hamapi">这就是锚点</a>\r\n> </body>\r\n> </html>\r\n> ```\r\n\r\n#### 8-0-1.使用vue组件知识自己实现一个路由\r\n\r\n方式一：\r\n\r\n```html\r\n<div id="app">\r\n    \x3c!--提供链接--\x3e\r\n    <a href="#a">组件a</a>\r\n    <a href="#b">组件b</a>\r\n    <a href="#c">组件c</a>\r\n    \x3c!-- 按照链接里面的路径渲染组件 --\x3e\r\n    <comment :is="compName"></comment>\r\n</div>\r\n</body>\r\n</html>\r\n<script>\r\n    //1.定义组件\r\n    Vue.component(\'zujianA\', {\r\n        template: `<div>组件a</div>`\r\n    })\r\n    Vue.component(\'zujianB\', {\r\n        template: `<div>组件B</div>`\r\n    })\r\n    Vue.component(\'zujianC\', {\r\n        template: `<div>组件C</div>`\r\n    })\r\n\r\n    const vm = new Vue({\r\n        el: "#app",\r\n        data: {\r\n            compName: "zujianA"\r\n        },\r\n        mounted() {\r\n            //监听hash的变化       当hash变化后，触发此函数\r\n            window.onhashchange = () => {\r\n                //从location中取出hash\r\n                const hash = location.hash\r\n                //申明路由对象，直接一个对象就是一个键值对\r\n                let routers = {\r\n                    "#a": \'zujianA\',\r\n                    "#b": \'zujianB\',\r\n                    "#c": \'zujianC\'\r\n                }\r\n                //遍历对象的key\r\n                for (let routersKey in routers) {\r\n                    //如果hash的字符串和路由对象的key一致\r\n                    if (hash === routersKey) {\r\n                        //就将这个key对应的value赋值给全局的组件名compName\r\n                        return this.compName =  routers[routersKey]\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    })\r\n<\/script>\r\n```\r\n\r\n方式二：\r\n\r\n```html\r\n<div id="app">\r\n    \x3c!--提供链接--\x3e\r\n    <a href="#a">组件a</a>\r\n    <a href="#b">组件b</a>\r\n    <a href="#c">组件c</a>\r\n    \x3c!-- 按照链接里面的路径渲染组件 --\x3e\r\n    <comment :is="compName"></comment>\r\n</div>\r\n</body>\r\n</html>\r\n<script>\r\n    //1.定义组件\r\n    Vue.component(\'zujianA\', {\r\n        template: `<div>组件a</div>`\r\n    })\r\n    Vue.component(\'zujianB\', {\r\n        template: `<div>组件B</div>`\r\n    })\r\n    Vue.component(\'zujianC\', {\r\n        template: `<div>组件C</div>`\r\n    })\r\n\r\n    const vm = new Vue({\r\n        el: "#app",\r\n        data: {\r\n            compName: "zujianA"\r\n        },\r\n        mounted() {\r\n            //监听hash的变更事件    这里是hash变更后执行的函数\r\n            window.onhashchange = () => {\r\n                //从window.location中取出hash\r\n                const hash = location.hash\r\n                //定义路由数组对象\r\n                let router = [{"#a": \'zujianA\'}, {"#b": \'zujianB\'}, {"#c": \'zujianC\'}]\r\n                //声明组件名字\r\n                let zujianName;\r\n                //遍历路由对象数组\r\n                router.forEach(item => {\r\n                    //从每个路由对象中拿出key\r\n                    for (let itemKey in item) {\r\n                        //判断key和hash是否一致\r\n                        if (itemKey === hash) {\r\n                            //如果key和hash一致，就将key对应的value赋值给组件名\r\n                            zujianName = item[itemKey]\r\n                        }\r\n                    }\r\n                })\r\n                console.log(zujianName)\r\n                //将组件名赋值给vue的全局compName\r\n                this.compName = zujianName\r\n            }          \r\n        }\r\n    })\r\n<\/script>\r\n```\r\n\r\n### 8-1.路由概述 \r\n\r\n官方原文：\r\n\r\n用 Vue.js + Vue Router 创建单页应用，感觉很自然：使用 Vue.js ，我们已经可以通过组合组件来组成应用程序，当你要把 Vue Router 添加进来，我们需要做的是，将组件 (components) 映射到路由 (routes)，然后告诉 Vue Router 在哪里渲染它们。\r\n\r\n> 要解决的问题：更加方便的创建单页面应用\r\n>\r\n> 创建方式： 1引入vue.js >>> 2引入VueRouter>>>>3创建路由组件>>>>4创建VueRouter实例>>>在VueRouter里面\r\n\r\n#### 前后端路由的差别：\r\n\r\n> 后端路由：\r\n>       根据不同的URL请求，返回不同的服务器资源---增加服务器负荷，导致性能问题\r\n> 前端路由：\r\n>       根据不同的用户事件，显示不同的页面内容(显示的是不同的组件，路由的本质就是把不同的组件回显给不同的用户事件)\r\n>       采用前端路由，可以解决ajax技术导致的浏览器不支持前进后退的问题，实现单页面应用程序(SPA)，也就是整个网站只有一个页面，不过这种技术不利于提高SEO，不利于商业推广\r\n\r\n#### 路由的渲染原理：-\r\n\r\n> vue-router.js渲染的原理\r\n> 1、router-link 这个标签会被渲染为a标签\r\n> 2、router-link 的to属性会被渲染为href属性\r\n> 3、router-link 的to属性的值会被渲染为herf属性的值，就是以#开头的hash地址\r\n\r\n### 8-2.定义一个基本的路由\r\n\r\n```html\r\n1、引入vue.js后引入vue-router\r\n\r\n<script src="../js/vue.js"><\/script>\r\n<script src="../js/vue-router.js"><\/script>\r\n\r\n2、定义路由组件\r\n//1、定义路由组件\r\nconst biaoyu1 = {\r\n    template: `<h1>天大地大,明教最大</h1>`\r\n}\r\nconst baioyu2 = {\r\n    template: ` <h1>红莲圣火,燃我残躯</h1>  `\r\n}\r\n\r\n3、配置路由规则，创建路由实例\r\n//2、配置路由规则创建路由实例\r\nlet router = new VueRouter({\r\n    //配置规则数组  注意 这个单词容易写错\r\n    routes: [\r\n        {path: \'/baioyu1\', component: biaoyu1},\r\n        {path: \'/baioyu2\', component: baioyu2}\r\n    ]\r\n});\r\n\r\n4、把路由器挂载到根实例中\r\nconst app = new Vue({\r\n    el: "#app",\r\n    data: {},\r\n    //3挂载路由  如果属性名与属性值一值,可以只写一个\r\n    router\r\n})\r\n\r\n5、添加路由链接\r\n\x3c!-- 配置好路由组件,并且把路由规则搞出来后,并挂载上去之后,就可以在这里添加路由链接了--\x3e\r\n<router-link to="/baioyu1">点击我看星星</router-link>\r\n<br>\r\n<router-link to="/baioyu2">点击我看月亮</router-link>\r\n<br>\r\n6、设置路由占位符----就是路由内容要渲染的位置\r\n<div style="border: 1px solid red;width: 300px;height: 100px" >\r\n\x3c!-- 这是使用路由的最后一步 就是让路由的内容显示到这里--\x3e\r\n<router-view></router-view>\r\n</div>\r\n```\r\n\r\n\r\n\r\n### 8-3.路由重定向\r\n\r\n> 应用场景：比如说我们的很多项目有个根路径“/”,但是我们希望用户一进来根路径，就可以看到“/home”里面的东西展示到页面，而不是看到一个白板，这个时候就要用到路由重定向\r\n\r\n官方说法：就是访问一个路径的时候，其实是强制跳转到另一个路径的，这样就可以展示特定组件的内容了。\r\n\r\n![image-20210506121027434](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210506121027434.png)\r\n\r\n![image-20210506121129967](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210506121129967.png)\r\n\r\n### 8-4.编程式导航\r\n\r\n> 导航定义：\r\n>    就是从一个路由组件跳转到另一个路由组件的行为\r\n> 导航的方式：\r\n>    申明式导航：比如a标签跳转，`<router-link>`方式跳转，都是由明确的申明的\r\n>    编程式导航：比如调用 location.href 的方式进行跳转，这都是通过调用js的API实现导航的\r\n>\r\n> VueRouter中的编程式导航的API\r\n>     this.$router.push(\'跳转路径\')  -------------跳转到别的地方\r\n>     this.$router.go(\'数字\')            ------跳转到浏览器里面有记录的地方   负数就是往回调，正数就是往后跳，但跳转的地方必须在浏览器里面有记录\r\n\r\n```html\r\n<div id="app">\r\n    \x3c!--此处的to必须加上 v-bind ,否则无法将后面的对象读取出来--\x3e\r\n <router-link :to="{name:\'a\'}">到a</router-link>\r\n <router-link :to="{name:\'b\'}">到b</router-link>\r\n  <router-view></router-view>\r\n</div>\r\n</body>\r\n</html>\r\n<script>\r\n    const a = {\r\n      template:`<div>\r\n      <el-button type="danger" @click="gob">点击到b</el-button>\r\n      </div>`,\r\n      methods:{\r\n        gob(){\r\n          this.$router.push("/b")\r\n        }\r\n      }\r\n    }\r\n    const b = {\r\n      template:`<div>\r\n      <el-button type="danger" @click="goa">点击到a</el-button>\r\n      </div>`,\r\n      methods:{\r\n        goa(){\r\n          this.$router.push("/a")\r\n        }\r\n      }\r\n    }\r\n   const router =  new VueRouter({\r\n     routes:[\r\n       {path:"/a",name:"a",component:a},\r\n       {path:"/b",name:"b",component:b},\r\n     ]\r\n   })\r\n    const vm = new Vue({\r\n        el: "#app",\r\n        data: {},\r\n      router\r\n    })\r\n<\/script>\r\n```\r\n\r\n### 8-5.路由传参\r\n\r\n> 应用场景：\r\n> 当我们需要在父组件向路由组件跳转的时候，就需要传递参数过去，比如说：我们点击一个按钮，要带信息查询一些数据显示到展示区的时候，父组件的参数就要一起传给子组件，在子组件处于created阶段的时候，就带着信息去数据库查询数据，查询到数据后，展示出来\r\n\r\n#### 8-5-1.传统的?+键值对传参\r\n\r\n> 传值：<router-link to="/path?键=值"          取值：  $route.query.键    这个耦合比较高，少用\r\n>\r\n> 1.用传统的方式传参,并不影响路由的跳转\r\n> 2.通过uri传入的键值对,存放在当前路由的query对象里面,通过this.$route.query可以取到所有键值对的集合\r\n\r\n```html\r\n<div id="app">\r\n    <router-link to="/hamapi?name=2233">点击看蛤蟆皮</router-link>\r\n    <router-view></router-view>\r\n</div>\r\n</body>\r\n</html>\r\n<script>\r\n    //创建路由组件\r\n    const hamapi = {\r\n        template: `<div>\r\n        哈哈\r\n        </div>`,\r\n        //路由组件的本质就是组件,组件的本质就是vue实例,所以路由组件也有路由组件的生命周期\r\n        created() {\r\n            console.log("路由组件")\r\n            console.log(this)\r\n            //可以发现这个this.$route里面有一堆东西\r\n            console.log(this.$route.query)\r\n        }\r\n    }\r\n    //注册路由\r\n    const router = new VueRouter({\r\n        //指定路由规则\r\n        routes: [\r\n            {path: "/hamapi", component: hamapi}\r\n        ]\r\n    })\r\n    const vm = new Vue({\r\n        el: "#app",\r\n        data: {},\r\n        mounted() {\r\n            console.log("实例")\r\n            console.log(this)\r\n        },\r\n        router\r\n    })\r\n```\r\n\r\n\r\n\r\n####  8-5-2.params占位符传参\r\n\r\n> 传值  <router-link to="/path/:占位"             取值： $route.params.占位    这个耦合比较高，少用\r\n>\r\n> 1.要想通过restful风格带参访问子路由，则必须在路由规则的path里面申明占位符，用:占位\r\n\r\n![image-20210506122403389](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210506122403389.png)\r\n\r\n#### 8-5-3.{props:true}传参\r\n\r\n> 布尔模式  通过设置props:true 解耦，可以像正常组件一样传参\r\n\r\n![image-20210506122523250](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210506122523250.png)\r\n\r\n#### 8-5-4.{props:{对象}}传参\r\n\r\n> 对象模式，可以像正常组件一样传参\r\n\r\n![image-20210506122609238](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210506122609238.png)\r\n\r\n#### 8-5-5.函数模式传参\r\n\r\n> 函数模式，传动态对象\r\n\r\n![image-20210506122644831](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210506122644831.png)\r\n\r\n\r\n\r\n#### 8-5-6.总结\r\n\r\n> 以上所有的传参方式，首推props的函数模式，因为它既能从restful风格的URI里面取值，又能从对象里面取值，同时还能解耦.\r\n>\r\n> 5-1和5-2有耦合度高的问题，\r\n>\r\n> 5-3只能读取restful风格里面的传参\r\n>\r\n> 5-4不能读取restful风格的URI里面的传参\r\n>\r\n> 5-5是完美的\r\n\r\n### 8-6.嵌套路由\r\n\r\n> 应用场景：\r\n> 当我们进入一个页面的时候，只需要用户看到几个大的模块化的分类，而不应该让用户看到所有的分类细节，例如我们做的思维导图笔记，点击一个，可以弹出下面的一系列的东西，不点击就不展示。\r\n\r\n![image-20210508002918455](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210508002918455.png)\r\n\r\n实现方式：\r\n\r\n![image-20210508003023155](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210508003023155.png)\r\n\r\n具体代码\r\n\r\n```html\r\n<div id="app">\r\n    \x3c!--父路由--\x3e\r\n    <router-link to="/a">弓箭手</router-link>\r\n    <router-link to="/b">法师团</router-link>\r\n    <router-view></router-view>\r\n</div>\r\n</body>\r\n</html>\r\n<script>\r\n    //定义父级路由模块\r\n    const routerA = {\r\n        template: ` <div>\r\n           <div>弓箭营</div>\r\n           <router-link to="/a/a1">火系弓箭手</router-link>\r\n           <router-link to="/a/a2">冰系弓箭手</router-link>\r\n           <router-link to="/a/a3">强弩手</router-link>\r\n           <div style="border: 1px solid red;width: 300px;height: 100px">\r\n             <router-view></router-view>\r\n           </div>\r\n          </div> `\r\n    }\r\n    const routerB = {\r\n        template: `<div>\r\n          <div>法师营</div>\r\n           <router-link to="/b/b1">五行法师</router-link>\r\n           <router-link to="/b/b2">亡灵法师</router-link>\r\n           <router-link to="/b/b3">剧毒法师</router-link>\r\n           <div style="border: 1px solid red;width: 300px;height: 100px">\r\n             <router-view></router-view>\r\n           </div>\r\n         </div> `\r\n    }\r\n    //定义次级路由模块\r\n    const routerAa1 = {\r\n        template: `<div> <p>火系弓箭手,英勇无敌</p> </div>`\r\n    }\r\n    const routerAa2 = {\r\n        template: `<div> <p>冰系弓箭手,神勇无双</p> </div>`\r\n    }\r\n    const routerAa3 = {\r\n        template: `<div> <p>强弩手,火力强劲</p> </div>`\r\n    }\r\n    const routerBb1 = {\r\n        template: `<div> <p>五行法师,能力诡异</p> </div>`\r\n    }\r\n    const routerBb2 = {\r\n        template: `<div> <p>亡灵法师,与骷髅为伍</p> </div>`\r\n    }\r\n    const routerBb3 = {\r\n        template: `<div> <p>剧毒法师,毒术无双</p> </div>`\r\n    }\r\n\r\n    //注册路由组件\r\n    let router = new VueRouter({\r\n        routes: [\r\n            {\r\n                path: \'/a\', component: routerA, children: [\r\n                    {path: \'/a/a1\', component: routerAa1},\r\n                    {path: \'/a/a2\', component: routerAa2},\r\n                    {path: \'/a/a3\', component: routerAa3},\r\n                ]\r\n            },\r\n            {\r\n                //在配置路由路线规则的时候,配置children属性,在里面写一堆子组件即可\r\n                path: \'/b\', component: routerB, children: [\r\n                    {path: \'/b/b1\', component: routerBb1},\r\n                    {path: \'/b/b2\', component: routerBb2},\r\n                    {path: \'/b/b3\', component: routerBb3},\r\n                ]\r\n            }\r\n        ]\r\n    });\r\n\r\n\r\n    const app = new Vue({\r\n        el: "#app",\r\n        data: {},\r\n        //将路由挂载到实例\r\n        router\r\n    })\r\n<\/script>\r\n\r\n```\r\n\r\n### 8-7.命名路由\r\n\r\n> 要解决的问题：\r\n>\r\n> 不记得或者不想写路由的路径，这个时候就可以给`<router-link >`的to属性传入一个对象，在传入对象的同时，也可以进行传参，传参要解耦，得在路由规则里面配置`props:true`, 如果传入query对象，`this.$route.query`仍可读取query里面的东西\r\n\r\n```html\r\n<div id="app">\r\n  \x3c!--注意,组件名必须是字符串--\x3e\r\n<router-link :to="{name:\'denglu\',query:{\'hamapi\':\'哈麻皮\'}}">登录</router-link>\r\n<router-link :to="{name:\'zhuce\'}">注册</router-link>\r\n  \x3c!--出口--\x3e\r\n  <router-view></router-view>\r\n</div>\r\n</body>\r\n</html>\r\n<script>\r\n  //定义路由组件\r\n  const denglu = {\r\n    template:`<div>登录</div>`\r\n  }\r\n  const zhuce = {\r\n    template:`<div>注册</div>`\r\n  }\r\n  //实例化路由\r\n  const  router = new VueRouter({\r\n    //定义路由规则\r\n    routes:[\r\n            /*注意,被命名的路由必须是字符串*/\r\n      {path:"/denglu",component:denglu,name:\'denglu\'},\r\n      {path:"/zhuce",component: zhuce,name:\'zhuce\'}\r\n    ]\r\n  })\r\n    const vm = new Vue({\r\n        el: "#app",\r\n        data: {},\r\n        router\r\n    })\r\n<\/script>\r\n```\r\n\r\n\r\n\r\n### 8-8.命名视图\r\n\r\n> 要解决的问题：\r\n>\r\n> 使用同一个路径，跳转不同的视图，比如路径为"/"的时候，要展示侧边栏，头部，尾部，主视图\r\n\r\n页面结构\r\n\r\n```html\r\n<div id="app">\r\n\x3c!--入口--\x3e\r\n    <router-link to="/"></router-link>\r\n    \x3c!--出口--\x3e\r\n    <router-view name="tou"></router-view>\r\n<div class="zhuye">\r\n    <router-view name="leftsider"></router-view>\r\n    <router-view name="rightsider"></router-view>\r\n</div>\r\n    <router-view name="wei"></router-view>\r\n</div>\r\n</body>\r\n</html>\r\n<script>\r\n    //定义路由\r\n    const tou = {\r\n        template:`<div class="tou">头部</div>`\r\n    }\r\n    const wei = {\r\n        template: `<div class="wei">尾部</div>`\r\n    }\r\n    const leftsider = {\r\n        template: `<div class="leftsider">左侧</div>`\r\n    }\r\n    const rightsider = {\r\n        template: `<div class="rightsider">主视图</div>`\r\n    }\r\n    //实例化路由,定义路由规则\r\n    const router = new VueRouter({\r\n        //定义规则\r\n        routes:[\r\n            {path:\'/\',components:{\r\n                default:rightsider,\r\n                    tou,\r\n                    wei,\r\n                    leftsider,\r\n                    rightsider\r\n                }}\r\n        ]\r\n    })\r\n    const vm = new Vue({\r\n        el: "#app",\r\n        data: {},\r\n        router\r\n    })\r\n<\/script>\r\n```\r\n\r\n样式\r\n\r\n```less\r\n/*样式*/\r\n.tou{\r\n  width: 100%;\r\n   background: darkmagenta;\r\n  display: flex;\r\n  align-self: center;\r\n}\r\n.zhuye{\r\n  width: 100%;\r\n  display: flex;\r\n  .leftsider{\r\n    flex: 1;\r\n    background: #5daf34;\r\n    height: 300px;\r\n  }\r\n  .rightsider{\r\n    flex: 9;\r\n    background: #bcbec2;\r\n    height: 300px;\r\n  }\r\n}\r\n.wei{\r\n  width: 100%;\r\n  background: #f750c6;\r\n}\r\n```\r\n\r\n### 8-9.路由中监视当前路由的路径\r\n\r\n```html\r\n<div id="app">\r\n\x3c!--7设置路由链接--\x3e\r\n    <router-link active-class="hamapi" tag="button"  to="/login">登录</router-link>\r\n    <hr>\r\n    \x3c!--8设置路由出口--\x3e\r\n    <router-view></router-view>\r\n</div>\r\n</body>\r\n</html>\r\n<script>\r\n    //3定义一个路由组件\r\n    const luyou1 = {\r\n        template:`<div>这是个路由组件</div>`\r\n    }\r\n    //4实例化路由\r\n    let router = new  VueRouter({\r\n        //5.定义路由规则\r\n        routes:[\r\n            {path:"/login",component:luyou1}\r\n        ]\r\n    })\r\n\r\n    const vm = new Vue({\r\n        el: "#app",\r\n        data: {},\r\n        //6.挂载路由\r\n        router,\r\n        mounted(){\r\n            //这里是刷新的时候就可以监视得到\r\n            console.log("mounted中监视到的当前路由的路径:  ",this.$route.path)\r\n        },\r\n        watch:{\r\n            //监视当前路由的路径===这种监视,只能是在切换的瞬间才能监视得到\r\n           \'$route.path\': (newValue)=>{\r\n               console.log("watch侦听器中监视到的当前路由的路径: ",newValue)\r\n           }\r\n        }\r\n    })\r\n<\/script>\r\n```\r\n\r\n\r\n\r\n## 9.前端工程化\r\n\r\n### 各种方式搭建脚手架\r\n\r\n\r\n\r\n#### 1使用命令行创建项目\r\n\r\n> 官网资料：https://cli.vuejs.org/zh/guide/prototyping.html\r\n\r\n```shell\r\n#安装vue-cli\r\nnpm install -g @vue/cli\r\n#安装完毕可以通过 vue --version查看版本号，不要纠结具体的版本号，因为这里的版本经常更新，每次都不一样\r\n```\r\n\r\n![image-20210513103209616](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210513103209616.png)\r\n\r\n> 使用：\r\n> 1、在一个空的文件夹，按住shift+鼠标右键，选择在此处打开powershell\r\n\r\n![image-20210513103652342](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210513103652342.png)\r\n\r\n> 2、输入    vue create  工程名(只能小写)\r\n\r\n![image-20210513103902067](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210513103902067.png)\r\n\r\n> 3、选择  后来的版本要求选择vue版本，就选2.x   回车，这里这个use history选n\r\n\r\n![image-20210513103940295](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210513103940295.png)\r\n\r\n> 4、创建成功\r\n> 可以按最下方提示的命令进入目录和启动项目\r\n\r\n![image-20210513104053079](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210513104053079.png)\r\n\r\n> 5、观察目录\r\n> 目录比vue-cli  2.xx这个版本更加精简\r\n\r\n![image-20210513104313944](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210513104313944.png)\r\n\r\n> 6、npm run serve  # 启动项目 这个是vue-cli 创建完毕后自己会提醒你的\r\n>\r\n> 7、但是作为后台开发人员一般使用下面的方式\r\n\r\n![image-20210513104201661](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210513104201661.png)\r\n\r\n![image-20210513104612115](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210513104612115.png)\r\n\r\n> 8、启动项目后，可以看到以下页面\r\n\r\n![image-20210513104753378](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210513104753378.png)\r\n\r\n#### 2使用GUI搭建脚手架\r\n\r\n> 不推荐这种方式，因为这种方式搭建的脚手架，容易出问题\r\n\r\n> 1在命令行输入指令  vue  ui\r\n\r\n![image-20210513105015914](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210513105015914.png)\r\n\r\n> 2然后一路跟着提示往下操作即可，注意，使用webstrom开发的话，就不要选择eslint了\r\n\r\n![image-20210513105101375](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210513105101375.png)\r\n\r\n#### 3使用IDEA webstorm等jetbrains系列软件搭建脚手架\r\n\r\n![image-20210513105353026](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210513105353026.png)\r\n\r\n![image-20210513105410370](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210513105410370.png)\r\n\r\n#### 4使用HBuilder创建搭建脚手架\r\n\r\n> 直接使用HBuilderX，创建一个工程，然后使用IDEA或者webstorm打开\r\n\r\n#### 5使用POWERSHELL的时候的坑\r\n\r\n> 如果出现以下画面，就表明powershell没有操作权限\r\n\r\n![image-20210513105616040](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210513105616040.png)\r\n\r\n> 处理方法：\r\n>\r\n> 1.随便找个文件夹，点击文件，以管理员身份打开powershell\r\n\r\n![image-20210513105647789](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210513105647789.png)\r\n\r\n> 2.输入指令： set-ExecutionPolicy RemoteSigned\r\n\r\n![image-20210513105747953](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210513105747953.png)\r\n\r\n### vue脚手架目录说明\r\n\r\n![image-20210513150835320](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210513150835320.png)\r\n\r\n### 9-0.项目基础配置\r\n\r\n官方原文\r\n\r\nhttps://cli.vuejs.org/zh/config/#vue-config-js\r\n\r\n> `vue.config.js` 是一个可选的配置文件，如果项目的 (和 `package.json` 同级的) 根目录中存在这个文件，那么它会被 `@vue/cli-service` 自动加载。你也可以使用 `package.json` 中的 `vue` 字段，但是注意这种写法需要你严格遵照 JSON 的格式来写。\r\n\r\n范例代码---vue.config.js\r\n\r\n```javascript\r\n//导出模块\r\nmodule.exports={\r\n    //开发时的配置\r\n    devServer:{\r\n        //指定端口号\r\n        port:9000,\r\n        //自动打开默认浏览器\r\n        open:true\r\n    }\r\n}\r\n```\r\n\r\n\r\n\r\n### 9-1.导入less\r\n\r\n> 一般的方式不能导入less，因为版本不匹配，以下版本的less可以正常匹配 @vue/cli 4.5.11 \r\n>\r\n> 命令行：\r\n\r\n```shell\r\nnpm install less-loader@5.0.0 -s\r\nnpm install less@3.9.0 -s\r\n```\r\n\r\n> main.js \r\n\r\n```javascript\r\nimport less from \'less\'\r\nVue.use(less);\r\n```\r\n\r\n> vue单文件组件\r\n\r\n```vue\r\n<style lang="less" scoped>\r\n/* lang是所用的语言   scoped表示只在当前组件生效 */\r\n</style>\r\n```\r\n\r\n\r\n\r\n### 9-2.导入element\r\n\r\n> 控制台\r\n\r\n```shell\r\nnpm i element-ui -S\r\n```\r\n\r\n> main.js\r\n\r\n```javascript\r\nimport ElementUI from \'element-ui\';\r\nimport \'element-ui/lib/theme-chalk/index.css\';\r\nVue.use(ElementUI);\r\n```\r\n\r\n\r\n\r\n### 9-3.两种不同的组件配置\r\n\r\n#### 9-3-1.显示路由组件\r\n\r\n> 编写组件\r\n\r\n![image-20210513165615517](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210513165615517.png)\r\n\r\n> 将路由组件组装到路由器\r\n\r\n![image-20210513171036712](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210513171036712.png)\r\n\r\n#### 9-3-2.显示普通组件\r\n\r\n> 编写自定义组件\r\n\r\n![image-20210513165206156](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210513165206156.png)\r\n\r\n> 将自定义组件组装到视图\r\n\r\n![image-20210513165322013](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210513165322013.png)\r\n\r\n### 9-4.较为全面的路由配置\r\n\r\n> 下面是  /router/index.js   或者  router.js 里面的内容  这两种命名方式比较符合见名知意的规则\r\n\r\n```javascript\r\nimport Vue from \'vue\'\r\nimport VueRouter from \'vue-router\'\r\nimport Login from "../views/Login";\r\n//引入home页面\r\nimport Home from "../views/Home";\r\n//引入welcome组件\r\nimport Welcome from "../components/Welcome";\r\n/*\r\n省略一大堆的其他组件的引入\r\n*/\r\n\r\nVue.use(VueRouter)\r\n\r\n//配置路由规则\r\nconst routes = [\r\n    {path: "/", redirect: "/login"},\r\n    {path: "/login", component: Login},\r\n    //将home添加到路由规则---下面就是个纯粹的单页面应用\r\n    {\r\n        path: "/home", component: Home,\r\n        redirect: "/welcome",\r\n        children: [\r\n            {path:"/welcome",component:Welcome},\r\n            //配置用户管理的路由\r\n            {path: "/users",component: Users},\r\n            /*\r\n            省略一大堆其他子路由的配置\r\n            */\r\n        ]\r\n    }\r\n]\r\n//命名实例化后的路由\r\nconst router = new VueRouter({\r\n    routes\r\n})\r\n//配置全局前置守卫 对请求进行拦截\r\nrouter.beforeEach((to, from, next) => {\r\n    /*\r\n    * to: Route: 即将要进入的目标 路由对象\r\n      from: Route: 当前导航正要离开的路由\r\n      next: Function: 一定要调用该方法来 resolve 这个钩子。执行效果依赖 next 方法的调用参数。\r\n    * */\r\n    //如果访问的是登陆页面,就直接放行\r\n    if (to.path === "/login") {\r\n        return next()\r\n    }\r\n    //如果要访问其他页面,就先获取token,如果token不为空,就放行,否则就强制跳转到登录页面\r\n    const token = window.sessionStorage.getItem(\'token\');\r\n    //判断token是否为空\r\n    if (!token) {\r\n        // Message.error("你没有登陆,无权访问本页面,已为你跳转到登陆页面")\r\n        return next("login")\r\n    } else {\r\n        //dochain\r\n        return next()\r\n    }\r\n})\r\n//导出路由\r\nexport default router\r\n```\r\n\r\n> main.js的路由相关处理\r\n\r\n```javascript\r\n//从router文件引入路由\r\nimport router from \'./router\'\r\n//使用路由\r\nnew Vue({\r\n    router,\r\n    render: h => h(App)\r\n}).$mount(\'#app\')\r\n```\r\n\r\n9-4.导入组件\r\n\r\n```vue\r\n<template>\r\n\x3c!-- 为了确保单根性,这里直接在template标签里面放置DIV防止出错  --\x3e\r\n  <div>\r\n    \x3c!-- 组件在这里使用  --\x3e\r\n    <jiacheng></jiacheng>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n//一个组件要想被使用,得先import进来\r\nimport Jiacheng from "./components/Jiacheng";\r\n\r\nexport default {\r\n  /*这里面都是写vue的各种选项的,什么data,components,methods...之类的*/\r\n  name: \'App\',\r\n  //components 里面放上面import 进来的组件\r\n  components: {\r\n    Jiacheng\r\n  }\r\n}\r\n<\/script>\r\n\r\n<style lang="less" scoped>\r\n/*这里面都是写样式的 */\r\n</style>\r\n```\r\n\r\n',contentRendered:'<h1 id="vue-js简介" tabindex="-1"><a class="header-anchor" href="#vue-js简介" aria-hidden="true">#</a> Vue.js简介</h1>\n<ul>\n<li>一套用于构建用户界面的<strong>渐进式框架</strong></li>\n<li>Vue 被设计为可以自底向上逐层应用</li>\n<li>Vue 的核心库只关注视图层</li>\n</ul>\n<p><strong>按需导入</strong></p>\n<p>Vue是三大前端流行框架之一</p>\n<p>声明式编程，符合MVC的设计</p>\n<h3 id="vue技术栈" tabindex="-1"><a class="header-anchor" href="#vue技术栈" aria-hidden="true">#</a> <code>vue技术栈</code></h3>\n<table>\n<thead>\n<tr>\n<th><strong><code>web技术栈</code></strong></th>\n<th><strong><code>移动端技术栈</code></strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>VUE基础(语法/组件)</td>\n<td>VUE基础(语法/组件)</td>\n</tr>\n<tr>\n<td>VUE_Router----路由</td>\n<td>VUE_Router----路由</td>\n</tr>\n<tr>\n<td>axios-----交互</td>\n<td>axios-----交互</td>\n</tr>\n<tr>\n<td>webpakage----打包工具</td>\n<td>webpakage----打包工具</td>\n</tr>\n<tr>\n<td>Element UI------UI框架(iview  UI | HeyUI | Ant Design of Vue |  AmazeUI | MuseUI )</td>\n<td>EEUI----UI框架(Vant https://vant-contrib.gitee.io/vant/#/zh-CN/ )</td>\n</tr>\n<tr>\n<td>VUEX------数据共享</td>\n<td>VUEX------数据共享</td>\n</tr>\n</tbody>\n</table>\n<h3 id="解决什么问题" tabindex="-1"><a class="header-anchor" href="#解决什么问题" aria-hidden="true">#</a> <code>解决什么问题</code></h3>\n<blockquote>\n<blockquote>\n<p>前端渲染的方式：</p>\n<p>1.原生字符串拼接: 容易拼接出错，且不同的人代码风格不同，项目换人后，较难维护</p>\n<p>2.模版引擎: 解决了代码可读性问题，但是仍然容易出错，且没有专门的事件机制</p>\n<p>3.vue模版语法</p>\n</blockquote>\n<p>vue模版语法有效的解决了上述问题</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210827104742406" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210827104742406.png" data="aurora"></p>\n<p>vue工作原理</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210827171240521" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210827171240521.png" data="aurora"></p>\n<h2 id="_1-安装" tabindex="-1"><a class="header-anchor" href="#_1-安装" aria-hidden="true">#</a> 1.安装</h2>\n<p>离线：使用页面的script标签进行导入下载好的vue.js文档(https://cn.vuejs.org/js/vue.js)</p>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>文件路径/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>在线:</p>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="vue初体验" tabindex="-1"><a class="header-anchor" href="#vue初体验" aria-hidden="true">#</a> <code>VUE初体验</code></h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210827101732307" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210827101732307.png" data="aurora"></p>\n<h2 id="_2-vue实例" tabindex="-1"><a class="header-anchor" href="#_2-vue实例" aria-hidden="true">#</a> 2.Vue实例</h2>\n<h3 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念" aria-hidden="true">#</a> 基本概念</h3>\n<blockquote>\n<p>MVVM:</p>\n<p>m--model: 模型</p>\n<p>v--view： 视图</p>\n<p>vm--viewModel: 模型视图，介于模型和视图之间的东西，起到桥梁作用，使得模型和视图能够分开，也能保持通讯</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210831004055590" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210831004055590.png" data="aurora"></p>\n<h3 id="创建" tabindex="-1"><a class="header-anchor" href="#创建" aria-hidden="true">#</a> 创建</h3>\n<p>每个 Vue 应用都是通过用 <code>Vue</code> 函数创建一个新的 <strong>Vue 实例</strong>开始的：</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span>\t vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token comment">// 选项</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="数据与方法" tabindex="-1"><a class="header-anchor" href="#数据与方法" aria-hidden="true">#</a> 数据与方法</h3>\n<div class="language-vue ext-vue line-numbers-mode"><pre v-pre class="language-vue"><code>data的两种方式:\n//数据对象\ndata:{\n    \n}\n\n//数据函数方法\ndata() {\n    return {}\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p><strong>对象必须是纯粹的对象 (含有零个或多个的 key/value 对)</strong></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// 我们的数据对象</span>\n<span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span>\n\n<span class="token comment">// 该对象被加入到一个 Vue 实例中</span>\n<span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">data</span><span class="token operator">:</span> data\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 获得这个实例上的 property</span>\n<span class="token comment">// 返回源数据中对应的字段</span>\nvm<span class="token punctuation">.</span>a <span class="token operator">==</span> data<span class="token punctuation">.</span>a <span class="token comment">// => true</span>\n\n<span class="token comment">// 设置 property 也会影响到原始数据</span>\nvm<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">2</span>\ndata<span class="token punctuation">.</span>a <span class="token comment">// => 2</span>\n\n<span class="token comment">// ……反之亦然</span>\ndata<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">3</span>\nvm<span class="token punctuation">.</span>a <span class="token comment">// => 3</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>如果你知道你后面需要一个 property，但是一开始它为空或不存在，那么你仅需要设置一些初始值</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">newTodoText</span><span class="token operator">:</span> <span class="token string">\'\'</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">visitCount</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">hideCompletedTodos</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">todos</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">error</span><span class="token operator">:</span> <span class="token keyword">null</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>如果要阻止修改现有的property的行为，那么可以使用Object.freeze()</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span>\n<span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">\'#example\'</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">data</span><span class="token operator">:</span> data\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\nvm<span class="token punctuation">.</span>$data <span class="token operator">===</span> data <span class="token comment">// => true</span>\nvm<span class="token punctuation">.</span>$el <span class="token operator">===</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">\'example\'</span><span class="token punctuation">)</span> <span class="token comment">// => true</span>\n\n<span class="token comment">// $watch 是一个实例方法  监听该值</span>\nvm<span class="token punctuation">.</span><span class="token function">$watch</span><span class="token punctuation">(</span><span class="token string">\'a\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span> oldValue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 这个回调将在 `vm.a` 改变后调用</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="生命周期钩子" tabindex="-1"><a class="header-anchor" href="#生命周期钩子" aria-hidden="true">#</a> 生命周期钩子</h3>\n<ul>\n<li>created:在实例创建完成后立即执行，</li>\n<li>beforeMount:在挂载之前被调用，相关的渲染函数首次被调用</li>\n<li>mounted:el被新创建的vm.$el替换，挂载成功</li>\n<li>beforeUpdate:数据更新的调用</li>\n<li>updated:组件DOM已经更新，组件更新完毕</li>\n</ul>\n<p><strong>不要在选项 property 或回调上使用箭头函数  =&gt;,因为这样无法使用this指向Vue实例</strong></p>\n<h2 id="_3-指令" tabindex="-1"><a class="header-anchor" href="#_3-指令" aria-hidden="true">#</a> 3.指令</h2>\n<h3 id="指令概念" tabindex="-1"><a class="header-anchor" href="#指令概念" aria-hidden="true">#</a> 指令概念</h3>\n<ul>\n<li>本质就是自定义属性</li>\n<li>Vue中指令都是以 v- 开头</li>\n</ul>\n<h4 id="插值" tabindex="-1"><a class="header-anchor" href="#插值" aria-hidden="true">#</a> 插值</h4>\n<p>数据绑定最常见的形式就是使用“Mustache”语法 (双大括号) 的文本插值：</p>\n<div class="language-vue ext-vue line-numbers-mode"><pre v-pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>Message: {{ msg }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>vue的指令： v- 开头的特殊属性\n作用是：将dom和数据进行响应</p>\n<h4 id="v-cloak" tabindex="-1"><a class="header-anchor" href="#v-cloak" aria-hidden="true">#</a> v-cloak</h4>\n<ul>\n<li>\n<p>防止页面加载时出现闪烁问题</p>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">\n  <span class="token comment">/* \n    1、通过属性选择器 选择到 带有属性 v-cloak的标签  让他隐藏\n */</span>\n  <span class="token selector">[v-cloak]</span><span class="token punctuation">{</span>\n    <span class="token comment">/* 元素隐藏    */</span>\n    <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token comment">&lt;!-- 2、 让带有插值 语法的   添加 v-cloak 属性 \n         在 数据渲染完场之后，v-cloak 属性会被自动去除，\n         v-cloak一旦移除也就是没有这个属性了  属性选择器就选择不到该标签\n\t\t 也就是对应的标签会变为可见\n    --\x3e</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>  <span class="token attr-name">v-cloak</span>  <span class="token punctuation">></span></span>{{msg}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      <span class="token comment">//  el   指定元素 id 是 app 的元素  </span>\n      <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">\'#app\'</span><span class="token punctuation">,</span>\n      <span class="token comment">//  data  里面存储的是数据</span>\n      <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">\'Hello Vue\'</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div></li>\n</ul>\n<h4 id="v-pre" tabindex="-1"><a class="header-anchor" href="#v-pre" aria-hidden="true">#</a> v-pre</h4>\n<ul>\n<li>显示原始信息跳过编译过程</li>\n<li>跳过这个元素和它的子元素的编译过程。</li>\n<li><strong>一些静态的内容不需要编译加这个指令可以加快渲染</strong></li>\n</ul>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-pre</span><span class="token punctuation">></span></span>{{ this will not be compiled }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    \n\t<span class="token comment">&lt;!--  显示的是{{ this will not be compiled }}  --\x3e</span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-pre</span><span class="token punctuation">></span></span>{{msg}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>  \n     <span class="token comment">&lt;!--   即使data里面定义了msg这里仍然是显示的{{msg}}  --\x3e</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">\'#app\'</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n            <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">\'Hello Vue.js\'</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h4 id="v-once" tabindex="-1"><a class="header-anchor" href="#v-once" aria-hidden="true">#</a> <strong>v-once</strong></h4>\n<ul>\n<li>执行一次性的插值【当数据改变时，插值处的内容不会继续更新】</li>\n</ul>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code>  <span class="token comment">&lt;!-- 即使data里面定义了msg 后期我们修改了 仍然显示的是第一次data里面存储的数据即 Hello Vue.js  --\x3e</span>\n     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-once</span><span class="token punctuation">></span></span>{{ msg}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    \n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">\'#app\'</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n            <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">\'Hello Vue.js\'</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h4 id="v-text" tabindex="-1"><a class="header-anchor" href="#v-text" aria-hidden="true">#</a> v-text</h4>\n<p>v-text:一定程度上等效于{{}}</p>\n<h5 id="作用" tabindex="-1"><a class="header-anchor" href="#作用" aria-hidden="true">#</a> 作用</h5>\n<p>​            将v-text=&quot;&quot;内部的变量渲染(覆盖)到标签的内部</p>\n<h5 id="用法" tabindex="-1"><a class="header-anchor" href="#用法" aria-hidden="true">#</a> 用法</h5>\n<p>​            在标签内部给定v-text=&quot;绑定到data的键&quot;</p>\n<h5 id="作用机理" tabindex="-1"><a class="header-anchor" href="#作用机理" aria-hidden="true">#</a> 作用机理</h5>\n<p>​            v-text实际上是将指定键的值给到元素的InnerText属性</p>\n<h5 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项" aria-hidden="true">#</a> 注意事项</h5>\n<p>​            只能用于元素的InnerText属性能够接收数据的元素</p>\n<h5 id="v-text和-的区别" tabindex="-1"><a class="header-anchor" href="#v-text和-的区别" aria-hidden="true">#</a> v-text和{{}}的区别</h5>\n<ul>\n<li>里面都能够放置表达式|表达式</li>\n<li>{{}}不会覆盖标签体中已有的数据，而v-text会将标签体进行覆盖</li>\n<li>在网络延迟高的情况下，{{}}会将未填充数据的格式直接显示出来，这样会导致用户体验不佳，而v-text会等数据加载完后再进行渲染</li>\n<li>如果非要用{{}}又要解决上面的显示表达式的问题，就在父元素上面添加v-cloak，然后再<code>&lt;style&gt;</code>里面设置<code>[v-cloak]{display:none;}</code></li>\n</ul>\n<h4 id="v-html" tabindex="-1"><a class="header-anchor" href="#v-html" aria-hidden="true">#</a> v-html</h4>\n<h5 id="作用-1" tabindex="-1"><a class="header-anchor" href="#作用-1" aria-hidden="true">#</a> 作用</h5>\n<p>​\t将v-html=&quot;&quot;内部的变量渲染到标签的内部</p>\n<h5 id="作用机理-1" tabindex="-1"><a class="header-anchor" href="#作用机理-1" aria-hidden="true">#</a> 作用机理</h5>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code>v-html实际上是将指定键的值给到元素的innerHtml属性\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h5 id="注意事项-1" tabindex="-1"><a class="header-anchor" href="#注意事项-1" aria-hidden="true">#</a> 注意事项</h5>\n<p>​\t只能用给innerHtml能接收值得元素赋值</p>\n<p>​\tv-html会覆盖标签体的值</p>\n<h4 id="v-model" tabindex="-1"><a class="header-anchor" href="#v-model" aria-hidden="true">#</a> v-model</h4>\n<h5 id="作用-2" tabindex="-1"><a class="header-anchor" href="#作用-2" aria-hidden="true">#</a> 作用</h5>\n<p>​     <strong>双向绑定指令</strong>，限制在 <code>&lt;input&gt;、&lt;select&gt;、&lt;textarea&gt;、components</code>中使用</p>\n<blockquote>\n<ul>\n<li>当数据发生变化的时候，视图也就发生变化</li>\n<li>当视图发生变化的时候，数据也会跟着同步变化</li>\n</ul>\n</blockquote>\n<h5 id="注意事项-2" tabindex="-1"><a class="header-anchor" href="#注意事项-2" aria-hidden="true">#</a> 注意事项</h5>\n<p>​\t他不能用在纯展示信息的元素上，否则会报错</p>\n<h5 id="底层原理" tabindex="-1"><a class="header-anchor" href="#底层原理" aria-hidden="true">#</a> 底层原理</h5>\n<div class="language-vue ext-vue line-numbers-mode"><pre v-pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span> <span class="token attr-name">@input</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>shuru<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span> <span class="token attr-name">@input</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>msg = $event.target.value<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n    <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n            <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">"哈麻皮"</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n            <span class="token function">shuru</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h4 id="v-if" tabindex="-1"><a class="header-anchor" href="#v-if" aria-hidden="true">#</a> v-if</h4>\n<h5 id="作用-3" tabindex="-1"><a class="header-anchor" href="#作用-3" aria-hidden="true">#</a> 作用</h5>\n<p>​\t根据不同的条件对数据显示或隐藏</p>\n<h5 id="作用机理-2" tabindex="-1"><a class="header-anchor" href="#作用机理-2" aria-hidden="true">#</a> 作用机理</h5>\n<p>​\t当v-if条件满足时对应的元素或数据进行渲染</p>\n<h5 id="注意事项-3" tabindex="-1"><a class="header-anchor" href="#注意事项-3" aria-hidden="true">#</a> 注意事项</h5>\n<p>​\tv-else-if 或 v-else 依托于 v-if</p>\n<h5 id="适用场景" tabindex="-1"><a class="header-anchor" href="#适用场景" aria-hidden="true">#</a> 适用场景</h5>\n<p>​\t后台给的数据对应了不同的前端展示</p>\n<h4 id="v-show" tabindex="-1"><a class="header-anchor" href="#v-show" aria-hidden="true">#</a> v-show</h4>\n<h5 id="作用-4" tabindex="-1"><a class="header-anchor" href="#作用-4" aria-hidden="true">#</a> 作用</h5>\n<p>​\t判断条件是否成立，成立就显示，不成立则不显示</p>\n<h5 id="作用机理-3" tabindex="-1"><a class="header-anchor" href="#作用机理-3" aria-hidden="true">#</a> 作用机理</h5>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code>v-show是通过添加行内样式style="display:none"来隐藏\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h5 id="v-if和v-show的区别" tabindex="-1"><a class="header-anchor" href="#v-if和v-show的区别" aria-hidden="true">#</a> v-if和v-show的区别</h5>\n<p>​\tv-if:先进行判断再渲染到dom中，如果没有满足就不渲染</p>\n<p>​\tv-show:不管是否满足，首先渲染在页面 然后通过判断来是否添加display:none</p>\n<h5 id="使用场景上的区别" tabindex="-1"><a class="header-anchor" href="#使用场景上的区别" aria-hidden="true">#</a> 使用场景上的区别</h5>\n<p>​\tv-if: <strong>保密性较强时</strong>，使用v-if</p>\n<p>​\t\t\t需要<strong>反复渲染dom，对性能消耗较大</strong></p>\n<p>​\tv-show:<strong>保密性较低</strong>，使用v-show</p>\n<p>​\t\t\t<strong>只是对dom的显示进行设置</strong>，所以性能较高，但安全性不高</p>\n<h4 id="v-on" tabindex="-1"><a class="header-anchor" href="#v-on" aria-hidden="true">#</a> v-on</h4>\n<h5 id="缩写" tabindex="-1"><a class="header-anchor" href="#缩写" aria-hidden="true">#</a> 缩写 @</h5>\n<h5 id="作用-5" tabindex="-1"><a class="header-anchor" href="#作用-5" aria-hidden="true">#</a> 作用</h5>\n<p>​\t将事件绑定至vm的实例中</p>\n<h5 id="使用方式" tabindex="-1"><a class="header-anchor" href="#使用方式" aria-hidden="true">#</a> 使用方式</h5>\n<ol>\n<li>绑定函数</li>\n<li>绑定内联语句</li>\n</ol>\n<h5 id="参数" tabindex="-1"><a class="header-anchor" href="#参数" aria-hidden="true">#</a> 参数</h5>\n<p>​\t$event 就是事件本身  该形参的位置完全无关紧要</p>\n<h5 id="事件修饰符" tabindex="-1"><a class="header-anchor" href="#事件修饰符" aria-hidden="true">#</a> 事件修饰符</h5>\n<ul>\n<li>在事件处理程序中调用 <code>event.preventDefault()</code> 或 <code>event.stopPropagation()</code> 是非常常见的需求。</li>\n<li>Vue 不推荐我们操作DOM    为了解决这个问题，Vue.js 为 <code>v-on</code> 提供了<strong>事件修饰符</strong></li>\n<li>修饰符是由点开头的指令后缀来表示的</li>\n</ul>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token comment">&lt;!-- 阻止单击事件继续传播 --\x3e</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click.stop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>doThis<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>\n\n<span class="token comment">&lt;!-- 提交事件不再重载页面 --\x3e</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name"><span class="token namespace">v-on:</span>submit.prevent</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>onSubmit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>\n\n<span class="token comment">&lt;!-- 修饰符可以串联   即阻止冒泡也阻止默认事件 --\x3e</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click.stop.prevent</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>doThat<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>\n\n<span class="token comment">&lt;!-- 只当在 event.target 是当前元素自身时触发处理函数 --\x3e</span>\n<span class="token comment">&lt;!-- 即事件不是从内部元素触发的 --\x3e</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click.self</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>doThat<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n\n使用修饰符时，顺序很重要；相应的代码会以同样的顺序产生。因此，用 v-on:click.prevent.self 会阻止所有的点击，而 v-on:click.self.prevent 只会阻止对元素自身的点击。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h5 id="按键修饰符" tabindex="-1"><a class="header-anchor" href="#按键修饰符" aria-hidden="true">#</a> 按键修饰符</h5>\n<ul>\n<li>在做项目中有时会用到键盘事件，在监听键盘事件时，我们经常需要检查详细的按键。Vue 允许为 <code>v-on</code> 在监听键盘事件时添加按键修饰符</li>\n</ul>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token comment">&lt;!-- 只有在 `keyCode` 是 13 时调用 `vm.submit()` --\x3e</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name"><span class="token namespace">v-on:</span>keyup.13</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n\n<span class="token comment">&lt;!-- -当点击enter 时调用 `vm.submit()` --\x3e</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name"><span class="token namespace">v-on:</span>keyup.enter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n\n<span class="token comment">&lt;!--当点击enter或者space时  时调用 `vm.alertMe()`   --\x3e</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-on:</span>keyup.enter.space</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>alertMe<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>\n\n常用的按键修饰符\n.enter =>    enter键\n.tab => tab键\n.delete (捕获“删除”和“退格”按键) =>  删除键\n.esc => 取消键\n.space =>  空格键\n.up =>  上\n.down =>  下\n.left =>  左\n.right =>  右\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n\t<span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n              <span class="token function-variable function">submit</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n              <span class="token function-variable function">alertMe</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><h5 id="自定义按键修饰符别名" tabindex="-1"><a class="header-anchor" href="#自定义按键修饰符别名" aria-hidden="true">#</a> 自定义按键修饰符别名</h5>\n<ul>\n<li>在Vue中可以通过<code>config.keyCodes</code>自定义按键修饰符别名</li>\n</ul>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    预先定义了keycode 116（即F5）的别名为f5，因此在文字输入框中按下F5，会触发prompt方法\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-on:</span>keydown.f5</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prompt()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n\t\n    Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>keyCodes<span class="token punctuation">.</span>f5 <span class="token operator">=</span> <span class="token number">116</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">\'#app\'</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n            <span class="token function-variable function">prompt</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">\'我是 F5！\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h4 id="v-bind" tabindex="-1"><a class="header-anchor" href="#v-bind" aria-hidden="true">#</a> v-bind</h4>\n<h5 id="缩写-1" tabindex="-1"><a class="header-anchor" href="#缩写-1" aria-hidden="true">#</a> 缩写 :</h5>\n<h5 id="修饰符" tabindex="-1"><a class="header-anchor" href="#修饰符" aria-hidden="true">#</a> 修饰符</h5>\n<ul>\n<li><code>.prop</code> - 作为 DOM property 绑定而不是作为 attribute 绑定</li>\n<li><code>.camel</code> - 将 kebab-case attribute 名转换为 camelCase。</li>\n<li><code>.sync</code> 语法糖，会扩展成一个更新父组件绑定值的 <code>v-on</code> 侦听器。</li>\n</ul>\n<h5 id="作用-6" tabindex="-1"><a class="header-anchor" href="#作用-6" aria-hidden="true">#</a> 作用</h5>\n<p>​\t主要用于JavaScript Object绑定到属性,从而通过数据对元素操作属性</p>\n<p>​\t多个属性可以多个对象的方式来进行绑定，也可以通过数组来绑定</p>\n<p>​\t支持三元表达式</p>\n<h4 id="数组" tabindex="-1"><a class="header-anchor" href="#数组" aria-hidden="true">#</a> 数组</h4>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span>arrays<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>bianliang<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h5 id="元素移除" tabindex="-1"><a class="header-anchor" href="#元素移除" aria-hidden="true">#</a> 元素移除</h5>\n<blockquote>\n<h6 id="pop-移除数组末尾的元素" tabindex="-1"><a class="header-anchor" href="#pop-移除数组末尾的元素" aria-hidden="true">#</a> pop 移除数组末尾的元素</h6>\n<h6 id="shift-从头移除" tabindex="-1"><a class="header-anchor" href="#shift-从头移除" aria-hidden="true">#</a> shift  从头移除</h6>\n</blockquote>\n<h5 id="元素增加" tabindex="-1"><a class="header-anchor" href="#元素增加" aria-hidden="true">#</a> 元素增加</h5>\n<blockquote>\n<h6 id="unshift-从头开始加" tabindex="-1"><a class="header-anchor" href="#unshift-从头开始加" aria-hidden="true">#</a> unshift 从头开始加</h6>\n<h6 id="push-向后追加元素" tabindex="-1"><a class="header-anchor" href="#push-向后追加元素" aria-hidden="true">#</a> push 向后追加元素</h6>\n</blockquote>\n<h5 id="splice" tabindex="-1"><a class="header-anchor" href="#splice" aria-hidden="true">#</a> splice</h5>\n<p>splice(起始下标(0维数组),删除数量,删除后替换的变量)</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span>arrays<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>bianliang<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h5 id="sort" tabindex="-1"><a class="header-anchor" href="#sort" aria-hidden="true">#</a> sort</h5>\n<p>对数组进行排序，sort中如果需要乱序，就需要通过返回随机数实现</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">//</span>\n<span class="token keyword">this</span><span class="token punctuation">.</span>arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    a <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    b <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h5 id="reverse" tabindex="-1"><a class="header-anchor" href="#reverse" aria-hidden="true">#</a> reverse</h5>\n<p>将数组反转</p>\n<h5 id="filter" tabindex="-1"><a class="header-anchor" href="#filter" aria-hidden="true">#</a> filter</h5>\n<p>传入的元素符合条件就留下，否则清除，但不会影响原始数组的数据，它会返回解析过后的数组</p>\n<h6 id="语法" tabindex="-1"><a class="header-anchor" href="#语法" aria-hidden="true">#</a> 语法</h6>\n<p>filter((元素)=&gt;{\nreturn 筛选条件;\n}):</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span>arrays <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>arrays<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> item <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="v-for" tabindex="-1"><a class="header-anchor" href="#v-for" aria-hidden="true">#</a> v-for</h4>\n<blockquote>\n<ul>\n<li><strong>不推荐</strong>同时使用 <code>v-if</code> 和 <code>v-for</code></li>\n<li>当 <code>v-if</code> 与 <code>v-for</code> 一起使用时，<code>v-for</code> 具有比 <code>v-if</code> 更高的优先级。</li>\n</ul>\n</blockquote>\n<h5 id="作用-7" tabindex="-1"><a class="header-anchor" href="#作用-7" aria-hidden="true">#</a> 作用</h5>\n<p>​\t基于源数据多次渲染元素或模板块,被标记的元素就生成哪种元素</p>\n<h5 id="用法-1" tabindex="-1"><a class="header-anchor" href="#用法-1" aria-hidden="true">#</a> 用法</h5>\n<p>​\tv-for = \' () in 被遍历对象 \'</p>\n<h5 id="形参区别" tabindex="-1"><a class="header-anchor" href="#形参区别" aria-hidden="true">#</a> 形参区别</h5>\n<p>​        遍历数字: (元素,下标)\n​        遍历对象: (属性名,属性值,属性下标)\n​        遍历数组对象:(数组下标,元素对象)</p>\n<h5 id="key" tabindex="-1"><a class="header-anchor" href="#key" aria-hidden="true">#</a> :key</h5>\n<p>为避免有时未加:Key修饰符导致的Vue对Dom算法渲染错误,通过加上:Key修饰符(唯一的标识)来解决</p>\n<p>例如以下例子</p>\n<p>没有添加:key修饰符之前</p>\n<p>添加后:</p>\n<p>结论：</p>\n<p>​\t\t当用户随机选中一条数据后，单击添加，按照正常逻辑，增加后，单选按钮应该跟随之前选中的信息，而这里并没有按照合理的流程进行操作，这就是因为Vue对Dom的算法操作导致的渲染问题,所以根据需求进行添加:key修饰符，大部分情况下是添加的</p>\n<p>​\t:key使用的注意事项:</p>\n<p>​\t\t\t它的值不能是对象(Object)</p>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>newName<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>write<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clickUnshift<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>增加<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>\n    <span class="token comment">&lt;!--这里演示加不加 :key=\'boy.id\'的区别--\x3e</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(boy,index) in boys<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>boyBox<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{boy}}——{{index}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n    <span class="token keyword">const</span> vue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n            <span class="token literal-property property">num</span><span class="token operator">:</span> <span class="token number">9</span><span class="token punctuation">,</span>\n            <span class="token literal-property property">arrays</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"项1"</span><span class="token punctuation">,</span> <span class="token string">"项2"</span><span class="token punctuation">,</span> <span class="token string">"项3"</span><span class="token punctuation">,</span> <span class="token string">"项4"</span><span class="token punctuation">,</span> <span class="token string">"项5"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n            <span class="token literal-property property">newName</span><span class="token operator">:</span> <span class="token string">"翠花"</span><span class="token punctuation">,</span>\n            <span class="token literal-property property">boys</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n                <span class="token punctuation">{</span>\n                    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n                    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"小毛"</span><span class="token punctuation">,</span>\n                    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span>\n                <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                <span class="token punctuation">{</span>\n                    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n                    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"小巴"</span><span class="token punctuation">,</span>\n                    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">16</span>\n                <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                <span class="token punctuation">{</span>\n                    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n                    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"小李"</span><span class="token punctuation">,</span>\n                    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">12</span>\n                <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                <span class="token punctuation">{</span>\n                    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>\n                    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"小王"</span><span class="token punctuation">,</span>\n                    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">24</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">]</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n            <span class="token function">clickUnshift</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token comment">//先根据输入的值生成对象</span>\n                <span class="token keyword">let</span> newBoy <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>boys<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>newName<span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n                <span class="token comment">//将新生成的对象加入数组头部</span>\n                <span class="token keyword">this</span><span class="token punctuation">.</span>boys<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>newBoy<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br></div></div><h4 id="自定义指令" tabindex="-1"><a class="header-anchor" href="#自定义指令" aria-hidden="true">#</a> 自定义指令</h4>\n<h5 id="作用-8" tabindex="-1"><a class="header-anchor" href="#作用-8" aria-hidden="true">#</a> 作用</h5>\n<p>​\t自己注册一个指令到Vue全局或局部</p>\n<h5 id="用法-2" tabindex="-1"><a class="header-anchor" href="#用法-2" aria-hidden="true">#</a> 用法</h5>\n<p>​\t注册全局指令: Vue.directive( id, [definition] )</p>\n<p>​\t注册局部指令:</p>\n<p>在Vue选项中添加</p>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code>directives: {\n    指令名称(元素, 绑定, 新虚拟节点, 旧虚拟节点) {\n        \n    }\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h5 id="directives和directive的区别" tabindex="-1"><a class="header-anchor" href="#directives和directive的区别" aria-hidden="true">#</a> <strong>directives</strong>和<strong>directive</strong>的区别</h5>\n<h6 id="创建方式" tabindex="-1"><a class="header-anchor" href="#创建方式" aria-hidden="true">#</a> 创建方式</h6>\n<p>一个是用Vue大类进行创建，一个是通过Vue的选项进行创建的</p>\n<p>全局自定义指令的创建相对局部自定义指令的创建要复杂一点</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210429102407804" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210429102407804.png" data="aurora"></p>\n<h6 id="绑定的方式" tabindex="-1"><a class="header-anchor" href="#绑定的方式" aria-hidden="true">#</a> 绑定的方式</h6>\n<p>全局自定义指令绑定是可以将事件或属性进行分开绑定</p>\n<p>​\t关于事件(元素的聚焦、失焦、悬停等)的绑定在inserted中</p>\n<p>​\t关于属性(元素的样式、属性)的绑定在bind中</p>\n<p>局部自定义指令绑定是将update和bind合在一起</p>\n<h2 id="_4-过滤器" tabindex="-1"><a class="header-anchor" href="#_4-过滤器" aria-hidden="true">#</a> 4.过滤器</h2>\n<h3 id="作用-9" tabindex="-1"><a class="header-anchor" href="#作用-9" aria-hidden="true">#</a> 作用</h3>\n<p>​        可被用于文本格式化</p>\n<h3 id="适用场景-1" tabindex="-1"><a class="header-anchor" href="#适用场景-1" aria-hidden="true">#</a> 适用场景</h3>\n<p>​        商品展示时的单位转换</p>\n<p>​\t\t日期的格式转换s</p>\n<h3 id="语法-1" tabindex="-1"><a class="header-anchor" href="#语法-1" aria-hidden="true">#</a> 语法</h3>\n<p>​        通过花括号或者v-bind调用\n​        {{参数 | 处理参数的函数}}  返回处理后的结果\n​        处理函数的参数:第一个参数是管道符号前的结果\n​        多个过滤器链永远以最后一个过滤器输出的结果作为结果\n​        过滤器必须return  显示的值是最后一个过滤器return的结果</p>\n<h3 id="例子" tabindex="-1"><a class="header-anchor" href="#例子" aria-hidden="true">#</a> 例子</h3>\n<div class="language-vue ext-vue line-numbers-mode"><pre v-pre class="language-vue"><code>{{today| dateFilter}}\n\n------\nfilters: {\n    dateFilter(date) {\n        return moment(date).format(\'YYYY年MM月DD日 hh:mm:ss\');\n    }\n},\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="_5-计算属性" tabindex="-1"><a class="header-anchor" href="#_5-计算属性" aria-hidden="true">#</a> 5.计算属性</h2>\n<h5 id="解决问题" tabindex="-1"><a class="header-anchor" href="#解决问题" aria-hidden="true">#</a> 解决问题</h5>\n<blockquote>\n<p>在插值中使用表达式,可读性差，不利于维护</p>\n<p>通过get() 获取相关属性的变化计算自己，通过set()监视自己的属性的主动变化(因此可以用来影响关联属性)</p>\n</blockquote>\n<h5 id="作用-10" tabindex="-1"><a class="header-anchor" href="#作用-10" aria-hidden="true">#</a> 作用</h5>\n<p>​\t\t通过关联属性对原始属性进行变更</p>\n<h5 id="用法-3" tabindex="-1"><a class="header-anchor" href="#用法-3" aria-hidden="true">#</a> 用法</h5>\n<p>​\tVue选项computed:{}</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210430085821451" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210430085821451.png" data="aurora"></p>\n<p><strong>计算属性是基于它们的响应式依赖进行缓存的,只在相关响应式依赖发生改变时它们才会重新求值。</strong></p>\n<p><strong>计算属性必须返回一个结果（计算过后的结果）</strong></p>\n<p>计算属性作为函数出现时默认的是：</p>\n<p>​\t这个属性对象的getter</p>\n<p>计算属性对象的setter其实是一个监视器，只要计算属性的本体发生变化,就会触发</p>\n<h5 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景" aria-hidden="true">#</a> 应用场景</h5>\n<p>​\t面向不同国家的一个商城，里面的价格只有一份，不同国家的人看到的货币都是经过汇率换算过的结果，这时就可以使用到计算属性进行计算</p>\n<p>PS:单选项中访问其他选项的属性或方法都需要通过this指向vm实例再通过实例得到其他选项中的属性或方法</p>\n<div class="language-vue ext-vue line-numbers-mode"><pre v-pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    第一个输入框 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>input1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>\n    第二个输入框 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>input2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>\n    前两个数字相加的结果 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>result<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n    <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">computed</span><span class="token operator">:</span><span class="token punctuation">{</span>\n            <span class="token literal-property property">result</span><span class="token operator">:</span><span class="token punctuation">{</span>\n                <span class="token comment">//这其实是result属性的回调，回调的时机是获取当前属性值的时候，作用是将返回值作为属性值</span>\n                <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                    <span class="token keyword">let</span> regNum <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\d*$</span><span class="token regex-delimiter">/</span></span> <span class="token comment">//申明数字的正则表达式</span>\n                    <span class="token keyword">let</span> num1 <span class="token operator">=</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>input1<span class="token punctuation">)</span>\n                    <span class="token keyword">let</span> num2 <span class="token operator">=</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>input2<span class="token punctuation">)</span>\n                    <span class="token keyword">if</span> <span class="token punctuation">(</span>regNum<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> regNum<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                        <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2\n                    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>\n                        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>input1 <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>input2\n                    <span class="token punctuation">}</span>\n                <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                <span class="token comment">//这也是一个回调，回调的实际是属性值发生改变的时候，监视当前属性值的变化，同步更新相关属性值</span>\n                <span class="token function">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>\n                    <span class="token keyword">let</span> regNum <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\d*$</span><span class="token regex-delimiter">/</span></span> <span class="token comment">//申明数字的正则表达式</span>\n                    <span class="token keyword">let</span> num1 <span class="token operator">=</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>input1<span class="token punctuation">)</span>\n                    <span class="token keyword">let</span> num2 <span class="token operator">=</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>input2<span class="token punctuation">)</span>\n                    <span class="token comment">//如果是数字类型，就转化后相加</span>\n                    <span class="token keyword">if</span> <span class="token punctuation">(</span>regNum<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> regNum<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                        <span class="token keyword">this</span><span class="token punctuation">.</span>input1 <span class="token operator">=</span> value <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>input2\n                        <span class="token keyword">this</span><span class="token punctuation">.</span>input2 <span class="token operator">=</span> value <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>input1\n                        value <span class="token operator">=</span> num1 <span class="token operator">+</span> num2\n                        <span class="token comment">//如果不是数字类型就拆分字符串</span>\n                    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>\n                        <span class="token keyword">this</span><span class="token punctuation">.</span>input1<span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>input2<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>\n                        <span class="token keyword">this</span><span class="token punctuation">.</span>input2<span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>input1<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>\n                        value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>input1 <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>input2\n                    <span class="token punctuation">}</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">{</span>\n            <span class="token literal-property property">input1</span><span class="token operator">:</span><span class="token string">""</span><span class="token punctuation">,</span>\n            <span class="token literal-property property">input2</span><span class="token operator">:</span><span class="token string">""</span>\n        <span class="token punctuation">}</span>\n\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br></div></div><h2 id="_6-侦听器" tabindex="-1"><a class="header-anchor" href="#_6-侦听器" aria-hidden="true">#</a> 6.侦听器</h2>\n<p>观察和响应 Vue 实例上的数据变动,计算属性也是如此</p>\n<h5 id="侦听器的参数" tabindex="-1"><a class="header-anchor" href="#侦听器的参数" aria-hidden="true">#</a> 侦听器的参数</h5>\n<p>参数1：更改后的值,参数2:更改前的值</p>\n<h5 id="侦听器与计算属性的区别" tabindex="-1"><a class="header-anchor" href="#侦听器与计算属性的区别" aria-hidden="true">#</a> 侦听器与计算属性的区别</h5>\n<p>侦听器侦听对象的本身，并且在其他的选项中已经存在而计算属性不用</p>\n<ol>\n<li>侦听器，侦听自己，当值发生变化的时候会触发，有两个参数（新值，旧值）</li>\n<li>计算属性，侦听关联属性，当关联属性的值发生变化的时候，就得到一个值</li>\n<li>计算属性具有缓存，证明方式是多次调用同一个计算属性，观察执行多少次，侦听器是每次变化都会执行</li>\n<li>每个计算属性都有两个回调函数，一个是setter，一个是getter</li>\n<li>get用来返回当前属性的值，不会影响原始属性的值</li>\n<li>set用于监视属性，一旦属性改变，就会调用set，就会将新的值传入set(value)</li>\n</ol>\n<div class="language-vue ext-vue line-numbers-mode"><pre v-pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>现在的数字是:{{num}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>num++<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>num++<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>这个数字是一个{{result}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n    <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">{</span>\n            <span class="token literal-property property">num</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n            <span class="token literal-property property">result</span><span class="token operator">:</span> <span class="token string">"奇数"</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">watch</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n            <span class="token comment">//监听某个值的变化</span>\n            <span class="token function">num</span><span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span> oldValue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>newValue <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>result <span class="token operator">=</span> <span class="token string">"偶数"</span>\n                <span class="token punctuation">}</span>\n                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>result <span class="token operator">=</span> <span class="token string">"奇数"</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h2 id="_7-vue组件" tabindex="-1"><a class="header-anchor" href="#_7-vue组件" aria-hidden="true">#</a> 7.Vue组件</h2>\n<blockquote>\n<p>模块：可复用的代码块</p>\n<p>组件：可复用的UI</p>\n</blockquote>\n<p>用template声明一个需要复用的html结构 组件没有挂载点\n组件具有单根性,如果传入多个元素，就只渲染第一个元素，为了确保不出错，就直接使用div进行包裹\n全局组件 可以在不同的vue实例间进行调用</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"组件名称"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">单标签</span><span class="token template-punctuation string">`</span></span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_7-1-组件的定义" tabindex="-1"><a class="header-anchor" href="#_7-1-组件的定义" aria-hidden="true">#</a> 7-1.组件的定义</h3>\n<p>组件的定义有三种方式：</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// 注册组件，传入一个扩展过的构造器</span>\nVue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">\'my-component\'</span><span class="token punctuation">,</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 注册组件，传入一个选项对象 (自动调用 Vue.extend)</span>\nVue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">\'my-component\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 获取注册的组件 (始终返回构造器)</span>\n<span class="token keyword">var</span> MyComponent <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">\'my-component\'</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h4 id="_7-1-1-利用构造器创建子子类-再把子类注册到全局组件" tabindex="-1"><a class="header-anchor" href="#_7-1-1-利用构造器创建子子类-再把子类注册到全局组件" aria-hidden="true">#</a> 7-1-1.利用构造器创建子子类，再把子类注册到全局组件</h4>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token comment">&lt;!--使用组件--\x3e</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>zujian</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>zujian</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n    <span class="token comment">//第一种方式,利用构造器 使用基础 Vue 构造器，创建一个“子类”。参数是一个包含组件选项的对象。</span>\n    <span class="token keyword">const</span> zujian <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div>\n           &lt;p>美人不是母胎生&lt;/p>\n           &lt;p>应是桃花树长成&lt;/p>\n        &lt;/div></span><span class="token template-punctuation string">`</span></span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token comment">//将zujian注册到全局组件</span>\n    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"zujian"</span><span class="token punctuation">,</span>zujian<span class="token punctuation">)</span>\n\n    <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h4 id="_7-1-2-直接注册" tabindex="-1"><a class="header-anchor" href="#_7-1-2-直接注册" aria-hidden="true">#</a> 7-1-2.直接注册</h4>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token comment">&lt;!--使用组件--\x3e</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>zujian</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>zujian</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n  <span class="token comment">//直接注册全局组件</span>\n  Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">\'zujian\'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>\n    <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div>\n    &lt;p>人间四月芳菲尽&lt;/p>\n    &lt;p>山寺桃花始盛开&lt;/p>\n    &lt;/div></span><span class="token template-punctuation string">`</span></span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h4 id="_7-1-3-通过选择器来定义" tabindex="-1"><a class="header-anchor" href="#_7-1-3-通过选择器来定义" aria-hidden="true">#</a> 7-1-3.通过选择器来定义</h4>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token comment">&lt;!--使用组件--\x3e</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>zujian</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>zujian</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token comment">&lt;!--这里是一个template模板标签,专门定义UI结构的--\x3e</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xiakexing<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>十步杀一人,千里不留行<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>事了拂衣去,深藏功与名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n    <span class="token comment">//通过引入上面&lt;template>标签来注册组件</span>\n    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">\'zujian\'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>\n        <span class="token comment">//这里用的是反引号,如果用单引号,其实也没问题,就是爆红不好看</span>\n        <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">#xiakexing</span><span class="token template-punctuation string">`</span></span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p>私有组件的定义方式：</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    \n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">components</span><span class="token operator">:</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">组件名</span><span class="token operator">:</span><span class="token punctuation">{</span>\n            <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">"单根标签"</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="_7-2-组件中的结构" tabindex="-1"><a class="header-anchor" href="#_7-2-组件中的结构" aria-hidden="true">#</a> 7-2.组件中的结构</h3>\n<p>由于组件本身就是一个vue实例，所以vue实例该有的它都有</p>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>zujian</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>zujian</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n    <span class="token comment">//注册一个功能全面的组件</span>\n    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">\'zujian\'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div>\n        &lt;el-button type="primary" @click="sayName">点击弹出诗人名字&lt;/el-button>\n        &lt;p>安得世间两全法&lt;/p>\n        &lt;p>不负如来不负卿&lt;/p>\n        &lt;p>{{3.3 | priceFilter}}&lt;/p>\n        &lt;/div></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n        <span class="token comment">//方法</span>\n        <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>\n            <span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                <span class="token keyword">this</span><span class="token punctuation">.</span>$message<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string">\'这首诗是大情圣仓央嘉措的作品\'</span><span class="token punctuation">)</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token comment">//过滤器</span>\n        <span class="token literal-property property">filters</span><span class="token operator">:</span><span class="token punctuation">{</span>\n            <span class="token function">priceFilter</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                <span class="token keyword">return</span> <span class="token string">"$"</span> <span class="token operator">+</span> value <span class="token operator">+</span> <span class="token string">"一个蛤蟆皮"</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><h3 id="_7-3-组件中的data只能是一个function" tabindex="-1"><a class="header-anchor" href="#_7-3-组件中的data只能是一个function" aria-hidden="true">#</a> 7-3.组件中的data只能是一个function</h3>\n<p><strong>一个组件的 <code>data</code> 选项必须是一个函数</strong>，因此每个实例可以维护一份被返回对象的独立的拷贝：</p>\n<blockquote>\n<p>每次return都是一个新的对象</p>\n</blockquote>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token comment">&lt;!--多个组件的num互不干扰--\x3e</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>zujian</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>zujian</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>zujian</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>zujian</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n    <span class="token comment">//注册一个组件</span>\n    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">\'zujian\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div>\n        &lt;p>计数器:&lt;el-button type="info" @click="num --">-&lt;/el-button> &lt;input v-model="num"> &lt;el-button type="info" @click="num ++">+&lt;/el-button> &lt;/p>\n        &lt;/div></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n        <span class="token comment">//组件中的data是函数才能互不影响</span>\n        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">return</span><span class="token punctuation">{</span>\n                <span class="token literal-property property">num</span><span class="token operator">:</span><span class="token number">1</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><blockquote>\n<p>data中的数据不是私有的时候的问题</p>\n<blockquote>\n<p>问题描述： 如下，在组件的data选项中return外部的obj，这样组件在调用的过程中，数据就会发生共享，这样也更加容易出错</p>\n</blockquote>\n</blockquote>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ok</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ok</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ok</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ok</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n    <span class="token comment">//申明一个变量</span>\n    <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">num</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">}</span>\n    <span class="token comment">//申明一个组件</span>\n    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">\'ok\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n          &lt;div>\n          &lt;el-tag>{{ num }}&lt;/el-tag>\n          &lt;br>\n          &lt;el-button @click="addSelf">点击&lt;/el-button>\n          &lt;/div></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> obj\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n            <span class="token function">addSelf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">this</span><span class="token punctuation">.</span>num<span class="token operator">++</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><h3 id="_7-4-父组件向子组件传值-子组件使用父组件的数据" tabindex="-1"><a class="header-anchor" href="#_7-4-父组件向子组件传值-子组件使用父组件的数据" aria-hidden="true">#</a> 7-4.父组件向子组件传值(子组件使用父组件的数据)</h3>\n<blockquote>\n<p>注意：无论是子组件自定义事件还是子组件自定义方法，都不支持大小写的驼峰命名</p>\n</blockquote>\n<p>单纯传值：子组件中的props中自定义属性 ====&gt;&gt; 调用子组件标签的时候，通过v-bind绑定子组件自定义的属性实现传值 ===&gt;&gt; 子组件中正常使用值</p>\n<p>props中申明的虽然只能是个字符串，但是这个字符串，可以接收对象/数组/字符串/数字</p>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token comment">&lt;!--这里通过强制绑定子组件属性 v-bind:hamapi 对子组件进行传值--\x3e</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>zujian</span> <span class="token attr-name">:hamapi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>zujian</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n    <span class="token comment">//父组件向子组件传值就是在子组件里面申明了子组件标签的一个特殊属性</span>\n    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">\'zujian\'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">props</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">\'hamapi\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div>\n        &lt;p style="color: red">看看能不能调用到父组件的内容&lt;/p>\n        &lt;p>{{hamapi}}&lt;/p>\n        &lt;/div></span><span class="token template-punctuation string">`</span></span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n            <span class="token literal-property property">msg</span><span class="token operator">:</span><span class="token string">"父组件的内容"</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p>将父组件传入的值，赋值给子组件，赋值的时候，就直接在data里面，通过 this.$props里面申明的属性取父组件穿过来的值即可</p>\n<div class="language-htmL ext-htmL line-numbers-mode"><pre v-pre class="language-htmL"><code>&lt;div id=&quot;app&quot;&gt;\n    &lt;!--这里通过强制绑定子组件属性 v-bind:hamapi 对子组件进行传值--&gt;\n    &lt;zujian :hamapi=&quot;num&quot;&gt;&lt;/zujian&gt;\n&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n&lt;script&gt;\n    //父组件向子组件传值就是在子组件里面申明了子组件标签的一个特殊属性\n    Vue.component(\'zujian\',{\n        props:[\'hamapi\'],\n        template:`&lt;div&gt;\n        &lt;p style=&quot;color: red&quot;&gt;点击修改父组件传入的值&lt;/p&gt;\n        &lt;el-button type=&quot;primary&quot; @click=&quot;subNum ++&quot;&gt;+&lt;/el-button&gt;\n        &lt;p&gt;{{subNum}}&lt;/p&gt;\n        &lt;/div&gt;`,\n        data(){\n            return{\n                //通过this 拿到hamapi的值,并给予msg\n                subNum:this.hamapi\n            }\n        }\n    })\n    const vm = new Vue({\n        el: &quot;#app&quot;,\n        data: {\n            num:3\n        }\n    })\n&lt;/script&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><h3 id="_7-5-子组件调用父组件的方法-父组件的方法传递给子组件" tabindex="-1"><a class="header-anchor" href="#_7-5-子组件调用父组件的方法-父组件的方法传递给子组件" aria-hidden="true">#</a> 7-5.子组件调用父组件的方法(父组件的方法传递给子组件)</h3>\n<blockquote>\n<p>注意：无论是子组件自定义事件还是子组件自定义方法，都不支持大小写的驼峰命名</p>\n</blockquote>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token comment">&lt;!--这里通过强制绑定子组件属性 @子组件自定义方法="父组件的方法" 实现子组件调用父组件的方法--\x3e</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>zujian</span> <span class="token attr-name">:hamapi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>num<span class="token punctuation">"</span></span> <span class="token attr-name">@subevent</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parentMethod<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>zujian</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n    <span class="token comment">//父组件向子组件传值就是在子组件里面申明了子组件标签的一个特殊属性</span>\n    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">\'zujian\'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">props</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">\'hamapi\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div>\n        &lt;p style="color: red">点击触发父组件的方法&lt;/p>\n        &lt;el-button type="primary" @click="sayParent">触发父组件的方法&lt;/el-button>\n        &lt;p>{{subNum}}&lt;/p>\n        &lt;/div></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">return</span><span class="token punctuation">{</span>\n                <span class="token comment">//通过this 拿到hamapi的值,并给予msg</span>\n                <span class="token literal-property property">subNum</span><span class="token operator">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>hamapi\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>\n            <span class="token function">sayParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                <span class="token comment">//通过 this的$emit调用到子组件标签中定义的subevent事件 </span>\n                <span class="token comment">//$emit</span>\n                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">\'subevent\'</span><span class="token punctuation">)</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n            <span class="token literal-property property">num</span><span class="token operator">:</span><span class="token number">3</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>\n            <span class="token function">parentMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                <span class="token keyword">this</span><span class="token punctuation">.</span>$message<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string">\'大家都是蛤蟆皮\'</span><span class="token punctuation">)</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br></div></div><h3 id="_7-6-子组件调用父组件方法的时候传参" tabindex="-1"><a class="header-anchor" href="#_7-6-子组件调用父组件方法的时候传参" aria-hidden="true">#</a> 7-6.子组件调用父组件方法的时候传参</h3>\n<p>--子组件修改父组件的数据---</p>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n父组件的num的值{{num}}\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>zujian</span> <span class="token attr-name">@addanum</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>change<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>zujian</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n    <span class="token comment">//定义一个组件</span>\n    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">\'zujian\'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div>\n        &lt;el-button type="info" @click="hamapi">点击给父组件加个数字&lt;/el-button>\n        &lt;/div></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n        <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>\n            <span class="token function">hamapi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                <span class="token keyword">let</span> num <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">)</span>\n                <span class="token comment">//通过this.$emit(\'自定义方法\',arg1,arg2,arg3...)中的arg给父组件传参,并修改父组件</span>\n                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">"addanum"</span><span class="token punctuation">,</span>num<span class="token punctuation">)</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n            <span class="token literal-property property">num</span><span class="token operator">:</span><span class="token number">1</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>\n            <span class="token function">change</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                <span class="token keyword">this</span><span class="token punctuation">.</span>num <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>num <span class="token operator">+</span> num\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><h3 id="_7-7-兄弟组件之间的通信" tabindex="-1"><a class="header-anchor" href="#_7-7-兄弟组件之间的通信" aria-hidden="true">#</a> 7-7.兄弟组件之间的通信</h3>\n<blockquote>\n<p>关键知识点：\n监听事件： 事件中心.$on(\'兄弟组件中$emit(中第一个参数)\',兄弟组件中$emit(中第2个参数))\n销毁事件： 事件中心.$off(被$emit()绑定过的第一个参数)\n触发事件： 事件中心.$emit(\'控制兄弟组件的方法\',传给兄弟组件的参数)\n监听事件要写在mounted(){}这个钩子方法里面</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210507235447237" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210507235447237.png" data="aurora"></p>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token comment">&lt;!--在vm实例也就是事件中心的父组件里面进行注销--\x3e</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xiaohui<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>销毁组件间通讯<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n    <span class="token comment">&lt;!--a组件--\x3e</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>azujian</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>azujian</span><span class="token punctuation">></span></span>\n    <span class="token comment">&lt;!--b组件--\x3e</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bzujian</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bzujian</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n    <span class="token comment">//注册全局事件中心</span>\n    <span class="token keyword">let</span> parent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">//组件A</span>\n    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"azujian"</span><span class="token punctuation">,</span><span class="token punctuation">{</span>\n        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token punctuation">{</span>\n                <span class="token literal-property property">num</span><span class="token operator">:</span><span class="token number">0</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div>\n            A组件的计数器读数:{{num}} &lt;br>\n            &lt;button @click="adomchange">操作B组件的计数器读数&lt;/button>\n        &lt;/div></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n        <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>\n            <span class="token comment">//写本组件的方法</span>\n            <span class="token function">adomchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                <span class="token keyword">let</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>\n                <span class="token comment">//使用事件中心监听兄弟对象</span>\n                parent<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">\'bar\'</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token comment">//调用组件a的更新的钩子方法</span>\n        <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token comment">//启用事件中心的监听,当bzujian被绑定了aar的那个事件被触发的时候,就调用这个方法</span>\n            parent<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">\'aar\'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">{</span>\n                <span class="token keyword">this</span><span class="token punctuation">.</span>num <span class="token operator">+=</span> num\n            <span class="token punctuation">}</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token comment">//组件B</span>\n    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"bzujian"</span><span class="token punctuation">,</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">props</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"counter"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div>\n            B组件的计数器读数:{{num}} &lt;br>\n            &lt;button @click="bdomchange">操作A组件的计数器读数&lt;/button>\n        &lt;/div></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token punctuation">{</span>\n                <span class="token literal-property property">num</span><span class="token operator">:</span><span class="token number">0</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>\n            <span class="token comment">//写本组件的方法</span>\n            <span class="token function">bdomchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                <span class="token keyword">let</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>\n                <span class="token comment">//给事件中心绑定一个aar的事件,传入参数</span>\n                parent<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">\'aar\'</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token comment">//调用组件a的更新的钩子方法</span>\n        <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token comment">//启用事件中心对azujian的bar的监听,当azujian里面的 bar触发的时候,就调用这个方法</span>\n            parent<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">\'bar\'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">{</span>\n                <span class="token keyword">this</span><span class="token punctuation">.</span>num <span class="token operator">+=</span> num\n            <span class="token punctuation">}</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>\n            <span class="token function">xiaohui</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                <span class="token comment">//销毁事件中心对不同事件的绑定</span>\n                parent<span class="token punctuation">.</span><span class="token function">$off</span><span class="token punctuation">(</span><span class="token string">\'aar\'</span><span class="token punctuation">)</span>\n                parent<span class="token punctuation">.</span><span class="token function">$off</span><span class="token punctuation">(</span><span class="token string">\'bar\'</span><span class="token punctuation">)</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br></div></div><h3 id="_7-8-采用v-if来实现不同组件的切换" tabindex="-1"><a class="header-anchor" href="#_7-8-采用v-if来实现不同组件的切换" aria-hidden="true">#</a> 7-8.采用v-if来实现不同组件的切换</h3>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token comment">&lt;!--点击不同的按钮,控制isdenglu的取值--\x3e</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>isdenglu = true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>---<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>isdenglu = false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>注册<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>denglu</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>isdenglu<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>denglu</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>zhuce</span> <span class="token attr-name">v-else</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>zhuce</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n    <span class="token comment">//自定义登录组件</span>\n    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">\'denglu\'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div>\n          &lt;el-card>\n          登录组件\n          &lt;/el-card>\n        &lt;/div></span><span class="token template-punctuation string">`</span></span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token comment">//自定义注册组件</span>\n    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">\'zhuce\'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div>\n          &lt;el-card>\n          注册组件\n          &lt;/el-card>\n        &lt;/div></span><span class="token template-punctuation string">`</span></span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n            <span class="token literal-property property">isdenglu</span><span class="token operator">:</span><span class="token boolean">true</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><h3 id="_7-9-动态组件" tabindex="-1"><a class="header-anchor" href="#_7-9-动态组件" aria-hidden="true">#</a> 7-9.动态组件</h3>\n<p>采用component标签结合is属性实现不同组件的切换</p>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token comment">&lt;!--点击修改componentName的值--\x3e</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>componentName = <span class="token punctuation">\'</span>jin<span class="token punctuation">\'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>金<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>componentName = <span class="token punctuation">\'</span>mu<span class="token punctuation">\'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>木<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>componentName = <span class="token punctuation">\'</span>shui<span class="token punctuation">\'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>水<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>componentName = <span class="token punctuation">\'</span>huo<span class="token punctuation">\'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>火<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>componentName = <span class="token punctuation">\'</span>tu<span class="token punctuation">\'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>土<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>\n<span class="token comment">&lt;!--通过引入component组件,实现不同组件的切换--\x3e</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name">:is</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>componentName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n    <span class="token comment">//金</span>\n    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">\'jin\'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>\n      <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div>\n      &lt;el-card>五行:金&lt;/el-card>\n      &lt;/div></span><span class="token template-punctuation string">`</span></span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token comment">//木</span>\n    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">\'mu\'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>\n      <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div>\n      &lt;el-card>五行:木&lt;/el-card>\n      &lt;/div></span><span class="token template-punctuation string">`</span></span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token comment">//水</span>\n    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">\'shui\'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>\n      <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div>\n      &lt;el-card>五行:水&lt;/el-card>\n      &lt;/div></span><span class="token template-punctuation string">`</span></span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token comment">//火</span>\n    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">\'huo\'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>\n      <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div>\n      &lt;el-card>五行:火&lt;/el-card>\n      &lt;/div></span><span class="token template-punctuation string">`</span></span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token comment">//土</span>\n    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">\'tu\'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>\n      <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div>\n      &lt;el-card>五行:土&lt;/el-card>\n      &lt;/div></span><span class="token template-punctuation string">`</span></span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n          <span class="token literal-property property">componentName</span><span class="token operator">:</span><span class="token string">\'jin\'</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br></div></div><h3 id="_7-10-插槽" tabindex="-1"><a class="header-anchor" href="#_7-10-插槽" aria-hidden="true">#</a> 7-10.插槽</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210506003026446" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210506003026446.png" data="aurora"></p>\n<h4 id="_7-10-1-匿名插槽" tabindex="-1"><a class="header-anchor" href="#_7-10-1-匿名插槽" aria-hidden="true">#</a> 7-10-1.匿名插槽</h4>\n<blockquote>\n<p>1.使用插槽,插槽的标签名和slot的标签名将不会被渲染,kkl里面的内容会被夹在slot标签里面,</p>\n<p>2.如果slot标签里面有值, 调用插槽的时候,如果不传值就会使用slot标签的默认值，如果传了值就覆盖掉原本的值,</p>\n<p>3.VUE官方2.6之后的v-slot不能开槽，且不会覆盖，且会被渲染出来</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210506003351853" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210506003351853.png" data="aurora"></p>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>zujian</span><span class="token punctuation">></span></span>\n  <span class="token comment">&lt;!--这里的标签其实要不要无所谓--\x3e</span>\n<span class="token comment">&lt;!--  &lt;span>kkl&lt;/span>--\x3e</span>\n  蛤蟆皮\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>zujian</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n  <span class="token comment">//定义一个组件  组件的模板里面留一个口子,这个口子就是父组件向里面传值的地方</span>\n  Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">\'zujian\'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>\n    <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div>\n    &lt;p>憨批的名字是&lt;slot>杰杰&lt;/slot>&lt;/p>\n    &lt;/div></span><span class="token template-punctuation string">`</span></span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h4 id="_7-10-2-具名插槽" tabindex="-1"><a class="header-anchor" href="#_7-10-2-具名插槽" aria-hidden="true">#</a> 7-10-2.具名插槽</h4>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210911160440750" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210911160440750.png" data="aurora"></p>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>zujian</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>header</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-card</span><span class="token punctuation">></span></span>这是头部<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-card</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>你是风儿<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>我是沙<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>缠缠绵绵<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>到我家<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n    \n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>footer</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-card</span><span class="token punctuation">></span></span>这页脚<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-card</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>zujian</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n    <span class="token comment">//注册一个全局的组件</span>\n    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">\'zujian\'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div>\n         &lt;header>\n          &lt;slot name="header">&lt;/slot>\n         &lt;/header>\n\n         &lt;main>\n          &lt;slot>&lt;/slot>\n         &lt;/main>\n\n         &lt;footer>\n         &lt;slot name="footer">&lt;/slot>\n         &lt;/footer>\n        &lt;/div></span><span class="token template-punctuation string">`</span></span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br></div></div><h4 id="_7-10-3-插槽作用域" tabindex="-1"><a class="header-anchor" href="#_7-10-3-插槽作用域" aria-hidden="true">#</a> 7-10-3.插槽作用域</h4>\n<blockquote>\n<p>插槽作用域的作用：方便父组件访问子组件的内容</p>\n</blockquote>\n<h5 id="简单案例" tabindex="-1"><a class="header-anchor" href="#简单案例" aria-hidden="true">#</a> 简单案例</h5>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n<span class="token comment">&lt;!--使用子组件的作用域插槽   这里的scope显示的是{ "kkl": "哈麻皮" }这样的一个对象--\x3e</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>zizujian</span><span class="token punctuation">></span></span>\n    <span class="token comment">&lt;!--2.父组件通过 slot-scope接收子组件传递过来的对象 { "kkl": "哈麻皮" }--\x3e</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot-scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>scope<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n        {{scope}}\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>zizujian</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n    <span class="token comment">//申明一个子组件</span>\n    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"zizujian"</span><span class="token punctuation">,</span><span class="token punctuation">{</span>\n        <span class="token comment">//1.在子组件的slot上使用v-bind的方式向父组件传递数据</span>\n        <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div> 子组件\n         &lt;slot :kkl="hamapi">&lt;/slot>\n        &lt;/div></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">return</span><span class="token punctuation">{</span>\n                <span class="token literal-property property">hamapi</span><span class="token operator">:</span><span class="token string">"哈麻皮"</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210913004713486" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210913004713486.png" data="aurora"></p>\n<h5 id="较为复杂的案例" tabindex="-1"><a class="header-anchor" href="#较为复杂的案例" aria-hidden="true">#</a> 较为复杂的案例</h5>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210506004202548" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210506004202548.png" data="aurora"></p>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>chacao</span> <span class="token attr-name">:doglist</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>doglist<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token comment">&lt;!-- 指定插槽的值的操作范围 这个scopeValue只是个变量名 --\x3e</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot-scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>scopeValue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n      <span class="token comment">&lt;!-- 指定操作条件 --\x3e</span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>scopeValue.kkl.id %2 ==0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{scopeValue.kkl.name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-else</span><span class="token punctuation">></span></span>{{scopeValue.kkl.name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>chacao</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n  <span class="token comment">//定义一个插槽</span>\n  Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">\'chacao\'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>\n    <span class="token literal-property property">props</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">\'doglist\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"> &lt;div>&lt;ul>\n      &lt;li v-for="item in doglist" :key="item.id">\n        &lt;slot :kkl="item">\n          {{item.name}}\n        &lt;/slot>\n      &lt;/li>\n    &lt;/ul>&lt;/div> </span><span class="token template-punctuation string">`</span></span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">doglist</span><span class="token operator">:</span><span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n          <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">\'小泉\'</span><span class="token punctuation">,</span>\n          <span class="token literal-property property">id</span><span class="token operator">:</span><span class="token number">1</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">{</span>\n          <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">\'小野寺梨纱\'</span><span class="token punctuation">,</span>\n          <span class="token literal-property property">id</span><span class="token operator">:</span><span class="token number">2</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">{</span>\n          <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">\'长濑茜\'</span><span class="token punctuation">,</span>\n          <span class="token literal-property property">id</span><span class="token operator">:</span><span class="token number">3</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">{</span>\n          <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">\'麻生希\'</span><span class="token punctuation">,</span>\n          <span class="token literal-property property">id</span><span class="token operator">:</span><span class="token number">4</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">{</span>\n          <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">\'北原多香子\'</span><span class="token punctuation">,</span>\n          <span class="token literal-property property">id</span><span class="token operator">:</span><span class="token number">5</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br></div></div><p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210506012434509" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210506012434509.png" data="aurora"></p>\n<h3 id="_7-11-组件的嵌套" tabindex="-1"><a class="header-anchor" href="#_7-11-组件的嵌套" aria-hidden="true">#</a> 7-11.组件的嵌套</h3>\n<blockquote>\n<p>一个组件里面可以嵌套另外的组件</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210507151206985" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210507151206985.png" data="aurora"></p>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>zujian</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>zujian</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n    <span class="token comment">//创建一个组件  将一个组件套入到另一个组件</span>\n    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">\'zujian\'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div>\n        &lt;el-card>我是一只小小小鸟&lt;/el-card>\n        &lt;wu>&lt;/wu>\n        &lt;/div></span><span class="token template-punctuation string">`</span></span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">\'wu\'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div>\n        &lt;el-card>我就不同了,我的鸟比较大&lt;/el-card>\n        &lt;/div></span><span class="token template-punctuation string">`</span></span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h3 id="_7-12-组件复用案例-购物车" tabindex="-1"><a class="header-anchor" href="#_7-12-组件复用案例-购物车" aria-hidden="true">#</a> 7-12.组件复用案例：购物车</h3>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>zujian</span> <span class="token attr-name">:price</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>appPrice<span class="token punctuation">"</span></span> <span class="token attr-name">@tijiaors</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>countRs<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>zujian</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>zujian</span> <span class="token attr-name">:price</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parPrice<span class="token punctuation">"</span></span> <span class="token attr-name">@tijiaors</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>countRs<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>zujian</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>总价:{{totalPrice}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n    <span class="token comment">//定义组件</span>\n    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">\'zujian\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n          &lt;div>\n          &lt;el-row>\n            &lt;el-col style="display: flex">\n              花椒 单价:{{ price }}\n              数量\n              &lt;el-button @click="addNum">+&lt;/el-button>\n              &lt;el-input style="width: 80px" v-model="num">&lt;/el-input>\n              &lt;el-button @click="subNum">-&lt;/el-button>\n              总价: {{ rs }}\n            &lt;/el-col>\n          &lt;/el-row>\n          &lt;/div></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n        <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'price\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token punctuation">{</span>\n                <span class="token literal-property property">num</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">computed</span><span class="token operator">:</span><span class="token punctuation">{</span>\n            <span class="token comment">//根据价格和数量计算rs的值</span>\n          <span class="token function">rs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n              <span class="token keyword">return</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>num<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>price\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">watch</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n            <span class="token comment">//根据rs的变化,提交新值和旧值</span>\n            <span class="token function">rs</span><span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span> oldValue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newValue<span class="token punctuation">,</span>oldValue<span class="token punctuation">)</span>\n                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">\'tijiaors\'</span><span class="token punctuation">,</span> oldValue<span class="token punctuation">,</span> newValue<span class="token punctuation">)</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n            <span class="token function">addNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">this</span><span class="token punctuation">.</span>num<span class="token operator">++</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token function">subNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">this</span><span class="token punctuation">.</span>num<span class="token operator">--</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n            <span class="token comment">//app的单价</span>\n            <span class="token literal-property property">appPrice</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>\n            <span class="token comment">//par的单价</span>\n            <span class="token literal-property property">parPrice</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>\n            <span class="token literal-property property">totalPrice</span><span class="token operator">:</span> <span class="token number">0</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n            <span class="token comment">//父组件减去旧值,再加上新值,然后赋值给总价</span>\n            <span class="token function">countRs</span><span class="token punctuation">(</span><span class="token parameter">oldValue<span class="token punctuation">,</span> newValue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n               <span class="token keyword">this</span><span class="token punctuation">.</span>totalPrice <span class="token operator">=</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>totalPrice <span class="token operator">-</span> oldValue <span class="token operator">+</span> newValue\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br></div></div><h2 id="_8-vue路由" tabindex="-1"><a class="header-anchor" href="#_8-vue路由" aria-hidden="true">#</a> 8.VUE路由</h2>\n<h3 id="_8-0-路由原理" tabindex="-1"><a class="header-anchor" href="#_8-0-路由原理" aria-hidden="true">#</a> 8-0.路由原理</h3>\n<h4 id="_8-0-0-复习锚点知识" tabindex="-1"><a class="header-anchor" href="#_8-0-0-复习锚点知识" aria-hidden="true">#</a> 8-0.0.复习锚点知识</h4>\n<blockquote>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>\n<span class="token comment">&lt;!--1设置锚点链接--\x3e</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#hamapi<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点击直接跳转到哈麻皮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>\n<span class="token comment">&lt;!--设置锚点链接与锚点之间的阻拦--\x3e</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">width</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 2000px<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span> rebeccapurple</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token comment">&lt;!--1定义锚点--\x3e</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hamapi<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>这就是锚点<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div></blockquote>\n<h4 id="_8-0-1-使用vue组件知识自己实现一个路由" tabindex="-1"><a class="header-anchor" href="#_8-0-1-使用vue组件知识自己实现一个路由" aria-hidden="true">#</a> 8-0-1.使用vue组件知识自己实现一个路由</h4>\n<p>方式一：</p>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token comment">&lt;!--提供链接--\x3e</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>组件a<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#b<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>组件b<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#c<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>组件c<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>\n    <span class="token comment">&lt;!-- 按照链接里面的路径渲染组件 --\x3e</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>comment</span> <span class="token attr-name">:is</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>compName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>comment</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n    <span class="token comment">//1.定义组件</span>\n    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">\'zujianA\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div>组件a&lt;/div></span><span class="token template-punctuation string">`</span></span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">\'zujianB\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div>组件B&lt;/div></span><span class="token template-punctuation string">`</span></span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">\'zujianC\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div>组件C&lt;/div></span><span class="token template-punctuation string">`</span></span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n    <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n            <span class="token literal-property property">compName</span><span class="token operator">:</span> <span class="token string">"zujianA"</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">//监听hash的变化       当hash变化后，触发此函数</span>\n            window<span class="token punctuation">.</span><span class="token function-variable function">onhashchange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n                <span class="token comment">//从location中取出hash</span>\n                <span class="token keyword">const</span> hash <span class="token operator">=</span> location<span class="token punctuation">.</span>hash\n                <span class="token comment">//申明路由对象，直接一个对象就是一个键值对</span>\n                <span class="token keyword">let</span> routers <span class="token operator">=</span> <span class="token punctuation">{</span>\n                    <span class="token string-property property">"#a"</span><span class="token operator">:</span> <span class="token string">\'zujianA\'</span><span class="token punctuation">,</span>\n                    <span class="token string-property property">"#b"</span><span class="token operator">:</span> <span class="token string">\'zujianB\'</span><span class="token punctuation">,</span>\n                    <span class="token string-property property">"#c"</span><span class="token operator">:</span> <span class="token string">\'zujianC\'</span>\n                <span class="token punctuation">}</span>\n                <span class="token comment">//遍历对象的key</span>\n                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> routersKey <span class="token keyword">in</span> routers<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token comment">//如果hash的字符串和路由对象的key一致</span>\n                    <span class="token keyword">if</span> <span class="token punctuation">(</span>hash <span class="token operator">===</span> routersKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                        <span class="token comment">//就将这个key对应的value赋值给全局的组件名compName</span>\n                        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>compName <span class="token operator">=</span>  routers<span class="token punctuation">[</span>routersKey<span class="token punctuation">]</span>\n                    <span class="token punctuation">}</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br></div></div><p>方式二：</p>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token comment">&lt;!--提供链接--\x3e</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>组件a<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#b<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>组件b<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#c<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>组件c<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>\n    <span class="token comment">&lt;!-- 按照链接里面的路径渲染组件 --\x3e</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>comment</span> <span class="token attr-name">:is</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>compName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>comment</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n    <span class="token comment">//1.定义组件</span>\n    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">\'zujianA\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div>组件a&lt;/div></span><span class="token template-punctuation string">`</span></span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">\'zujianB\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div>组件B&lt;/div></span><span class="token template-punctuation string">`</span></span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">\'zujianC\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div>组件C&lt;/div></span><span class="token template-punctuation string">`</span></span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n    <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n            <span class="token literal-property property">compName</span><span class="token operator">:</span> <span class="token string">"zujianA"</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">//监听hash的变更事件    这里是hash变更后执行的函数</span>\n            window<span class="token punctuation">.</span><span class="token function-variable function">onhashchange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n                <span class="token comment">//从window.location中取出hash</span>\n                <span class="token keyword">const</span> hash <span class="token operator">=</span> location<span class="token punctuation">.</span>hash\n                <span class="token comment">//定义路由数组对象</span>\n                <span class="token keyword">let</span> router <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string-property property">"#a"</span><span class="token operator">:</span> <span class="token string">\'zujianA\'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string-property property">"#b"</span><span class="token operator">:</span> <span class="token string">\'zujianB\'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string-property property">"#c"</span><span class="token operator">:</span> <span class="token string">\'zujianC\'</span><span class="token punctuation">}</span><span class="token punctuation">]</span>\n                <span class="token comment">//声明组件名字</span>\n                <span class="token keyword">let</span> zujianName<span class="token punctuation">;</span>\n                <span class="token comment">//遍历路由对象数组</span>\n                router<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n                    <span class="token comment">//从每个路由对象中拿出key</span>\n                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> itemKey <span class="token keyword">in</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                        <span class="token comment">//判断key和hash是否一致</span>\n                        <span class="token keyword">if</span> <span class="token punctuation">(</span>itemKey <span class="token operator">===</span> hash<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                            <span class="token comment">//如果key和hash一致，就将key对应的value赋值给组件名</span>\n                            zujianName <span class="token operator">=</span> item<span class="token punctuation">[</span>itemKey<span class="token punctuation">]</span>\n                        <span class="token punctuation">}</span>\n                    <span class="token punctuation">}</span>\n                <span class="token punctuation">}</span><span class="token punctuation">)</span>\n                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>zujianName<span class="token punctuation">)</span>\n                <span class="token comment">//将组件名赋值给vue的全局compName</span>\n                <span class="token keyword">this</span><span class="token punctuation">.</span>compName <span class="token operator">=</span> zujianName\n            <span class="token punctuation">}</span>          \n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br></div></div><h3 id="_8-1-路由概述" tabindex="-1"><a class="header-anchor" href="#_8-1-路由概述" aria-hidden="true">#</a> 8-1.路由概述</h3>\n<p>官方原文：</p>\n<p>用 Vue.js + Vue Router 创建单页应用，感觉很自然：使用 Vue.js ，我们已经可以通过组合组件来组成应用程序，当你要把 Vue Router 添加进来，我们需要做的是，将组件 (components) 映射到路由 (routes)，然后告诉 Vue Router 在哪里渲染它们。</p>\n<blockquote>\n<p>要解决的问题：更加方便的创建单页面应用</p>\n<p>创建方式： 1引入vue.js &gt;&gt;&gt; 2引入VueRouter&gt;&gt;&gt;&gt;3创建路由组件&gt;&gt;&gt;&gt;4创建VueRouter实例&gt;&gt;&gt;在VueRouter里面</p>\n</blockquote>\n<h4 id="前后端路由的差别" tabindex="-1"><a class="header-anchor" href="#前后端路由的差别" aria-hidden="true">#</a> 前后端路由的差别：</h4>\n<blockquote>\n<p>后端路由：\n根据不同的URL请求，返回不同的服务器资源---增加服务器负荷，导致性能问题\n前端路由：\n根据不同的用户事件，显示不同的页面内容(显示的是不同的组件，路由的本质就是把不同的组件回显给不同的用户事件)\n采用前端路由，可以解决ajax技术导致的浏览器不支持前进后退的问题，实现单页面应用程序(SPA)，也就是整个网站只有一个页面，不过这种技术不利于提高SEO，不利于商业推广</p>\n</blockquote>\n<h4 id="路由的渲染原理" tabindex="-1"><a class="header-anchor" href="#路由的渲染原理" aria-hidden="true">#</a> 路由的渲染原理：-</h4>\n<blockquote>\n<p>vue-router.js渲染的原理\n1、router-link 这个标签会被渲染为a标签\n2、router-link 的to属性会被渲染为href属性\n3、router-link 的to属性的值会被渲染为herf属性的值，就是以#开头的hash地址</p>\n</blockquote>\n<h3 id="_8-2-定义一个基本的路由" tabindex="-1"><a class="header-anchor" href="#_8-2-定义一个基本的路由" aria-hidden="true">#</a> 8-2.定义一个基本的路由</h3>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code>1、引入vue.js后引入vue-router\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../js/vue-router.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\n2、定义路由组件\n//1、定义路由组件\nconst biaoyu1 = {\n    template: `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>天大地大,明教最大<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>`\n}\nconst baioyu2 = {\n    template: ` <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>红莲圣火,燃我残躯<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>  `\n}\n\n3、配置路由规则，创建路由实例\n//2、配置路由规则创建路由实例\nlet router = new VueRouter({\n    //配置规则数组  注意 这个单词容易写错\n    routes: [\n        {path: \'/baioyu1\', component: biaoyu1},\n        {path: \'/baioyu2\', component: baioyu2}\n    ]\n});\n\n4、把路由器挂载到根实例中\nconst app = new Vue({\n    el: "#app",\n    data: {},\n    //3挂载路由  如果属性名与属性值一值,可以只写一个\n    router\n})\n\n5、添加路由链接\n<span class="token comment">&lt;!-- 配置好路由组件,并且把路由规则搞出来后,并挂载上去之后,就可以在这里添加路由链接了--\x3e</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/baioyu1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点击我看星星<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/baioyu2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点击我看月亮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>\n6、设置路由占位符----就是路由内容要渲染的位置\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">border</span><span class="token punctuation">:</span> 1px solid red<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 100px</span><span class="token punctuation">"</span></span></span> <span class="token punctuation">></span></span>\n<span class="token comment">&lt;!-- 这是使用路由的最后一步 就是让路由的内容显示到这里--\x3e</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br></div></div><h3 id="_8-3-路由重定向" tabindex="-1"><a class="header-anchor" href="#_8-3-路由重定向" aria-hidden="true">#</a> 8-3.路由重定向</h3>\n<blockquote>\n<p>应用场景：比如说我们的很多项目有个根路径“/”,但是我们希望用户一进来根路径，就可以看到“/home”里面的东西展示到页面，而不是看到一个白板，这个时候就要用到路由重定向</p>\n</blockquote>\n<p>官方说法：就是访问一个路径的时候，其实是强制跳转到另一个路径的，这样就可以展示特定组件的内容了。</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210506121027434" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210506121027434.png" data="aurora"></p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210506121129967" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210506121129967.png" data="aurora"></p>\n<h3 id="_8-4-编程式导航" tabindex="-1"><a class="header-anchor" href="#_8-4-编程式导航" aria-hidden="true">#</a> 8-4.编程式导航</h3>\n<blockquote>\n<p>导航定义：\n就是从一个路由组件跳转到另一个路由组件的行为\n导航的方式：\n申明式导航：比如a标签跳转，<code>&lt;router-link&gt;</code>方式跳转，都是由明确的申明的\n编程式导航：比如调用 location.href 的方式进行跳转，这都是通过调用js的API实现导航的</p>\n<p>VueRouter中的编程式导航的API\nthis.$router.push(\'跳转路径\')  -------------跳转到别的地方\nthis.$router.go(\'数字\')            ------跳转到浏览器里面有记录的地方   负数就是往回调，正数就是往后跳，但跳转的地方必须在浏览器里面有记录</p>\n</blockquote>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token comment">&lt;!--此处的to必须加上 v-bind ,否则无法将后面的对象读取出来--\x3e</span>\n <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{name:<span class="token punctuation">\'</span>a<span class="token punctuation">\'</span>}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>到a<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>\n <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{name:<span class="token punctuation">\'</span>b<span class="token punctuation">\'</span>}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>到b<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n    <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div>\n      &lt;el-button type="danger" @click="gob">点击到b&lt;/el-button>\n      &lt;/div></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n      <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>\n        <span class="token function">gob</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n          <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"/b"</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div>\n      &lt;el-button type="danger" @click="goa">点击到a&lt;/el-button>\n      &lt;/div></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n      <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>\n        <span class="token function">goa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n          <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"/a"</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n   <span class="token keyword">const</span> router <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n     <span class="token literal-property property">routes</span><span class="token operator">:</span><span class="token punctuation">[</span>\n       <span class="token punctuation">{</span><span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">"/a"</span><span class="token punctuation">,</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token literal-property property">component</span><span class="token operator">:</span>a<span class="token punctuation">}</span><span class="token punctuation">,</span>\n       <span class="token punctuation">{</span><span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">"/b"</span><span class="token punctuation">,</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token literal-property property">component</span><span class="token operator">:</span>b<span class="token punctuation">}</span><span class="token punctuation">,</span>\n     <span class="token punctuation">]</span>\n   <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n      router\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br></div></div><h3 id="_8-5-路由传参" tabindex="-1"><a class="header-anchor" href="#_8-5-路由传参" aria-hidden="true">#</a> 8-5.路由传参</h3>\n<blockquote>\n<p>应用场景：\n当我们需要在父组件向路由组件跳转的时候，就需要传递参数过去，比如说：我们点击一个按钮，要带信息查询一些数据显示到展示区的时候，父组件的参数就要一起传给子组件，在子组件处于created阶段的时候，就带着信息去数据库查询数据，查询到数据后，展示出来</p>\n</blockquote>\n<h4 id="_8-5-1-传统的-键值对传参" tabindex="-1"><a class="header-anchor" href="#_8-5-1-传统的-键值对传参" aria-hidden="true">#</a> 8-5-1.传统的?+键值对传参</h4>\n<blockquote>\n<p>传值：&lt;router-link to=&quot;/path?键=值&quot;          取值：  $route.query.键    这个耦合比较高，少用</p>\n<p>1.用传统的方式传参,并不影响路由的跳转\n2.通过uri传入的键值对,存放在当前路由的query对象里面,通过this.$route.query可以取到所有键值对的集合</p>\n</blockquote>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/hamapi?name=2233<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点击看蛤蟆皮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span>\n    //创建路由组件\n    const hamapi = {\n        template: `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n        哈哈\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>`,\n        //路由组件的本质就是组件,组件的本质就是vue实例,所以路由组件也有路由组件的生命周期\n        created() {\n            console.log("路由组件")\n            console.log(this)\n            //可以发现这个this.$route里面有一堆东西\n            console.log(this.$route.query)\n        }\n    }\n    //注册路由\n    const router = new VueRouter({\n        //指定路由规则\n        routes: [\n            {path: "/hamapi", component: hamapi}\n        ]\n    })\n    const vm = new Vue({\n        el: "#app",\n        data: {},\n        mounted() {\n            console.log("实例")\n            console.log(this)\n        },\n        router\n    })\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div><h4 id="_8-5-2-params占位符传参" tabindex="-1"><a class="header-anchor" href="#_8-5-2-params占位符传参" aria-hidden="true">#</a> 8-5-2.params占位符传参</h4>\n<blockquote>\n<p>传值  &lt;router-link to=&quot;/path/:占位&quot;             取值： $route.params.占位    这个耦合比较高，少用</p>\n<p>1.要想通过restful风格带参访问子路由，则必须在路由规则的path里面申明占位符，用:占位</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210506122403389" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210506122403389.png" data="aurora"></p>\n<h4 id="_8-5-3-props-true-传参" tabindex="-1"><a class="header-anchor" href="#_8-5-3-props-true-传参" aria-hidden="true">#</a> 8-5-3.{props:true}传参</h4>\n<blockquote>\n<p>布尔模式  通过设置props:true 解耦，可以像正常组件一样传参</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210506122523250" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210506122523250.png" data="aurora"></p>\n<h4 id="_8-5-4-props-对象-传参" tabindex="-1"><a class="header-anchor" href="#_8-5-4-props-对象-传参" aria-hidden="true">#</a> 8-5-4.{props:{对象}}传参</h4>\n<blockquote>\n<p>对象模式，可以像正常组件一样传参</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210506122609238" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210506122609238.png" data="aurora"></p>\n<h4 id="_8-5-5-函数模式传参" tabindex="-1"><a class="header-anchor" href="#_8-5-5-函数模式传参" aria-hidden="true">#</a> 8-5-5.函数模式传参</h4>\n<blockquote>\n<p>函数模式，传动态对象</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210506122644831" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210506122644831.png" data="aurora"></p>\n<h4 id="_8-5-6-总结" tabindex="-1"><a class="header-anchor" href="#_8-5-6-总结" aria-hidden="true">#</a> 8-5-6.总结</h4>\n<blockquote>\n<p>以上所有的传参方式，首推props的函数模式，因为它既能从restful风格的URI里面取值，又能从对象里面取值，同时还能解耦.</p>\n<p>5-1和5-2有耦合度高的问题，</p>\n<p>5-3只能读取restful风格里面的传参</p>\n<p>5-4不能读取restful风格的URI里面的传参</p>\n<p>5-5是完美的</p>\n</blockquote>\n<h3 id="_8-6-嵌套路由" tabindex="-1"><a class="header-anchor" href="#_8-6-嵌套路由" aria-hidden="true">#</a> 8-6.嵌套路由</h3>\n<blockquote>\n<p>应用场景：\n当我们进入一个页面的时候，只需要用户看到几个大的模块化的分类，而不应该让用户看到所有的分类细节，例如我们做的思维导图笔记，点击一个，可以弹出下面的一系列的东西，不点击就不展示。</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210508002918455" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210508002918455.png" data="aurora"></p>\n<p>实现方式：</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210508003023155" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210508003023155.png" data="aurora"></p>\n<p>具体代码</p>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token comment">&lt;!--父路由--\x3e</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>弓箭手<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/b<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>法师团<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n    <span class="token comment">//定义父级路由模块</span>\n    <span class="token keyword">const</span> routerA <span class="token operator">=</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"> &lt;div>\n           &lt;div>弓箭营&lt;/div>\n           &lt;router-link to="/a/a1">火系弓箭手&lt;/router-link>\n           &lt;router-link to="/a/a2">冰系弓箭手&lt;/router-link>\n           &lt;router-link to="/a/a3">强弩手&lt;/router-link>\n           &lt;div style="border: 1px solid red;width: 300px;height: 100px">\n             &lt;router-view>&lt;/router-view>\n           &lt;/div>\n          &lt;/div> </span><span class="token template-punctuation string">`</span></span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">const</span> routerB <span class="token operator">=</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div>\n          &lt;div>法师营&lt;/div>\n           &lt;router-link to="/b/b1">五行法师&lt;/router-link>\n           &lt;router-link to="/b/b2">亡灵法师&lt;/router-link>\n           &lt;router-link to="/b/b3">剧毒法师&lt;/router-link>\n           &lt;div style="border: 1px solid red;width: 300px;height: 100px">\n             &lt;router-view>&lt;/router-view>\n           &lt;/div>\n         &lt;/div> </span><span class="token template-punctuation string">`</span></span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">//定义次级路由模块</span>\n    <span class="token keyword">const</span> routerAa1 <span class="token operator">=</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div> &lt;p>火系弓箭手,英勇无敌&lt;/p> &lt;/div></span><span class="token template-punctuation string">`</span></span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">const</span> routerAa2 <span class="token operator">=</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div> &lt;p>冰系弓箭手,神勇无双&lt;/p> &lt;/div></span><span class="token template-punctuation string">`</span></span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">const</span> routerAa3 <span class="token operator">=</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div> &lt;p>强弩手,火力强劲&lt;/p> &lt;/div></span><span class="token template-punctuation string">`</span></span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">const</span> routerBb1 <span class="token operator">=</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div> &lt;p>五行法师,能力诡异&lt;/p> &lt;/div></span><span class="token template-punctuation string">`</span></span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">const</span> routerBb2 <span class="token operator">=</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div> &lt;p>亡灵法师,与骷髅为伍&lt;/p> &lt;/div></span><span class="token template-punctuation string">`</span></span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">const</span> routerBb3 <span class="token operator">=</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div> &lt;p>剧毒法师,毒术无双&lt;/p> &lt;/div></span><span class="token template-punctuation string">`</span></span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">//注册路由组件</span>\n    <span class="token keyword">let</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">routes</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n            <span class="token punctuation">{</span>\n                <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">\'/a\'</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> routerA<span class="token punctuation">,</span> <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n                    <span class="token punctuation">{</span><span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">\'/a/a1\'</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> routerAa1<span class="token punctuation">}</span><span class="token punctuation">,</span>\n                    <span class="token punctuation">{</span><span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">\'/a/a2\'</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> routerAa2<span class="token punctuation">}</span><span class="token punctuation">,</span>\n                    <span class="token punctuation">{</span><span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">\'/a/a3\'</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> routerAa3<span class="token punctuation">}</span><span class="token punctuation">,</span>\n                <span class="token punctuation">]</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token punctuation">{</span>\n                <span class="token comment">//在配置路由路线规则的时候,配置children属性,在里面写一堆子组件即可</span>\n                <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">\'/b\'</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> routerB<span class="token punctuation">,</span> <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n                    <span class="token punctuation">{</span><span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">\'/b/b1\'</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> routerBb1<span class="token punctuation">}</span><span class="token punctuation">,</span>\n                    <span class="token punctuation">{</span><span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">\'/b/b2\'</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> routerBb2<span class="token punctuation">}</span><span class="token punctuation">,</span>\n                    <span class="token punctuation">{</span><span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">\'/b/b3\'</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> routerBb3<span class="token punctuation">}</span><span class="token punctuation">,</span>\n                <span class="token punctuation">]</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">]</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\n    <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token comment">//将路由挂载到实例</span>\n        router\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br></div></div><h3 id="_8-7-命名路由" tabindex="-1"><a class="header-anchor" href="#_8-7-命名路由" aria-hidden="true">#</a> 8-7.命名路由</h3>\n<blockquote>\n<p>要解决的问题：</p>\n<p>不记得或者不想写路由的路径，这个时候就可以给<code>&lt;router-link &gt;</code>的to属性传入一个对象，在传入对象的同时，也可以进行传参，传参要解耦，得在路由规则里面配置<code>props:true</code>, 如果传入query对象，<code>this.$route.query</code>仍可读取query里面的东西</p>\n</blockquote>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token comment">&lt;!--注意,组件名必须是字符串--\x3e</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{name:<span class="token punctuation">\'</span>denglu<span class="token punctuation">\'</span>,query:{<span class="token punctuation">\'</span>hamapi<span class="token punctuation">\'</span>:<span class="token punctuation">\'</span>哈麻皮<span class="token punctuation">\'</span>}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{name:<span class="token punctuation">\'</span>zhuce<span class="token punctuation">\'</span>}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>注册<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>\n  <span class="token comment">&lt;!--出口--\x3e</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n  <span class="token comment">//定义路由组件</span>\n  <span class="token keyword">const</span> denglu <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div>登录&lt;/div></span><span class="token template-punctuation string">`</span></span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">const</span> zhuce <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div>注册&lt;/div></span><span class="token template-punctuation string">`</span></span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">//实例化路由</span>\n  <span class="token keyword">const</span>  router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token comment">//定义路由规则</span>\n    <span class="token literal-property property">routes</span><span class="token operator">:</span><span class="token punctuation">[</span>\n            <span class="token comment">/*注意,被命名的路由必须是字符串*/</span>\n      <span class="token punctuation">{</span><span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">"/denglu"</span><span class="token punctuation">,</span><span class="token literal-property property">component</span><span class="token operator">:</span>denglu<span class="token punctuation">,</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">\'denglu\'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">{</span><span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">"/zhuce"</span><span class="token punctuation">,</span><span class="token literal-property property">component</span><span class="token operator">:</span> zhuce<span class="token punctuation">,</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">\'zhuce\'</span><span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n        router\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><h3 id="_8-8-命名视图" tabindex="-1"><a class="header-anchor" href="#_8-8-命名视图" aria-hidden="true">#</a> 8-8.命名视图</h3>\n<blockquote>\n<p>要解决的问题：</p>\n<p>使用同一个路径，跳转不同的视图，比如路径为&quot;/&quot;的时候，要展示侧边栏，头部，尾部，主视图</p>\n</blockquote>\n<p>页面结构</p>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n<span class="token comment">&lt;!--入口--\x3e</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>\n    <span class="token comment">&lt;!--出口--\x3e</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tou<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>zhuye<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>leftsider<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rightsider<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wei<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n    <span class="token comment">//定义路由</span>\n    <span class="token keyword">const</span> tou <span class="token operator">=</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div class="tou">头部&lt;/div></span><span class="token template-punctuation string">`</span></span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">const</span> wei <span class="token operator">=</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div class="wei">尾部&lt;/div></span><span class="token template-punctuation string">`</span></span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">const</span> leftsider <span class="token operator">=</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div class="leftsider">左侧&lt;/div></span><span class="token template-punctuation string">`</span></span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">const</span> rightsider <span class="token operator">=</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div class="rightsider">主视图&lt;/div></span><span class="token template-punctuation string">`</span></span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">//实例化路由,定义路由规则</span>\n    <span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token comment">//定义规则</span>\n        <span class="token literal-property property">routes</span><span class="token operator">:</span><span class="token punctuation">[</span>\n            <span class="token punctuation">{</span><span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">\'/\'</span><span class="token punctuation">,</span><span class="token literal-property property">components</span><span class="token operator">:</span><span class="token punctuation">{</span>\n                <span class="token keyword">default</span><span class="token operator">:</span>rightsider<span class="token punctuation">,</span>\n                    tou<span class="token punctuation">,</span>\n                    wei<span class="token punctuation">,</span>\n                    leftsider<span class="token punctuation">,</span>\n                    rightsider\n                <span class="token punctuation">}</span><span class="token punctuation">}</span>\n        <span class="token punctuation">]</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n        router\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br></div></div><p>样式</p>\n<div class="language-less ext-less line-numbers-mode"><pre v-pre class="language-less"><code><span class="token comment">/*样式*/</span>\n<span class="token selector">.tou</span><span class="token punctuation">{</span>\n  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>\n   <span class="token property">background</span><span class="token punctuation">:</span> darkmagenta<span class="token punctuation">;</span>\n  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>\n  <span class="token property">align-self</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token selector">.zhuye</span><span class="token punctuation">{</span>\n  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>\n  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>\n  <span class="token selector">.leftsider</span><span class="token punctuation">{</span>\n    <span class="token property">flex</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>\n    <span class="token property">background</span><span class="token punctuation">:</span> #5daf34<span class="token punctuation">;</span>\n    <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token selector">.rightsider</span><span class="token punctuation">{</span>\n    <span class="token property">flex</span><span class="token punctuation">:</span> 9<span class="token punctuation">;</span>\n    <span class="token property">background</span><span class="token punctuation">:</span> #bcbec2<span class="token punctuation">;</span>\n    <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token selector">.wei</span><span class="token punctuation">{</span>\n  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> #f750c6<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><h3 id="_8-9-路由中监视当前路由的路径" tabindex="-1"><a class="header-anchor" href="#_8-9-路由中监视当前路由的路径" aria-hidden="true">#</a> 8-9.路由中监视当前路由的路径</h3>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n<span class="token comment">&lt;!--7设置路由链接--\x3e</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">active-class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hamapi<span class="token punctuation">"</span></span> <span class="token attr-name">tag</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span>  <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/login<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span>\n    <span class="token comment">&lt;!--8设置路由出口--\x3e</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n    <span class="token comment">//3定义一个路由组件</span>\n    <span class="token keyword">const</span> luyou1 <span class="token operator">=</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div>这是个路由组件&lt;/div></span><span class="token template-punctuation string">`</span></span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">//4实例化路由</span>\n    <span class="token keyword">let</span> router <span class="token operator">=</span> <span class="token keyword">new</span>  <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token comment">//5.定义路由规则</span>\n        <span class="token literal-property property">routes</span><span class="token operator">:</span><span class="token punctuation">[</span>\n            <span class="token punctuation">{</span><span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">"/login"</span><span class="token punctuation">,</span><span class="token literal-property property">component</span><span class="token operator">:</span>luyou1<span class="token punctuation">}</span>\n        <span class="token punctuation">]</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n    <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token comment">//6.挂载路由</span>\n        router<span class="token punctuation">,</span>\n        <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token comment">//这里是刷新的时候就可以监视得到</span>\n            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"mounted中监视到的当前路由的路径:  "</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>path<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">watch</span><span class="token operator">:</span><span class="token punctuation">{</span>\n            <span class="token comment">//监视当前路由的路径===这种监视,只能是在切换的瞬间才能监视得到</span>\n           <span class="token string-property property">\'$route.path\'</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">newValue</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">{</span>\n               console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"watch侦听器中监视到的当前路由的路径: "</span><span class="token punctuation">,</span>newValue<span class="token punctuation">)</span>\n           <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br></div></div><h2 id="_9-前端工程化" tabindex="-1"><a class="header-anchor" href="#_9-前端工程化" aria-hidden="true">#</a> 9.前端工程化</h2>\n<h3 id="各种方式搭建脚手架" tabindex="-1"><a class="header-anchor" href="#各种方式搭建脚手架" aria-hidden="true">#</a> 各种方式搭建脚手架</h3>\n<h4 id="_1使用命令行创建项目" tabindex="-1"><a class="header-anchor" href="#_1使用命令行创建项目" aria-hidden="true">#</a> 1使用命令行创建项目</h4>\n<blockquote>\n<p>官网资料：https://cli.vuejs.org/zh/guide/prototyping.html</p>\n</blockquote>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token comment">#安装vue-cli</span>\n<span class="token function">npm</span> <span class="token function">install</span> -g @vue/cli\n<span class="token comment">#安装完毕可以通过 vue --version查看版本号，不要纠结具体的版本号，因为这里的版本经常更新，每次都不一样</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210513103209616" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210513103209616.png" data="aurora"></p>\n<blockquote>\n<p>使用：\n1、在一个空的文件夹，按住shift+鼠标右键，选择在此处打开powershell</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210513103652342" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210513103652342.png" data="aurora"></p>\n<blockquote>\n<p>2、输入    vue create  工程名(只能小写)</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210513103902067" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210513103902067.png" data="aurora"></p>\n<blockquote>\n<p>3、选择  后来的版本要求选择vue版本，就选2.x   回车，这里这个use history选n</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210513103940295" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210513103940295.png" data="aurora"></p>\n<blockquote>\n<p>4、创建成功\n可以按最下方提示的命令进入目录和启动项目</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210513104053079" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210513104053079.png" data="aurora"></p>\n<blockquote>\n<p>5、观察目录\n目录比vue-cli  2.xx这个版本更加精简</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210513104313944" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210513104313944.png" data="aurora"></p>\n<blockquote>\n<p>6、npm run serve  # 启动项目 这个是vue-cli 创建完毕后自己会提醒你的</p>\n<p>7、但是作为后台开发人员一般使用下面的方式</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210513104201661" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210513104201661.png" data="aurora"></p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210513104612115" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210513104612115.png" data="aurora"></p>\n<blockquote>\n<p>8、启动项目后，可以看到以下页面</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210513104753378" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210513104753378.png" data="aurora"></p>\n<h4 id="_2使用gui搭建脚手架" tabindex="-1"><a class="header-anchor" href="#_2使用gui搭建脚手架" aria-hidden="true">#</a> 2使用GUI搭建脚手架</h4>\n<blockquote>\n<p>不推荐这种方式，因为这种方式搭建的脚手架，容易出问题</p>\n</blockquote>\n<blockquote>\n<p>1在命令行输入指令  vue  ui</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210513105015914" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210513105015914.png" data="aurora"></p>\n<blockquote>\n<p>2然后一路跟着提示往下操作即可，注意，使用webstrom开发的话，就不要选择eslint了</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210513105101375" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210513105101375.png" data="aurora"></p>\n<h4 id="_3使用idea-webstorm等jetbrains系列软件搭建脚手架" tabindex="-1"><a class="header-anchor" href="#_3使用idea-webstorm等jetbrains系列软件搭建脚手架" aria-hidden="true">#</a> 3使用IDEA webstorm等jetbrains系列软件搭建脚手架</h4>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210513105353026" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210513105353026.png" data="aurora"></p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210513105410370" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210513105410370.png" data="aurora"></p>\n<h4 id="_4使用hbuilder创建搭建脚手架" tabindex="-1"><a class="header-anchor" href="#_4使用hbuilder创建搭建脚手架" aria-hidden="true">#</a> 4使用HBuilder创建搭建脚手架</h4>\n<blockquote>\n<p>直接使用HBuilderX，创建一个工程，然后使用IDEA或者webstorm打开</p>\n</blockquote>\n<h4 id="_5使用powershell的时候的坑" tabindex="-1"><a class="header-anchor" href="#_5使用powershell的时候的坑" aria-hidden="true">#</a> 5使用POWERSHELL的时候的坑</h4>\n<blockquote>\n<p>如果出现以下画面，就表明powershell没有操作权限</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210513105616040" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210513105616040.png" data="aurora"></p>\n<blockquote>\n<p>处理方法：</p>\n<p>1.随便找个文件夹，点击文件，以管理员身份打开powershell</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210513105647789" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210513105647789.png" data="aurora"></p>\n<blockquote>\n<p>2.输入指令： set-ExecutionPolicy RemoteSigned</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210513105747953" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210513105747953.png" data="aurora"></p>\n<h3 id="vue脚手架目录说明" tabindex="-1"><a class="header-anchor" href="#vue脚手架目录说明" aria-hidden="true">#</a> vue脚手架目录说明</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210513150835320" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210513150835320.png" data="aurora"></p>\n<h3 id="_9-0-项目基础配置" tabindex="-1"><a class="header-anchor" href="#_9-0-项目基础配置" aria-hidden="true">#</a> 9-0.项目基础配置</h3>\n<p>官方原文</p>\n<p>https://cli.vuejs.org/zh/config/#vue-config-js</p>\n<blockquote>\n<p><code>vue.config.js</code> 是一个可选的配置文件，如果项目的 (和 <code>package.json</code> 同级的) 根目录中存在这个文件，那么它会被 <code>@vue/cli-service</code> 自动加载。你也可以使用 <code>package.json</code> 中的 <code>vue</code> 字段，但是注意这种写法需要你严格遵照 JSON 的格式来写。</p>\n</blockquote>\n<p>范例代码---vue.config.js</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">//导出模块</span>\nmodule<span class="token punctuation">.</span>exports<span class="token operator">=</span><span class="token punctuation">{</span>\n    <span class="token comment">//开发时的配置</span>\n    <span class="token literal-property property">devServer</span><span class="token operator">:</span><span class="token punctuation">{</span>\n        <span class="token comment">//指定端口号</span>\n        <span class="token literal-property property">port</span><span class="token operator">:</span><span class="token number">9000</span><span class="token punctuation">,</span>\n        <span class="token comment">//自动打开默认浏览器</span>\n        <span class="token literal-property property">open</span><span class="token operator">:</span><span class="token boolean">true</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="_9-1-导入less" tabindex="-1"><a class="header-anchor" href="#_9-1-导入less" aria-hidden="true">#</a> 9-1.导入less</h3>\n<blockquote>\n<p>一般的方式不能导入less，因为版本不匹配，以下版本的less可以正常匹配 @vue/cli 4.5.11</p>\n<p>命令行：</p>\n</blockquote>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> less-loader@5.0.0 -s\n<span class="token function">npm</span> <span class="token function">install</span> less@3.9.0 -s\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><blockquote>\n<p>main.js</p>\n</blockquote>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">import</span> less <span class="token keyword">from</span> <span class="token string">\'less\'</span>\nVue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>less<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><blockquote>\n<p>vue单文件组件</p>\n</blockquote>\n<div class="language-vue ext-vue line-numbers-mode"><pre v-pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>less<span class="token punctuation">"</span></span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">\n<span class="token comment">/* lang是所用的语言   scoped表示只在当前组件生效 */</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_9-2-导入element" tabindex="-1"><a class="header-anchor" href="#_9-2-导入element" aria-hidden="true">#</a> 9-2.导入element</h3>\n<blockquote>\n<p>控制台</p>\n</blockquote>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token function">npm</span> i element-ui -S\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><blockquote>\n<p>main.js</p>\n</blockquote>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">import</span> ElementUI <span class="token keyword">from</span> <span class="token string">\'element-ui\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token string">\'element-ui/lib/theme-chalk/index.css\'</span><span class="token punctuation">;</span>\nVue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>ElementUI<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_9-3-两种不同的组件配置" tabindex="-1"><a class="header-anchor" href="#_9-3-两种不同的组件配置" aria-hidden="true">#</a> 9-3.两种不同的组件配置</h3>\n<h4 id="_9-3-1-显示路由组件" tabindex="-1"><a class="header-anchor" href="#_9-3-1-显示路由组件" aria-hidden="true">#</a> 9-3-1.显示路由组件</h4>\n<blockquote>\n<p>编写组件</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210513165615517" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210513165615517.png" data="aurora"></p>\n<blockquote>\n<p>将路由组件组装到路由器</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210513171036712" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210513171036712.png" data="aurora"></p>\n<h4 id="_9-3-2-显示普通组件" tabindex="-1"><a class="header-anchor" href="#_9-3-2-显示普通组件" aria-hidden="true">#</a> 9-3-2.显示普通组件</h4>\n<blockquote>\n<p>编写自定义组件</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210513165206156" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210513165206156.png" data="aurora"></p>\n<blockquote>\n<p>将自定义组件组装到视图</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210513165322013" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vue%E5%9F%BA%E7%A1%80/image-20210513165322013.png" data="aurora"></p>\n<h3 id="_9-4-较为全面的路由配置" tabindex="-1"><a class="header-anchor" href="#_9-4-较为全面的路由配置" aria-hidden="true">#</a> 9-4.较为全面的路由配置</h3>\n<blockquote>\n<p>下面是  /router/index.js   或者  router.js 里面的内容  这两种命名方式比较符合见名知意的规则</p>\n</blockquote>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">\'vue\'</span>\n<span class="token keyword">import</span> VueRouter <span class="token keyword">from</span> <span class="token string">\'vue-router\'</span>\n<span class="token keyword">import</span> Login <span class="token keyword">from</span> <span class="token string">"../views/Login"</span><span class="token punctuation">;</span>\n<span class="token comment">//引入home页面</span>\n<span class="token keyword">import</span> Home <span class="token keyword">from</span> <span class="token string">"../views/Home"</span><span class="token punctuation">;</span>\n<span class="token comment">//引入welcome组件</span>\n<span class="token keyword">import</span> Welcome <span class="token keyword">from</span> <span class="token string">"../components/Welcome"</span><span class="token punctuation">;</span>\n<span class="token comment">/*\n省略一大堆的其他组件的引入\n*/</span>\n\nVue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueRouter<span class="token punctuation">)</span>\n\n<span class="token comment">//配置路由规则</span>\n<span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span><span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token literal-property property">redirect</span><span class="token operator">:</span> <span class="token string">"/login"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span><span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/login"</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> Login<span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token comment">//将home添加到路由规则---下面就是个纯粹的单页面应用</span>\n    <span class="token punctuation">{</span>\n        <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/home"</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> Home<span class="token punctuation">,</span>\n        <span class="token literal-property property">redirect</span><span class="token operator">:</span> <span class="token string">"/welcome"</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n            <span class="token punctuation">{</span><span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">"/welcome"</span><span class="token punctuation">,</span><span class="token literal-property property">component</span><span class="token operator">:</span>Welcome<span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token comment">//配置用户管理的路由</span>\n            <span class="token punctuation">{</span><span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/users"</span><span class="token punctuation">,</span><span class="token literal-property property">component</span><span class="token operator">:</span> Users<span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token comment">/*\n            省略一大堆其他子路由的配置\n            */</span>\n        <span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">]</span>\n<span class="token comment">//命名实例化后的路由</span>\n<span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    routes\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token comment">//配置全局前置守卫 对请求进行拦截</span>\nrouter<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token comment">/*\n    * to: Route: 即将要进入的目标 路由对象\n      from: Route: 当前导航正要离开的路由\n      next: Function: 一定要调用该方法来 resolve 这个钩子。执行效果依赖 next 方法的调用参数。\n    * */</span>\n    <span class="token comment">//如果访问的是登陆页面,就直接放行</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>to<span class="token punctuation">.</span>path <span class="token operator">===</span> <span class="token string">"/login"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">//如果要访问其他页面,就先获取token,如果token不为空,就放行,否则就强制跳转到登录页面</span>\n    <span class="token keyword">const</span> token <span class="token operator">=</span> window<span class="token punctuation">.</span>sessionStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">\'token\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//判断token是否为空</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>token<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// Message.error("你没有登陆,无权访问本页面,已为你跳转到登陆页面")</span>\n        <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token string">"login"</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token comment">//dochain</span>\n        <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token comment">//导出路由</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> router\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br></div></div><blockquote>\n<p>main.js的路由相关处理</p>\n</blockquote>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">//从router文件引入路由</span>\n<span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">\'./router\'</span>\n<span class="token comment">//使用路由</span>\n<span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    router<span class="token punctuation">,</span>\n    <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token parameter">h</span> <span class="token operator">=></span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">\'#app\'</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>9-4.导入组件</p>\n<div class="language-vue ext-vue line-numbers-mode"><pre v-pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>\n<span class="token comment">&lt;!-- 为了确保单根性,这里直接在template标签里面放置DIV防止出错  --\x3e</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n    <span class="token comment">&lt;!-- 组件在这里使用  --\x3e</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jiacheng</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>jiacheng</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n<span class="token comment">//一个组件要想被使用,得先import进来</span>\n<span class="token keyword">import</span> Jiacheng <span class="token keyword">from</span> <span class="token string">"./components/Jiacheng"</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  <span class="token comment">/*这里面都是写vue的各种选项的,什么data,components,methods...之类的*/</span>\n  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">\'App\'</span><span class="token punctuation">,</span>\n  <span class="token comment">//components 里面放上面import 进来的组件</span>\n  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    Jiacheng\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>less<span class="token punctuation">"</span></span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">\n<span class="token comment">/*这里面都是写样式的 */</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div>',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/vue/vue.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"vue",filePath:"D:/blog/docs/vue/vue.md",filePathRelative:"vue/vue.md",componentFilePath:"D:/blog/docs/.vuepress/.temp/pages/vue/vue.html.vue",componentFilePathRelative:"pages/vue/vue.html.vue",componentFileChunkName:"v-13c9aef5",dataFilePath:"D:/blog/docs/.vuepress/.temp/pages/vue/vue.html.js",dataFilePathRelative:"pages/vue/vue.html.js",dataFileChunkName:"v-13c9aef5",htmlFilePath:"D:/blog/docs/.vuepress/dist/vue/vue.html",htmlFilePathRelative:"vue/vue.html"},{data:{key:"v-57ee40a5",path:"/vue/Vuex.html",title:"Vuex",lang:"zh-CN",frontmatter:{title:"Vuex",date:"2022/9/2 09:59",tag:["vuex"],categories:["前端"],coverUrl:"https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vuex/flow.png"},excerpt:"",headers:[{level:2,title:"1.概述",slug:"_1-概述",children:[{level:3,title:"1-0.回顾组件之间共享数据的方式",slug:"_1-0-回顾组件之间共享数据的方式",children:[]},{level:3,title:"1-1.Vuex是什么",slug:"_1-1-vuex是什么",children:[]},{level:3,title:"1-2.使用Vuex统一管理状态的好处",slug:"_1-2-使用vuex统一管理状态的好处",children:[]},{level:3,title:"1-3.Vuex中适合储存什么",slug:"_1-3-vuex中适合储存什么",children:[]}]},{level:2,title:"2.初识Vuex",slug:"_2-初识vuex",children:[{level:3,title:"2-1.创建项目",slug:"_2-1-创建项目",children:[]},{level:3,title:"2-2.使用webstorm打开项目",slug:"_2-2-使用webstorm打开项目",children:[]},{level:3,title:"2-3.删除无关页面about",slug:"_2-3-删除无关页面about",children:[]},{level:3,title:"2-4.新增两个页面",slug:"_2-4-新增两个页面",children:[]},{level:3,title:"2-5.state",slug:"_2-5-state",children:[]},{level:3,title:"2-6.mutations",slug:"_2-6-mutations",children:[]},{level:3,title:"2-7.actions",slug:"_2-7-actions",children:[]},{level:3,title:"2-8.getter",slug:"_2-8-getter",children:[]}]}],git:{}},key:"v-57ee40a5",path:"/vue/Vuex.html",title:"Vuex",lang:"zh-CN",frontmatter:{title:"Vuex",date:"2022/9/2 09:59",tag:["vuex"],categories:["前端"],coverUrl:"https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vuex/flow.png"},excerpt:"",headers:[{level:2,title:"1.概述",slug:"_1-概述",children:[{level:3,title:"1-0.回顾组件之间共享数据的方式",slug:"_1-0-回顾组件之间共享数据的方式",children:[]},{level:3,title:"1-1.Vuex是什么",slug:"_1-1-vuex是什么",children:[]},{level:3,title:"1-2.使用Vuex统一管理状态的好处",slug:"_1-2-使用vuex统一管理状态的好处",children:[]},{level:3,title:"1-3.Vuex中适合储存什么",slug:"_1-3-vuex中适合储存什么",children:[]}]},{level:2,title:"2.初识Vuex",slug:"_2-初识vuex",children:[{level:3,title:"2-1.创建项目",slug:"_2-1-创建项目",children:[]},{level:3,title:"2-2.使用webstorm打开项目",slug:"_2-2-使用webstorm打开项目",children:[]},{level:3,title:"2-3.删除无关页面about",slug:"_2-3-删除无关页面about",children:[]},{level:3,title:"2-4.新增两个页面",slug:"_2-4-新增两个页面",children:[]},{level:3,title:"2-5.state",slug:"_2-5-state",children:[]},{level:3,title:"2-6.mutations",slug:"_2-6-mutations",children:[]},{level:3,title:"2-7.actions",slug:"_2-7-actions",children:[]},{level:3,title:"2-8.getter",slug:"_2-8-getter",children:[]}]}],content:"# Vuex\r\n\r\n## 1.概述\r\n\r\n### 1-0.回顾组件之间共享数据的方式\r\n\r\n父向子传值: v-bind属性绑定\r\n\r\n子向父传值: v-on事件绑定\r\n\r\n兄弟组件之间共享数据: 给兄弟们找个共同的爸爸(注册中心)         $on接收数据的那个组件         $emit发送数据的那个组件\r\n\r\n> 以上这些方式，都仅仅适合小范围的数据传递，如果要频繁地，大范围的进行数据的共享，上述的方式就会很困难\r\n\r\n### 1-1.Vuex是什么\r\n\r\nVuex是实现组件全局状态(数据）管理的一种机制，可以方便的实现组件之间数据的共享。\r\n\r\n![img](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vuex/企业微信截图_1627911661439.png)\r\n\r\n### 1-2.使用Vuex统一管理状态的好处\r\n\r\n> 1.能够在vuex中集中管理共享的数据，易于开发和后期维护\r\n>\r\n> 2.能够高效地实现组件之间的数据共享，提高开发效率\r\n>\r\n> 3.能够在vuex中集中管理共享的数据，易于开发和后期维护能够高效地实现组件之间的数据共享，提高开发效率------所有引用了vuex里面的组件里面的数据都会自动更新，不需要手动刷新，只要vuex里面的数据发生变化，引用了这些数据的地方也会跟着变化\r\n\r\n### 1-3.Vuex中适合储存什么\r\n\r\n> 一般情况下，只有组件之间共享的数据，才有必要存储到vuex中;对于组件中的私有数据，依旧存储在组件自身的data中即可。\r\n\r\n\r\n\r\n## 2.初识Vuex\r\n\r\n### 2-1.创建项目\r\n\r\n> 找个空白的目录创建项目\r\n\r\n```shell\r\n#创建一个名为 vuex01的项目\r\nvue create vuex_01\r\n```\r\n\r\n![image-20210802215618702](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vuex/image-20210802215618702.png)\r\n\r\n> 选手动，选中后敲回车\r\n\r\n![image-20210802215942322](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vuex/image-20210802215942322.png)\r\n\r\n> 选择功能  “选择版本”    “babel”   “路由”  “vuex”  然后回车\r\n\r\n![image-20210802220125736](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vuex/image-20210802220125736.png)\r\n\r\n> 选择2版本的vue，然后回车\r\n\r\n![image-20210802220234731](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vuex/image-20210802220234731.png)\r\n\r\n> 这里问是不是使用历史模式，选择N，然后回车\r\n\r\n![image-20210802220424100](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vuex/image-20210802220424100.png)\r\n\r\n> 配置文件选择 package.json  然后回车\r\n\r\n![image-20210802220539985](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vuex/image-20210802220539985.png)\r\n\r\n> 是否保存为以后的模版，选N，然后回车\r\n\r\n![image-20210802220655208](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vuex/image-20210802220655208.png)\r\n\r\nok创建成功，如果一次没有成功，就多搞几次，搞得多了自然成功的可能性就大了\r\n\r\n![image-20210802232526616](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vuex/image-20210802232526616.png)\r\n\r\n### 2-2.使用webstorm打开项目\r\n\r\n> 以下是自动创建出来的项目\r\n\r\n![image-20210802234146785](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vuex/image-20210802234146785.png)\r\n\r\n如果是已有的工程，则需要增加一步，然后后面的玩法一致\r\n\r\n```sh\r\n#安装 vuex 到本工程\r\nnpm install vuex --save\r\n```\r\n\r\n#### 2-2-1.配置服务器\r\n\r\n![image-20210802234502876](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vuex/image-20210802234502876.png)\r\n\r\n### 2-3.删除无关页面about\r\n\r\n> 删干净，router/index.js中要删除   Home中的要删除\r\n\r\n\r\n\r\n### 2-4.新增两个页面\r\n\r\n![image-20210802235835593](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vuex/image-20210802235835593.png)\r\n\r\nAddPage.vue\r\n\r\n```vue\r\n<template>\r\n  <div>\r\n    <h3>当前最新的count值为: {{}}</h3>\r\n    <button>点击-1</button>\r\n  </div>\r\n</template>\r\n```\r\n\r\nSubPage.vue\r\n\r\n```vue\r\n<template>\r\n  <div>\r\n    <h3>当前最新的count值为: {{}}</h3>\r\n    <button>点击+1</button>\r\n  </div>\r\n</template>\r\n```\r\n\r\n\r\n\r\n### 2-5.state\r\n\r\n> state提供唯一的公共数据源,所有的共享数据都要统一放到store中的state中进行储存\r\n\r\n在store/index.js中定义全局共享的数据\r\n\r\n```javascript\r\n//4.创建store对象并导出\r\nexport default new Vuex.Store({\r\n  //state提供唯一的公共数据源,所有的共享数据都要统一放到store中的state中进行储存\r\n  state: {\r\n    //count是全局共享的计数器\r\n    count:0\r\n  },\r\n}    \r\n```\r\n\r\n以上是共享数据的定义，定义好了之后就是访问，访问的方式有两种\r\n\r\n#### 2-5-1.第一种访问方式\r\n\r\n```javascript\r\n//在任何位置通过这个方式调用\r\nthis.$store.state.count\r\n```\r\n\r\n所以在addPage.vue中\r\n\r\n```vue\r\n<template>\r\n  <div>\r\n    \x3c!-- 在template中 {{this.$store.state.count}}里面的this可以省略  --\x3e\r\n    <h3>当前最新的count值为: {{$store.state.count}}</h3>\r\n    <button>点击+1</button>\r\n  </div>\r\n</template>\r\n```\r\n\r\n#### 2-5-2.第二种访问方式\r\n\r\n```javascript\r\n//1.从vuex中按需导入 mapState 函数\r\nimport {mapState} from 'vuex'\r\n  \r\n//2.将全局数据映射为当前组件的计算属性\r\n  computed:{\r\n    ...mapState(['count'])\r\n  }\r\n```\r\n\r\n所以在subPage.vue中\r\n\r\n```vue\r\n<template>\r\n  <div>\r\n    <h3>当前最新的count值为: {{count}}</h3>\r\n    <button>点击-1</button>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n//1.从vuex中按需导入 mapState 函数\r\nimport {mapState} from 'vuex'\r\nexport default {\r\n  name: \"SubPage\",\r\n  //2.将全局数据映射为当前组件的计算属性\r\n  computed:{\r\n    ...mapState(['count'])\r\n  }\r\n}\r\n<\/script>\r\n```\r\n\r\n\r\n\r\n### 2-6.mutations\r\n\r\n> mutations用于变更state中的数据\r\n>\r\n> **`仅允许通过mutations变更state中的数据,不可以直接操作store中的数据,因为通过这种方式操作数据,可以集中监控所有的数据变化`**\r\n>\r\n> **`mutations中仅允许使用同步方法，所有的异步操作均不能在这里使用，否则可能会导致数据错乱`**\r\n\r\n#### 2-6-1.定义对数据的操作\r\n\r\n> 在store/index.js中定义对数据的同步的修改\r\n\r\n```javascript\r\n//4.创建store对象并导出\r\nexport default new Vuex.Store({\r\n    //state提供唯一的公共数据源,所有的共享数据都要统一放到store中的state中进行储存\r\n    state: {\r\n        count: 0\r\n    },\r\n    //mutations 用于变更state中的数据,\r\n    mutations: {\r\n        //在mutations定义对state中的数据的操作\r\n        add(state,'参数(如果没带就不写)') {\r\n            //变更数据状态\r\n            state.count++\r\n        }\r\n    },\r\n}    \r\n```\r\n\r\n#### 2-6-2.调用mutations中的方法的方式一\r\n\r\n```js\r\n//不带参数\r\nthis.$store.commit('被调用方法')\r\n//带参数\r\nthis.$store.commit('被调用方法','参数')\r\n```\r\n\r\n所以addPage.vue的代码为\r\n\r\n```vue\r\n<template>\r\n  <div>\r\n    \x3c!-- 在template中 {{this.$store.state.count}}里面的this可以省略  --\x3e\r\n    <h3>当前最新的count值为: {{$store.state.count}}</h3>\r\n    <button @click=\"addHandler\">点击+1</button>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: \"addPage\",\r\n  methods:{\r\n    addHandler(){\r\n      this.$store.commit('add')\r\n    }\r\n  }\r\n}\r\n<\/script>\r\n```\r\n\r\n#### 2-6-2.调用mutations中的方法的方式二\r\n\r\n```js\r\n//1.从vuex中按需导入  mapMutations 函数\r\nimport {mapMutations} from 'vuex'\r\n\r\n//2.将指定的mapMutations函数映射为当前组件的methods函数\r\nmethods:{\r\n  ...mapMutations(['sub'])\r\n}\r\n```\r\n\r\n所以subPage.vue中的代码为\r\n\r\n```vue\r\n<template>\r\n  <div>\r\n    <h3>当前最新的count值为: {{count}}</h3>\r\n    <button @click=\"sub\">点击-1</button>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n//1.从vuex中按需导入 mapState mapMutations 函数\r\nimport {mapState,mapMutations} from 'vuex'\r\nexport default {\r\n  name: \"SubPage\",\r\n  //2.将全局数据映射为当前组件的计算属性\r\n  computed:{\r\n    ...mapState(['count'])\r\n  },\r\n  //将指定的mapMutations函数映射为当前组件的methods函数\r\n  methods:{\r\n    ...mapMutations(['sub'])\r\n  }\r\n}\r\n<\/script>\r\n```\r\n\r\n#### 效果\r\n\r\n![image-20210803003230114](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vuex/image-20210803003230114.png)\r\n\r\n\r\n\r\n### 2-7.actions\r\n\r\n> actions用来处理异步任务\r\n>\r\n> 如果通过异步操作变更数据，必须通过action，调用链为  action调用mutation, mutation调用state\r\n\r\n#### 2-7-1.定义异步操作\r\n\r\n```js\r\n//action用来处理异步任务\r\nactions: {\r\n    //异步的增加\r\n    addAsync(mutation) {\r\n        setTimeout(() => {\r\n            mutation.commit('add')\r\n        }, 1000)\r\n    },\r\n    //异步的减少\r\n    subAsync(mutation) {\r\n        setTimeout(() => {\r\n            mutation.commit('sub')\r\n        }, 1000)\r\n    }\r\n},\r\n```\r\n\r\n#### 2-7-2.调用异步操作方式一\r\n\r\n```js\r\nthis.$store.dispatch('具体的异步方法')\r\n```\r\n\r\n所以addPage页面的代码为\r\n\r\n```vue\r\n<template>\r\n  <div>\r\n    <button @click=\"addAsyncOne\">延时1秒+1</button>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  methods:{\r\n    addAsyncOne() {\r\n      this.$store.dispatch('addAsync')\r\n    }\r\n  }\r\n}\r\n<\/script>\r\n```\r\n\r\n#### 2-7-2.调用异步操作方式二\r\n\r\n```js\r\n//1.从vuex中按需导入 mapActions 函数\r\nimport {mapActions} from 'vuex'\r\n\r\n//2将指定的 mapActions 函数映射为当前组件的methods函数\r\nmethods:{\r\n  ...mapActions(['subAsync'])\r\n}\r\n```\r\n\r\n所以subPage页面的代码为\r\n\r\n```vue\r\n<template>\r\n  <div>\r\n    <button @click=\"subAsync\">延时1秒-1</button>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n//1.从vuex中按需导入 mapActions 函数\r\nimport {mapActions} from 'vuex'\r\nexport default {\r\n  //2将指定的mapMutations函数映射为当前组件的methods函数\r\n  methods:{\r\n    ...mapActions(['subAsync'])\r\n  }\r\n}\r\n<\/script>\r\n```\r\n\r\n#### 效果\r\n\r\n![image-20210803004710926](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vuex/image-20210803004710926.png)\r\n\r\n\r\n\r\n### 2-8.getter\r\n\r\n> getter用于对store中的数据加工处理形成新的数据\r\n>\r\n> **Getter可以对Store 中已有的数据加工处理之后形成新的数据，类似Vue的计算属性。**\r\n>\r\n> **Store 中数据发生变化，Getter的数据也会跟着变化。**\r\n\r\n#### 2-8-1.定义getter\r\n\r\n```js\r\n//4.创建store对象并导出\r\nexport default new Vuex.Store({\r\n    //state提供唯一的公共数据源,所有的共享数据都要统一放到store中的state中进行储存\r\n    state: {\r\n        count: 0\r\n    },\r\n    //mutations 用于变更state中的数据,\r\n    mutations: {\r\n    },\r\n    //action用来处理异步任务\r\n    actions: {\r\n    },\r\n    //getter用于对store中的数据加工处理形成新的数据\r\n    getters:{\r\n        showCount(state){\r\n            return '当前计数器的值为: ['+ state.count+']'\r\n        }\r\n    },\r\n    //\r\n    modules: {}\r\n})\r\n\r\n```\r\n\r\n#### 2-8-2.getter取值方式一\r\n\r\n```js\r\nthis.$store.getters.名称\r\n```\r\n\r\n所以addPage的代码为\r\n\r\n```vue\r\n<template>\r\n  <div>\r\n    <h3>当前最新的count值为: {{$store.getters.showCount}}</h3>\r\n  </div>\r\n</template>\r\n```\r\n\r\n#### 2-8-3.getter取值方式二\r\n\r\n```js\r\n//1.从vuex中按需导入mapGetters 函数\r\nimport {mapGetters} from 'vuex'\r\n\r\n//2.将全局数据映射为当前组件的计算属性\r\ncomputed:{\r\n  ...mapGetters(['showCount'])\r\n},\r\n```\r\n\r\n所以subPage页面的代码为\r\n\r\n```vue\r\n<template>\r\n  <div>\r\n    <h3>当前最新的count值为: {{showCount}}</h3>\r\n    <button @click=\"sub\">点击-1</button>\r\n    <br>\r\n    <button @click=\"subAsync\">延时1秒-1</button>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n//1.从vuex中按需导入 mapState mapMutations 函数\r\nimport {mapState,mapMutations,mapActions,mapGetters} from 'vuex'\r\nexport default {\r\n  name: \"SubPage\",\r\n  //2.将全局数据映射为当前组件的计算属性\r\n  computed:{\r\n    ...mapState(['count']),\r\n    ...mapGetters(['showCount'])\r\n  },\r\n  //2将指定的mapMutations函数映射为当前组件的methods函数\r\n  methods:{\r\n    ...mapMutations(['sub']),\r\n    ...mapActions(['subAsync'])\r\n  }\r\n}\r\n<\/script>\r\n```\r\n\r\n#### 效果\r\n\r\n![image-20210803010234599](https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vuex/image-20210803010234599.png)",contentRendered:'<h1 id="vuex" tabindex="-1"><a class="header-anchor" href="#vuex" aria-hidden="true">#</a> Vuex</h1>\n<h2 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述" aria-hidden="true">#</a> 1.概述</h2>\n<h3 id="_1-0-回顾组件之间共享数据的方式" tabindex="-1"><a class="header-anchor" href="#_1-0-回顾组件之间共享数据的方式" aria-hidden="true">#</a> 1-0.回顾组件之间共享数据的方式</h3>\n<p>父向子传值: v-bind属性绑定</p>\n<p>子向父传值: v-on事件绑定</p>\n<p>兄弟组件之间共享数据: 给兄弟们找个共同的爸爸(注册中心)         $on接收数据的那个组件         $emit发送数据的那个组件</p>\n<blockquote>\n<p>以上这些方式，都仅仅适合小范围的数据传递，如果要频繁地，大范围的进行数据的共享，上述的方式就会很困难</p>\n</blockquote>\n<h3 id="_1-1-vuex是什么" tabindex="-1"><a class="header-anchor" href="#_1-1-vuex是什么" aria-hidden="true">#</a> 1-1.Vuex是什么</h3>\n<p>Vuex是实现组件全局状态(数据）管理的一种机制，可以方便的实现组件之间数据的共享。</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vuex/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_1627911661439.png" data="aurora"></p>\n<h3 id="_1-2-使用vuex统一管理状态的好处" tabindex="-1"><a class="header-anchor" href="#_1-2-使用vuex统一管理状态的好处" aria-hidden="true">#</a> 1-2.使用Vuex统一管理状态的好处</h3>\n<blockquote>\n<p>1.能够在vuex中集中管理共享的数据，易于开发和后期维护</p>\n<p>2.能够高效地实现组件之间的数据共享，提高开发效率</p>\n<p>3.能够在vuex中集中管理共享的数据，易于开发和后期维护能够高效地实现组件之间的数据共享，提高开发效率------所有引用了vuex里面的组件里面的数据都会自动更新，不需要手动刷新，只要vuex里面的数据发生变化，引用了这些数据的地方也会跟着变化</p>\n</blockquote>\n<h3 id="_1-3-vuex中适合储存什么" tabindex="-1"><a class="header-anchor" href="#_1-3-vuex中适合储存什么" aria-hidden="true">#</a> 1-3.Vuex中适合储存什么</h3>\n<blockquote>\n<p>一般情况下，只有组件之间共享的数据，才有必要存储到vuex中;对于组件中的私有数据，依旧存储在组件自身的data中即可。</p>\n</blockquote>\n<h2 id="_2-初识vuex" tabindex="-1"><a class="header-anchor" href="#_2-初识vuex" aria-hidden="true">#</a> 2.初识Vuex</h2>\n<h3 id="_2-1-创建项目" tabindex="-1"><a class="header-anchor" href="#_2-1-创建项目" aria-hidden="true">#</a> 2-1.创建项目</h3>\n<blockquote>\n<p>找个空白的目录创建项目</p>\n</blockquote>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token comment">#创建一个名为 vuex01的项目</span>\nvue create vuex_01\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210802215618702" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vuex/image-20210802215618702.png" data="aurora"></p>\n<blockquote>\n<p>选手动，选中后敲回车</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210802215942322" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vuex/image-20210802215942322.png" data="aurora"></p>\n<blockquote>\n<p>选择功能  “选择版本”    “babel”   “路由”  “vuex”  然后回车</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210802220125736" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vuex/image-20210802220125736.png" data="aurora"></p>\n<blockquote>\n<p>选择2版本的vue，然后回车</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210802220234731" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vuex/image-20210802220234731.png" data="aurora"></p>\n<blockquote>\n<p>这里问是不是使用历史模式，选择N，然后回车</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210802220424100" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vuex/image-20210802220424100.png" data="aurora"></p>\n<blockquote>\n<p>配置文件选择 package.json  然后回车</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210802220539985" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vuex/image-20210802220539985.png" data="aurora"></p>\n<blockquote>\n<p>是否保存为以后的模版，选N，然后回车</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210802220655208" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vuex/image-20210802220655208.png" data="aurora"></p>\n<p>ok创建成功，如果一次没有成功，就多搞几次，搞得多了自然成功的可能性就大了</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210802232526616" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vuex/image-20210802232526616.png" data="aurora"></p>\n<h3 id="_2-2-使用webstorm打开项目" tabindex="-1"><a class="header-anchor" href="#_2-2-使用webstorm打开项目" aria-hidden="true">#</a> 2-2.使用webstorm打开项目</h3>\n<blockquote>\n<p>以下是自动创建出来的项目</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210802234146785" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vuex/image-20210802234146785.png" data="aurora"></p>\n<p>如果是已有的工程，则需要增加一步，然后后面的玩法一致</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token comment">#安装 vuex 到本工程</span>\n<span class="token function">npm</span> <span class="token function">install</span> vuex --save\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="_2-2-1-配置服务器" tabindex="-1"><a class="header-anchor" href="#_2-2-1-配置服务器" aria-hidden="true">#</a> 2-2-1.配置服务器</h4>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210802234502876" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vuex/image-20210802234502876.png" data="aurora"></p>\n<h3 id="_2-3-删除无关页面about" tabindex="-1"><a class="header-anchor" href="#_2-3-删除无关页面about" aria-hidden="true">#</a> 2-3.删除无关页面about</h3>\n<blockquote>\n<p>删干净，router/index.js中要删除   Home中的要删除</p>\n</blockquote>\n<h3 id="_2-4-新增两个页面" tabindex="-1"><a class="header-anchor" href="#_2-4-新增两个页面" aria-hidden="true">#</a> 2-4.新增两个页面</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210802235835593" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vuex/image-20210802235835593.png" data="aurora"></p>\n<p>AddPage.vue</p>\n<div class="language-vue ext-vue line-numbers-mode"><pre v-pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>当前最新的count值为: {{}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>点击-1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>SubPage.vue</p>\n<div class="language-vue ext-vue line-numbers-mode"><pre v-pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>当前最新的count值为: {{}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>点击+1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="_2-5-state" tabindex="-1"><a class="header-anchor" href="#_2-5-state" aria-hidden="true">#</a> 2-5.state</h3>\n<blockquote>\n<p>state提供唯一的公共数据源,所有的共享数据都要统一放到store中的state中进行储存</p>\n</blockquote>\n<p>在store/index.js中定义全局共享的数据</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">//4.创建store对象并导出</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token comment">//state提供唯一的公共数据源,所有的共享数据都要统一放到store中的state中进行储存</span>\n  <span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">//count是全局共享的计数器</span>\n    <span class="token literal-property property">count</span><span class="token operator">:</span><span class="token number">0</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>    \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>以上是共享数据的定义，定义好了之后就是访问，访问的方式有两种</p>\n<h4 id="_2-5-1-第一种访问方式" tabindex="-1"><a class="header-anchor" href="#_2-5-1-第一种访问方式" aria-hidden="true">#</a> 2-5-1.第一种访问方式</h4>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">//在任何位置通过这个方式调用</span>\n<span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>count\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>所以在addPage.vue中</p>\n<div class="language-vue ext-vue line-numbers-mode"><pre v-pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n    <span class="token comment">&lt;!-- 在template中 {{this.$store.state.count}}里面的this可以省略  --\x3e</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>当前最新的count值为: {{$store.state.count}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>点击+1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h4 id="_2-5-2-第二种访问方式" tabindex="-1"><a class="header-anchor" href="#_2-5-2-第二种访问方式" aria-hidden="true">#</a> 2-5-2.第二种访问方式</h4>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">//1.从vuex中按需导入 mapState 函数</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span>mapState<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'vuex\'</span>\n  \n<span class="token comment">//2.将全局数据映射为当前组件的计算属性</span>\n  <span class="token literal-property property">computed</span><span class="token operator">:</span><span class="token punctuation">{</span>\n    <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">\'count\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>所以在subPage.vue中</p>\n<div class="language-vue ext-vue line-numbers-mode"><pre v-pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>当前最新的count值为: {{count}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>点击-1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n<span class="token comment">//1.从vuex中按需导入 mapState 函数</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span>mapState<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'vuex\'</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"SubPage"</span><span class="token punctuation">,</span>\n  <span class="token comment">//2.将全局数据映射为当前组件的计算属性</span>\n  <span class="token literal-property property">computed</span><span class="token operator">:</span><span class="token punctuation">{</span>\n    <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">\'count\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h3 id="_2-6-mutations" tabindex="-1"><a class="header-anchor" href="#_2-6-mutations" aria-hidden="true">#</a> 2-6.mutations</h3>\n<blockquote>\n<p>mutations用于变更state中的数据</p>\n<p><strong><code>仅允许通过mutations变更state中的数据,不可以直接操作store中的数据,因为通过这种方式操作数据,可以集中监控所有的数据变化</code></strong></p>\n<p><strong><code>mutations中仅允许使用同步方法，所有的异步操作均不能在这里使用，否则可能会导致数据错乱</code></strong></p>\n</blockquote>\n<h4 id="_2-6-1-定义对数据的操作" tabindex="-1"><a class="header-anchor" href="#_2-6-1-定义对数据的操作" aria-hidden="true">#</a> 2-6-1.定义对数据的操作</h4>\n<blockquote>\n<p>在store/index.js中定义对数据的同步的修改</p>\n</blockquote>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">//4.创建store对象并导出</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token comment">//state提供唯一的公共数据源,所有的共享数据都要统一放到store中的state中进行储存</span>\n    <span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token comment">//mutations 用于变更state中的数据,</span>\n    <span class="token literal-property property">mutations</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token comment">//在mutations定义对state中的数据的操作</span>\n        <span class="token function">add</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span><span class="token string">\'参数(如果没带就不写)\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">//变更数据状态</span>\n            state<span class="token punctuation">.</span>count<span class="token operator">++</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>    \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h4 id="_2-6-2-调用mutations中的方法的方式一" tabindex="-1"><a class="header-anchor" href="#_2-6-2-调用mutations中的方法的方式一" aria-hidden="true">#</a> 2-6-2.调用mutations中的方法的方式一</h4>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">//不带参数</span>\n<span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">\'被调用方法\'</span><span class="token punctuation">)</span>\n<span class="token comment">//带参数</span>\n<span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">\'被调用方法\'</span><span class="token punctuation">,</span><span class="token string">\'参数\'</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>所以addPage.vue的代码为</p>\n<div class="language-vue ext-vue line-numbers-mode"><pre v-pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n    <span class="token comment">&lt;!-- 在template中 {{this.$store.state.count}}里面的this可以省略  --\x3e</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>当前最新的count值为: {{$store.state.count}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>addHandler<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点击+1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"addPage"</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>\n    <span class="token function">addHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">\'add\'</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h4 id="_2-6-2-调用mutations中的方法的方式二" tabindex="-1"><a class="header-anchor" href="#_2-6-2-调用mutations中的方法的方式二" aria-hidden="true">#</a> 2-6-2.调用mutations中的方法的方式二</h4>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">//1.从vuex中按需导入  mapMutations 函数</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span>mapMutations<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'vuex\'</span>\n\n<span class="token comment">//2.将指定的mapMutations函数映射为当前组件的methods函数</span>\n<span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>\n  <span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">\'sub\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>所以subPage.vue中的代码为</p>\n<div class="language-vue ext-vue line-numbers-mode"><pre v-pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>当前最新的count值为: {{count}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sub<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点击-1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n<span class="token comment">//1.从vuex中按需导入 mapState mapMutations 函数</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span>mapState<span class="token punctuation">,</span>mapMutations<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'vuex\'</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"SubPage"</span><span class="token punctuation">,</span>\n  <span class="token comment">//2.将全局数据映射为当前组件的计算属性</span>\n  <span class="token literal-property property">computed</span><span class="token operator">:</span><span class="token punctuation">{</span>\n    <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">\'count\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token comment">//将指定的mapMutations函数映射为当前组件的methods函数</span>\n  <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>\n    <span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">\'sub\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h4 id="效果" tabindex="-1"><a class="header-anchor" href="#效果" aria-hidden="true">#</a> 效果</h4>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210803003230114" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vuex/image-20210803003230114.png" data="aurora"></p>\n<h3 id="_2-7-actions" tabindex="-1"><a class="header-anchor" href="#_2-7-actions" aria-hidden="true">#</a> 2-7.actions</h3>\n<blockquote>\n<p>actions用来处理异步任务</p>\n<p>如果通过异步操作变更数据，必须通过action，调用链为  action调用mutation, mutation调用state</p>\n</blockquote>\n<h4 id="_2-7-1-定义异步操作" tabindex="-1"><a class="header-anchor" href="#_2-7-1-定义异步操作" aria-hidden="true">#</a> 2-7-1.定义异步操作</h4>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">//action用来处理异步任务</span>\n<span class="token literal-property property">actions</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">//异步的增加</span>\n    <span class="token function">addAsync</span><span class="token punctuation">(</span><span class="token parameter">mutation</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n            mutation<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">\'add\'</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token comment">//异步的减少</span>\n    <span class="token function">subAsync</span><span class="token punctuation">(</span><span class="token parameter">mutation</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n            mutation<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">\'sub\'</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h4 id="_2-7-2-调用异步操作方式一" tabindex="-1"><a class="header-anchor" href="#_2-7-2-调用异步操作方式一" aria-hidden="true">#</a> 2-7-2.调用异步操作方式一</h4>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">\'具体的异步方法\'</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>所以addPage页面的代码为</p>\n<div class="language-vue ext-vue line-numbers-mode"><pre v-pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>addAsyncOne<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>延时1秒+1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>\n    <span class="token function">addAsyncOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">\'addAsync\'</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h4 id="_2-7-2-调用异步操作方式二" tabindex="-1"><a class="header-anchor" href="#_2-7-2-调用异步操作方式二" aria-hidden="true">#</a> 2-7-2.调用异步操作方式二</h4>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">//1.从vuex中按需导入 mapActions 函数</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span>mapActions<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'vuex\'</span>\n\n<span class="token comment">//2将指定的 mapActions 函数映射为当前组件的methods函数</span>\n<span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>\n  <span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">\'subAsync\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>所以subPage页面的代码为</p>\n<div class="language-vue ext-vue line-numbers-mode"><pre v-pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>subAsync<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>延时1秒-1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n<span class="token comment">//1.从vuex中按需导入 mapActions 函数</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span>mapActions<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'vuex\'</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  <span class="token comment">//2将指定的mapMutations函数映射为当前组件的methods函数</span>\n  <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>\n    <span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">\'subAsync\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h4 id="效果-1" tabindex="-1"><a class="header-anchor" href="#效果-1" aria-hidden="true">#</a> 效果</h4>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210803004710926" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vuex/image-20210803004710926.png" data="aurora"></p>\n<h3 id="_2-8-getter" tabindex="-1"><a class="header-anchor" href="#_2-8-getter" aria-hidden="true">#</a> 2-8.getter</h3>\n<blockquote>\n<p>getter用于对store中的数据加工处理形成新的数据</p>\n<p><strong>Getter可以对Store 中已有的数据加工处理之后形成新的数据，类似Vue的计算属性。</strong></p>\n<p><strong>Store 中数据发生变化，Getter的数据也会跟着变化。</strong></p>\n</blockquote>\n<h4 id="_2-8-1-定义getter" tabindex="-1"><a class="header-anchor" href="#_2-8-1-定义getter" aria-hidden="true">#</a> 2-8-1.定义getter</h4>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">//4.创建store对象并导出</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token comment">//state提供唯一的公共数据源,所有的共享数据都要统一放到store中的state中进行储存</span>\n    <span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token comment">//mutations 用于变更state中的数据,</span>\n    <span class="token literal-property property">mutations</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token comment">//action用来处理异步任务</span>\n    <span class="token literal-property property">actions</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token comment">//getter用于对store中的数据加工处理形成新的数据</span>\n    <span class="token literal-property property">getters</span><span class="token operator">:</span><span class="token punctuation">{</span>\n        <span class="token function">showCount</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token string">\'当前计数器的值为: [\'</span><span class="token operator">+</span> state<span class="token punctuation">.</span>count<span class="token operator">+</span><span class="token string">\']\'</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token comment">//</span>\n    <span class="token literal-property property">modules</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h4 id="_2-8-2-getter取值方式一" tabindex="-1"><a class="header-anchor" href="#_2-8-2-getter取值方式一" aria-hidden="true">#</a> 2-8-2.getter取值方式一</h4>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>getters<span class="token punctuation">.</span>名称\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>所以addPage的代码为</p>\n<div class="language-vue ext-vue line-numbers-mode"><pre v-pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>当前最新的count值为: {{$store.getters.showCount}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="_2-8-3-getter取值方式二" tabindex="-1"><a class="header-anchor" href="#_2-8-3-getter取值方式二" aria-hidden="true">#</a> 2-8-3.getter取值方式二</h4>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">//1.从vuex中按需导入mapGetters 函数</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span>mapGetters<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'vuex\'</span>\n\n<span class="token comment">//2.将全局数据映射为当前组件的计算属性</span>\n<span class="token literal-property property">computed</span><span class="token operator">:</span><span class="token punctuation">{</span>\n  <span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">\'showCount\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>所以subPage页面的代码为</p>\n<div class="language-vue ext-vue line-numbers-mode"><pre v-pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>当前最新的count值为: {{showCount}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sub<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点击-1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>subAsync<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>延时1秒-1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n<span class="token comment">//1.从vuex中按需导入 mapState mapMutations 函数</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span>mapState<span class="token punctuation">,</span>mapMutations<span class="token punctuation">,</span>mapActions<span class="token punctuation">,</span>mapGetters<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'vuex\'</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"SubPage"</span><span class="token punctuation">,</span>\n  <span class="token comment">//2.将全局数据映射为当前组件的计算属性</span>\n  <span class="token literal-property property">computed</span><span class="token operator">:</span><span class="token punctuation">{</span>\n    <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">\'count\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">\'showCount\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token comment">//2将指定的mapMutations函数映射为当前组件的methods函数</span>\n  <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>\n    <span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">\'sub\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">\'subAsync\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h4 id="效果-2" tabindex="-1"><a class="header-anchor" href="#效果-2" aria-hidden="true">#</a> 效果</h4>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20210803010234599" originSrc="https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/vuex/image-20210803010234599.png" data="aurora"></p>\n',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/vue/Vuex.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"Vuex",filePath:"D:/blog/docs/vue/Vuex.md",filePathRelative:"vue/Vuex.md",componentFilePath:"D:/blog/docs/.vuepress/.temp/pages/vue/Vuex.html.vue",componentFilePathRelative:"pages/vue/Vuex.html.vue",componentFileChunkName:"v-57ee40a5",dataFilePath:"D:/blog/docs/.vuepress/.temp/pages/vue/Vuex.html.js",dataFilePathRelative:"pages/vue/Vuex.html.js",dataFileChunkName:"v-57ee40a5",htmlFilePath:"D:/blog/docs/.vuepress/dist/vue/Vuex.html",htmlFilePathRelative:"vue/Vuex.html"},{data:{key:"v-3706649a",path:"/404.html",title:"",lang:"zh-CN",frontmatter:{layout:"404"},excerpt:"",headers:[],git:{}},key:"v-3706649a",path:"/404.html",title:"",lang:"zh-CN",frontmatter:{layout:"404"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"D:/blog/docs/.vuepress/.temp/pages/404.html.vue",componentFilePathRelative:"pages/404.html.vue",componentFileChunkName:"v-3706649a",dataFilePath:"D:/blog/docs/.vuepress/.temp/pages/404.html.js",dataFilePathRelative:"pages/404.html.js",dataFileChunkName:"v-3706649a",htmlFilePath:"D:/blog/docs/.vuepress/dist/404.html",htmlFilePathRelative:"404.html"},{data:{key:"v-8daa1a0e",path:"/",title:"",lang:"zh-CN",frontmatter:{layout:"Layout",home:!0},excerpt:"",headers:[],git:{}},key:"v-8daa1a0e",path:"/",title:"",lang:"zh-CN",frontmatter:{layout:"Layout",home:!0},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"D:/blog/docs/.vuepress/.temp/pages/index.html.vue",componentFilePathRelative:"pages/index.html.vue",componentFileChunkName:"v-8daa1a0e",dataFilePath:"D:/blog/docs/.vuepress/.temp/pages/index.html.js",dataFilePathRelative:"pages/index.html.js",dataFileChunkName:"v-8daa1a0e",htmlFilePath:"D:/blog/docs/.vuepress/dist/index.html",htmlFilePathRelative:"index.html"},{data:{key:"v-74bc627b",path:"/about/",title:"",lang:"zh-CN",frontmatter:{layout:"About",slug:"aurora-about"},excerpt:"",headers:[],git:{}},key:"v-74bc627b",path:"/about/",title:"",lang:"zh-CN",frontmatter:{layout:"About",slug:"aurora-about"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"D:/blog/docs/.vuepress/.temp/pages/about/index.html.vue",componentFilePathRelative:"pages/about/index.html.vue",componentFileChunkName:"v-74bc627b",dataFilePath:"D:/blog/docs/.vuepress/.temp/pages/about/index.html.js",dataFilePathRelative:"pages/about/index.html.js",dataFileChunkName:"v-74bc627b",htmlFilePath:"D:/blog/docs/.vuepress/dist/about/index.html",htmlFilePathRelative:"about/index.html"},{data:{key:"v-14f724bf",path:"/mood/",title:"",lang:"zh-CN",frontmatter:{layout:"Mood",slug:"aurora-mood"},excerpt:"",headers:[],git:{}},key:"v-14f724bf",path:"/mood/",title:"",lang:"zh-CN",frontmatter:{layout:"Mood",slug:"aurora-mood"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"D:/blog/docs/.vuepress/.temp/pages/mood/index.html.vue",componentFilePathRelative:"pages/mood/index.html.vue",componentFileChunkName:"v-14f724bf",dataFilePath:"D:/blog/docs/.vuepress/.temp/pages/mood/index.html.js",dataFilePathRelative:"pages/mood/index.html.js",dataFileChunkName:"v-14f724bf",htmlFilePath:"D:/blog/docs/.vuepress/dist/mood/index.html",htmlFilePathRelative:"mood/index.html"},{data:{key:"v-14e6501c",path:"/link/",title:"",lang:"zh-CN",frontmatter:{layout:"Link",slug:"aurora-link"},excerpt:"",headers:[],git:{}},key:"v-14e6501c",path:"/link/",title:"",lang:"zh-CN",frontmatter:{layout:"Link",slug:"aurora-link"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"D:/blog/docs/.vuepress/.temp/pages/link/index.html.vue",componentFilePathRelative:"pages/link/index.html.vue",componentFileChunkName:"v-14e6501c",dataFilePath:"D:/blog/docs/.vuepress/.temp/pages/link/index.html.js",dataFilePathRelative:"pages/link/index.html.js",dataFileChunkName:"v-14e6501c",htmlFilePath:"D:/blog/docs/.vuepress/dist/link/index.html",htmlFilePathRelative:"link/index.html"},{data:{key:"v-744d024e",path:"/tag/",title:"",lang:"zh-CN",frontmatter:{layout:"Tag",slug:"aurora-tag"},excerpt:"",headers:[],git:{}},key:"v-744d024e",path:"/tag/",title:"",lang:"zh-CN",frontmatter:{layout:"Tag",slug:"aurora-tag"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"D:/blog/docs/.vuepress/.temp/pages/tag/index.html.vue",componentFilePathRelative:"pages/tag/index.html.vue",componentFileChunkName:"v-744d024e",dataFilePath:"D:/blog/docs/.vuepress/.temp/pages/tag/index.html.js",dataFilePathRelative:"pages/tag/index.html.js",dataFileChunkName:"v-744d024e",htmlFilePath:"D:/blog/docs/.vuepress/dist/tag/index.html",htmlFilePathRelative:"tag/index.html"},{data:{key:"v-705c21a6",path:"/archive/",title:"",lang:"zh-CN",frontmatter:{layout:"Archive",slug:"aurora-archive"},excerpt:"",headers:[],git:{}},key:"v-705c21a6",path:"/archive/",title:"",lang:"zh-CN",frontmatter:{layout:"Archive",slug:"aurora-archive"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"D:/blog/docs/.vuepress/.temp/pages/archive/index.html.vue",componentFilePathRelative:"pages/archive/index.html.vue",componentFileChunkName:"v-705c21a6",dataFilePath:"D:/blog/docs/.vuepress/.temp/pages/archive/index.html.js",dataFilePathRelative:"pages/archive/index.html.js",dataFileChunkName:"v-705c21a6",htmlFilePath:"D:/blog/docs/.vuepress/dist/archive/index.html",htmlFilePathRelative:"archive/index.html"},{data:{key:"v-6629f178",path:"/aurora-coze/",title:"",lang:"zh-CN",frontmatter:{layout:"CozeMood",slug:"aurora-coze-mood"},excerpt:"",headers:[],git:{}},key:"v-6629f178",path:"/aurora-coze/",title:"",lang:"zh-CN",frontmatter:{layout:"CozeMood",slug:"aurora-coze-mood"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"D:/blog/docs/.vuepress/.temp/pages/aurora-coze/index.html.vue",componentFilePathRelative:"pages/aurora-coze/index.html.vue",componentFileChunkName:"v-6629f178",dataFilePath:"D:/blog/docs/.vuepress/.temp/pages/aurora-coze/index.html.js",dataFilePathRelative:"pages/aurora-coze/index.html.js",dataFileChunkName:"v-6629f178",htmlFilePath:"D:/blog/docs/.vuepress/dist/aurora-coze/index.html",htmlFilePathRelative:"aurora-coze/index.html"},{data:{key:"v-f693f690",path:"/aurora-register/",title:"",lang:"zh-CN",frontmatter:{layout:"RegisterUser",slug:"aurora-coze-register"},excerpt:"",headers:[],git:{}},key:"v-f693f690",path:"/aurora-register/",title:"",lang:"zh-CN",frontmatter:{layout:"RegisterUser",slug:"aurora-coze-register"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"D:/blog/docs/.vuepress/.temp/pages/aurora-register/index.html.vue",componentFilePathRelative:"pages/aurora-register/index.html.vue",componentFileChunkName:"v-f693f690",dataFilePath:"D:/blog/docs/.vuepress/.temp/pages/aurora-register/index.html.js",dataFilePathRelative:"pages/aurora-register/index.html.js",dataFileChunkName:"v-f693f690",htmlFilePath:"D:/blog/docs/.vuepress/dist/aurora-register/index.html",htmlFilePathRelative:"aurora-register/index.html"},{data:{key:"v-e2acc714",path:"/photo/",title:"",lang:"zh-CN",frontmatter:{layout:"CozePhoto",slug:"aurora-photo"},excerpt:"",headers:[],git:{}},key:"v-e2acc714",path:"/photo/",title:"",lang:"zh-CN",frontmatter:{layout:"CozePhoto",slug:"aurora-photo"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"D:/blog/docs/.vuepress/.temp/pages/photo/index.html.vue",componentFilePathRelative:"pages/photo/index.html.vue",componentFileChunkName:"v-e2acc714",dataFilePath:"D:/blog/docs/.vuepress/.temp/pages/photo/index.html.js",dataFilePathRelative:"pages/photo/index.html.js",dataFileChunkName:"v-e2acc714",htmlFilePath:"D:/blog/docs/.vuepress/dist/photo/index.html",htmlFilePathRelative:"photo/index.html"},{data:{key:"v-4382d077",path:"/next-mood/",title:"",lang:"zh-CN",frontmatter:{layout:"AuroraCozeMood",slug:"aurora-AuroraCozeMood"},excerpt:"",headers:[],git:{}},key:"v-4382d077",path:"/next-mood/",title:"",lang:"zh-CN",frontmatter:{layout:"AuroraCozeMood",slug:"aurora-AuroraCozeMood"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"D:/blog/docs/.vuepress/.temp/pages/next-mood/index.html.vue",componentFilePathRelative:"pages/next-mood/index.html.vue",componentFileChunkName:"v-4382d077",dataFilePath:"D:/blog/docs/.vuepress/.temp/pages/next-mood/index.html.js",dataFilePathRelative:"pages/next-mood/index.html.js",dataFileChunkName:"v-4382d077",htmlFilePath:"D:/blog/docs/.vuepress/dist/next-mood/index.html",htmlFilePathRelative:"next-mood/index.html"},{data:{key:"v-3279cf61",path:"/aurora-archive/",title:"",lang:"zh-CN",frontmatter:{layout:"AuroraArchive",slug:"aurora-plugin-archive"},excerpt:"",headers:[],git:{}},key:"v-3279cf61",path:"/aurora-archive/",title:"",lang:"zh-CN",frontmatter:{layout:"AuroraArchive",slug:"aurora-plugin-archive"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"D:/blog/docs/.vuepress/.temp/pages/aurora-archive/index.html.vue",componentFilePathRelative:"pages/aurora-archive/index.html.vue",componentFileChunkName:"v-3279cf61",dataFilePath:"D:/blog/docs/.vuepress/.temp/pages/aurora-archive/index.html.js",dataFilePathRelative:"pages/aurora-archive/index.html.js",dataFileChunkName:"v-3279cf61",htmlFilePath:"D:/blog/docs/.vuepress/dist/aurora-archive/index.html",htmlFilePathRelative:"aurora-archive/index.html"},{data:{key:"v-3c506944",path:"/aurora-music/",title:"",lang:"zh-CN",frontmatter:{layout:"AuroraMusic",slug:"aurora-plugin-music"},excerpt:"",headers:[],git:{}},key:"v-3c506944",path:"/aurora-music/",title:"",lang:"zh-CN",frontmatter:{layout:"AuroraMusic",slug:"aurora-plugin-music"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"D:/blog/docs/.vuepress/.temp/pages/aurora-music/index.html.vue",componentFilePathRelative:"pages/aurora-music/index.html.vue",componentFileChunkName:"v-3c506944",dataFilePath:"D:/blog/docs/.vuepress/.temp/pages/aurora-music/index.html.js",dataFilePathRelative:"pages/aurora-music/index.html.js",dataFileChunkName:"v-3c506944",htmlFilePath:"D:/blog/docs/.vuepress/dist/aurora-music/index.html",htmlFilePathRelative:"aurora-music/index.html"}]}},n=>{n.O(0,[795,465],(()=>(5698,n(n.s=5698)))),n.O()}]);