"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[253],{9973:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-435885cf",path:"/mybatis/Mybatis%E8%AF%A6%E8%A7%A3.html",title:"Mybatis详解",lang:"zh-CN",frontmatter:{title:"Mybatis详解",date:"2022/9/6 08:44",tag:["Java","mybatis","框架","ssm"],categories:["后端"],coverUrl:"https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/mybatis-logo.png"},excerpt:"",headers:[{level:2,title:"Mybatis简介",slug:"mybatis简介",children:[{level:3,title:"MyBatis历史",slug:"mybatis历史",children:[]},{level:3,title:"MyBatis特性",slug:"mybatis特性",children:[]},{level:3,title:"MyBatis下载",slug:"mybatis下载",children:[]},{level:3,title:"和其它持久化层技术对比",slug:"和其它持久化层技术对比",children:[]}]},{level:2,title:"搭建MyBatis",slug:"搭建mybatis",children:[{level:3,title:"创建数据库",slug:"创建数据库",children:[]},{level:3,title:"创建maven工程",slug:"创建maven工程",children:[]},{level:3,title:"创建MyBatis的核心配置文件",slug:"创建mybatis的核心配置文件",children:[]},{level:3,title:"创建mapper接口",slug:"创建mapper接口",children:[]},{level:3,title:"创建MyBatis的映射文件",slug:"创建mybatis的映射文件",children:[]},{level:3,title:"注册（引入）映射文件",slug:"注册-引入-映射文件",children:[]},{level:3,title:"通过Junit测试功能(main方法也可以)",slug:"通过junit测试功能-main方法也可以",children:[]}]},{level:2,title:"核心配置文件详解",slug:"核心配置文件详解",children:[]},{level:2,title:"默认的类型别名",slug:"默认的类型别名",children:[{level:3,title:"基本数据类型映射",slug:"基本数据类型映射",children:[]},{level:3,title:"封装类型映射",slug:"封装类型映射",children:[]}]},{level:2,title:"MyBatis的增删改查",slug:"mybatis的增删改查",children:[{level:3,title:"1、添加",slug:"_1、添加",children:[]},{level:3,title:"2、删除",slug:"_2、删除",children:[]},{level:3,title:"3、修改",slug:"_3、修改",children:[]},{level:3,title:"4、查询",slug:"_4、查询",children:[]}]},{level:2,title:"MyBatis获取参数值的两种方式（重点）",slug:"mybatis获取参数值的两种方式-重点",children:[{level:3,title:"单个字面量类型的参数",slug:"单个字面量类型的参数",children:[]},{level:3,title:"多个字面量类型的参数",slug:"多个字面量类型的参数",children:[]}]}],git:{}}},5555:(n,s,a)=>{a.r(s),a.d(s,{default:()=>K});var t=a(6252);const p=(0,t.uE)('<h2 id="mybatis简介" tabindex="-1"><a class="header-anchor" href="#mybatis简介" aria-hidden="true">#</a> Mybatis简介</h2><h3 id="mybatis历史" tabindex="-1"><a class="header-anchor" href="#mybatis历史" aria-hidden="true">#</a> MyBatis历史</h3><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>MyBatis最初是Apache的一个开源项目iBatis, 2010年6月这个项目由Apache Software Foundation迁移到了Google Code。随着开发团队转投Google Code旗下，iBatis3.x正式更名为MyBatis。代码于2013年11月迁移到Github</p><p>iBatis一词来源于“internet”和“abatis”的组合，是一个基于Java的持久层框架。iBatis提供的持久层框架包括SQL Maps和Data Access Objects（DAO）</p></div><h3 id="mybatis特性" tabindex="-1"><a class="header-anchor" href="#mybatis特性" aria-hidden="true">#</a> MyBatis特性</h3><ol><li>MyBatis 是支持定制化 SQL、存储过程以及高级映射的优秀的持久层框架</li><li>MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集</li><li>MyBatis可以使用简单的XML或注解用于配置和原始映射，将接口和Java的POJO（Plain Old Java Objects，普通的Java对象）映射成数据库中的记录</li><li>MyBatis 是一个半自动的ORM（Object Relation Mapping）框架</li></ol><h3 id="mybatis下载" tabindex="-1"><a class="header-anchor" href="#mybatis下载" aria-hidden="true">#</a> MyBatis下载</h3>',6),e=(0,t.Uk)("Mybatis下载地址："),l={href:"https://github.com/mybatis/mybatis-3",target:"_blank",rel:"noopener noreferrer"},c=(0,t.Uk)("GitHub - mybatis/mybatis-3: MyBatis SQL mapper framework for Java"),o=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"1.png",originSrc:"https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/1.png",data:"aurora"})],-1),u=(0,t.uE)('<h3 id="和其它持久化层技术对比" tabindex="-1"><a class="header-anchor" href="#和其它持久化层技术对比" aria-hidden="true">#</a> 和其它持久化层技术对比</h3><ul><li><p>JDBC</p><ul><li>SQL 夹杂在Java代码中耦合度高，导致硬编码内伤</li><li>维护不易且实际开发需求中 SQL 有变化，频繁修改的情况多见</li><li>代码冗长，开发效率低</li></ul></li><li><p>Hibernate 和 JPA</p><ul><li>操作简便，开发效率高</li><li>程序中的长难复杂 SQL 需要绕过框架</li><li>内部自动生产的 SQL，不容易做特殊优化</li><li>基于全映射的全自动框架，大量字段的 POJO 进行部分映射时比较困难</li><li>反射操作太多，导致数据库性能下降</li></ul></li><li><p>MyBatis</p><ul><li>轻量级，性能出色</li><li>SQL 和 Java 编码分开，功能边界清晰。Java代码专注业务、SQL语句专注数据</li><li>开发效率稍逊于HIbernate，但是完全能够接受</li></ul></li></ul><h2 id="搭建mybatis" tabindex="-1"><a class="header-anchor" href="#搭建mybatis" aria-hidden="true">#</a> 搭建MyBatis</h2><div class="custom-container tip"><p class="custom-container-title">开发环境</p><p>IDE：IntelliJ IDEA 2022.2.1</p><p>构建工具：apache-maven-3.8.4</p><p>MySQL版本：mysql 8.0.25</p><p>MyBatis版本：MyBatis 3.5.7</p></div><h3 id="创建数据库" tabindex="-1"><a class="header-anchor" href="#创建数据库" aria-hidden="true">#</a> 创建数据库</h3><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SET</span> NAMES utf8mb4<span class="token punctuation">;</span>\n<span class="token keyword">SET</span> FOREIGN_KEY_CHECKS <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\n<span class="token comment">-- ----------------------------</span>\n<span class="token comment">-- Table structure for games</span>\n<span class="token comment">-- ----------------------------</span>\n<span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">`</span>games<span class="token punctuation">`</span></span><span class="token punctuation">;</span>\n<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>games<span class="token punctuation">`</span></span>  <span class="token punctuation">(</span>\n  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">int</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>username<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8mb4 <span class="token keyword">COLLATE</span> utf8mb4_unicode_ci <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>passwrod<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8mb4 <span class="token keyword">COLLATE</span> utf8mb4_unicode_ci <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>type<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8mb4 <span class="token keyword">COLLATE</span> utf8mb4_unicode_ci <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>company<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8mb4 <span class="token keyword">COLLATE</span> utf8mb4_unicode_ci <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>year<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8mb4 <span class="token keyword">COLLATE</span> utf8mb4_unicode_ci <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span>\n<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token operator">=</span> <span class="token number">5</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> <span class="token operator">=</span> utf8mb4 <span class="token keyword">COLLATE</span> <span class="token operator">=</span> utf8mb4_unicode_ci ROW_FORMAT <span class="token operator">=</span> Dynamic<span class="token punctuation">;</span>\n\n<span class="token comment">-- ----------------------------</span>\n<span class="token comment">-- Records of games</span>\n<span class="token comment">-- ----------------------------</span>\n<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>games<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;admin&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;123456&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;即时战略&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;暴雪&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1995&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>games<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;test1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;123456&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;RPG&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;光荣&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1995&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>games<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&#39;test2&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;123456&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;即时战略&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;拳头&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2000&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>games<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">&#39;test3&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;123456&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;FPS&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;未知&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1988&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">SET</span> FOREIGN_KEY_CHECKS <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h3 id="创建maven工程" tabindex="-1"><a class="header-anchor" href="#创建maven工程" aria-hidden="true">#</a> 创建maven工程</h3><div class="custom-container warning"><p class="custom-container-title">警告</p><p>在学习本文章前应先熟悉maven构建，并且在idea中已将maven配置好</p></div>',8),i=(0,t.Uk)("若还不知道maven工程如何构建，请点击查看："),r={href:"https://hyd0.cc/maven/Maven%E8%AF%A6%E8%A7%A3.html",target:"_blank",rel:"noopener noreferrer"},k=(0,t.Uk)("Maven详解(基础到高级)(入门到入土) | 信仰的个人博客 (hyd0.cc)"),m=(0,t._)("details",{class:"custom-container details"},[(0,t._)("summary",null,"点击查看示例"),(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"2.png",originSrc:"https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/2.png",data:"aurora"})])],-1),b=(0,t.uE)('<p>构建完成后再工程根目录中找到pom.xml文件，引入对应依赖</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>\n    <span class="token comment">&lt;!-- Mybatis核心 --&gt;</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.5.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token comment">&lt;!-- junit测试 --&gt;</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token comment">&lt;!-- MySQL驱动 --&gt;</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>8.0.25<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div>',2),d=(0,t._)("details",{class:"custom-container details"},[(0,t._)("summary",null,"点击查看示例"),(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"3.png",originSrc:"https://bdqn-blog.oss-cn-beijing.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/3.png",data:"aurora"})])],-1),g={class:"custom-container details"},y=(0,t._)("summary",null,"常见问题及解决方案",-1),h=(0,t._)("p",null,"因网速太慢导致依赖下载失败或者中途不小心点到退出",-1),v=(0,t._)("p",null,"解决方案：",-1),q=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"4.png",originSrc:"https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/4.png",data:"aurora"})],-1),_=(0,t._)("p",null,"若还是不行请更换网络或者配置maven国内镜像仓库后重试",-1),S={href:"https://hyd0.cc/maven/Maven%E8%AF%A6%E8%A7%A3.html#_5%E3%80%81%E9%85%8D%E7%BD%AE%E9%98%BF%E9%87%8C%E4%BA%91%E7%9A%84%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93",target:"_blank",rel:"noopener noreferrer"},x=(0,t.Uk)("配置阿里云的镜像仓库)"),f=(0,t.uE)('<h3 id="创建mybatis的核心配置文件" tabindex="-1"><a class="header-anchor" href="#创建mybatis的核心配置文件" aria-hidden="true">#</a> 创建MyBatis的核心配置文件</h3><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>习惯上命名为mybatis-config.xml，这个文件名仅仅只是建议，并非强制要求。将来整合Spring之后，这个配置文件可以省略，但是其中的配置项非常重要，关乎到我们后面所有的开发。</p><p>核心配置文件主要用于配置连接数据库的环境以及MyBatis的全局配置信息</p><p>核心配置文件存放的位置是<code>src/main/resources</code>目录下</p></div><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>\n<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">configuration</span>\n        <span class="token name">PUBLIC</span> <span class="token string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span>\n        <span class="token string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>\n    <span class="token comment">&lt;!-- 设置连接数据库的环境 default代表的是当前选择的环境 --&gt;</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>development<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n        <span class="token comment">&lt;!-- 配置环境并将该套环境标识为development，供父级标签使用，可配置多套环境  --&gt;</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>development<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n            <span class="token comment">&lt;!-- 配置事务管理器为JDBC --&gt;</span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>JDBC<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n            <span class="token comment">&lt;!-- 配置数据源 --&gt;</span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>POOLED<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n                <span class="token comment">&lt;!-- 数据库驱动，数据库版本8.0以下的不用加cj --&gt;</span>\n                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>driver<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.mysql.cj.jdbc.Driver<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n                <span class="token comment">&lt;!-- 数据库连接地址，8.0以上记得加上时区，否则会导致查询时间错乱 serverTimezone=UTC --&gt;</span>\n                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>url<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>jdbc:mysql://localhost:3306/game?serverTimezone=UTC<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n                <span class="token comment">&lt;!-- 账号 --&gt;</span>\n                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>username<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>root<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n                <span class="token comment">&lt;!-- 密码 --&gt;</span>\n                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>password<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1234<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div>',3),A=(0,t._)("details",{class:"custom-container details"},[(0,t._)("summary",null,"点击查看示例"),(0,t._)("p",null,[(0,t.Uk)("在资源文件夹"),(0,t._)("code",null,"src/main/resources"),(0,t.Uk)("中，创建一个名为mybatis-config.xml的配置文件")]),(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"5.png",originSrc:"https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/5.png",data:"aurora"})]),(0,t._)("p",null,"根据注释进行配套环境设置"),(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"6.png",originSrc:"https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/6.png",data:"aurora"})])],-1),w=(0,t.uE)('<h3 id="创建mapper接口" tabindex="-1"><a class="header-anchor" href="#创建mapper接口" aria-hidden="true">#</a> 创建mapper接口</h3><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>Mybatis中的mapper接口相当于以前的dao，但是区别在于，mapper仅仅是接口，我们不需要提供实现类</p></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>bdqn<span class="token punctuation">.</span>mapper</span><span class="token punctuation">;</span>\n\n<span class="token doc-comment comment">/**\n * @ClassName: GameMapper\n * @Description: mapper接口\n * @Date: 2022-09-06 11:23:10\n * @Author: HuangYaoDong\n */</span>\n<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">GameMapper</span> <span class="token punctuation">{</span>\n\n    <span class="token doc-comment comment">/**\n      * 添加游戏\n      *\n      * <span class="token keyword">@date</span> 2022/9/6 11:30\n      * <span class="token keyword">@author</span> HangYaoDong\n      * <span class="token keyword">@return</span> int 受影响的行数\n      */</span>\n    <span class="token keyword">int</span> <span class="token function">insertGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div>',3),E=(0,t._)("details",{class:"custom-container details"},[(0,t._)("summary",null,"点击查看示例"),(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"7.png",originSrc:"https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/7.png",data:"aurora"})])],-1),M=(0,t.uE)('<h3 id="创建mybatis的映射文件" tabindex="-1"><a class="header-anchor" href="#创建mybatis的映射文件" aria-hidden="true">#</a> 创建MyBatis的映射文件</h3><div class="custom-container tip"><p class="custom-container-title">相关概念</p><p>ORM（Object Relationship Mapping）对象关系映射</p><ul><li>对象：Java的实体类对象</li><li>关系：关系型数据库</li><li>映射：二者之间的对应关系</li></ul></div><table><thead><tr><th style="text-align:center;">Java概念</th><th style="text-align:center;">数据库概念</th></tr></thead><tbody><tr><td style="text-align:center;">类</td><td style="text-align:center;">表</td></tr><tr><td style="text-align:center;">属性</td><td style="text-align:center;">字段/列</td></tr><tr><td style="text-align:center;">对象</td><td style="text-align:center;">记录/行</td></tr></tbody></table><p><span style="color:red;"><strong>映射文件的命名规则</strong></span>：与接口同名的xml文件</p><p>MyBatis中可以面向接口操作数据，但是要保证接口及映射文件的一致：</p><ul><li>mapper接口的全路径名（包名+类名）和映射文件的命名空间（namespace）保持一致</li><li>mapper接口中方法的方法名和映射文件中编写SQL的标签的id属性保持一致</li></ul><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>  \n<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span>  \n<span class="token name">PUBLIC</span> <span class="token string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span>  \n<span class="token string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span><span class="token punctuation">&gt;</span></span>  \n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cn.bdqn.mapper.GameMapper<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>  \n\t<span class="token comment">&lt;!--int insertGame();--&gt;</span>  \n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>insertGame<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>  \n\t\tinsert into games(username,password,type,company,year) values(&#39;test4&#39;,&#39;123456&#39;,&#39;FPS&#39;,&#39;未知&#39;,&#39;2022&#39;)  \n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">&gt;</span></span>  \n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div>',7),T=(0,t._)("details",{class:"custom-container details"},[(0,t._)("summary",null,"点击查看示例"),(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"8.png",originSrc:"https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/8.png",data:"aurora"})]),(0,t._)("div",{class:"custom-container warning"},[(0,t._)("p",{class:"custom-container-title"},"注意"),(0,t._)("p",null,[(0,t.Uk)("添加"),(0,t._)("code",null,"<insert></insert>"),(0,t.Uk)("，修改"),(0,t._)("code",null,"<update></update>"),(0,t.Uk)("，删除"),(0,t._)("code",null,"<delete></delete>"),(0,t.Uk)("三个标签的返回值默认都是"),(0,t._)("span",{style:{}},[(0,t._)("strong",null,"int")]),(0,t.Uk)("类型")])])],-1),U=(0,t.uE)('<h3 id="注册-引入-映射文件" tabindex="-1"><a class="header-anchor" href="#注册-引入-映射文件" aria-hidden="true">#</a> 注册（引入）映射文件</h3><p>我们在映射文件中定义完SQL映射语句之后，首先，我们需要告诉mybatis到哪里去找到这些语句。但是，在自动查找资源方面，Java并没有提供一个很好的解决方案，所以最好的方法就是直接告诉mybatis到哪里去找映射文件，如下：</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mapper/GameMapper.xml<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>',3),B=(0,t._)("details",{class:"custom-container details"},[(0,t._)("summary",null,"点击查看解析"),(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"9.png",originSrc:"https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/9.png",data:"aurora"})])],-1),F=(0,t._)("p",null,"mybatis给我们提供了四种注册映射文件的方式，详情请点击下方查看：",-1),j=(0,t._)("details",{class:"custom-container details"},[(0,t._)("summary",null,[(0,t.Uk)("点击查看"),(0,t._)("span",{style:{color:"red"}},"映射器（mappers）"),(0,t.Uk)("详细配置")]),(0,t._)("h4",{id:"_1、resource",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#_1、resource","aria-hidden":"true"},"#"),(0,t.Uk)(" 1、resource")]),(0,t._)("p",null,[(0,t.Uk)("resource中填写的路径是针对于编译后映射文件的所处位置，可从编译文件夹中查看，idea是"),(0,t._)("code",null,"out"),(0,t.Uk)("文件夹。")]),(0,t._)("p",null,"若映射文件处于资源文件夹(resources)中时，resource属性中填写的就是映射文件与resources的相对路径。"),(0,t._)("p",null,"若映射文件处于java文件夹其下，那resource属性中填写的就是映射文件与java的相对路径，注意，在此环境下包名也算是文件夹，需要以路径的形式写入。"),(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"10.png",originSrc:"https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/10.png",data:"aurora"})]),(0,t._)("h4",{id:"_2、url",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#_2、url","aria-hidden":"true"},"#"),(0,t.Uk)(" 2、url")]),(0,t._)("p",null,"直接使用对于mybatis映射文件的绝对路径或者相对路径，这个使用的比较少，仅做了解扩展即可"),(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"11.png",originSrc:"https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/11.png",data:"aurora"})]),(0,t._)("h4",{id:"_3、class",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#_3、class","aria-hidden":"true"},"#"),(0,t.Uk)(" 3、class")]),(0,t._)("p",null,"class属性比较特殊，他是直接注册当前接口，一般来讲都是在无映射文件的时候直接在接口的方法上方使用注解进行开发才会用到的，例如："),(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"12.png",originSrc:"https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/12.png",data:"aurora"})]),(0,t._)("p",null,[(0,t._)("span",{style:{color:"red"}},[(0,t._)("strong",null,"不推荐使用此种模式开发，因为当遇到复杂sql的时候整个sql语句会显得特别杂乱，不好维护")])]),(0,t._)("h4",{id:"_4、package标签",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#_4、package标签","aria-hidden":"true"},"#"),(0,t.Uk)(" 4、package标签")]),(0,t._)("p",null,"以上三种方式都是只要你有一个接口或者一个映射文件就必须要去mybatis配置文件中注册一次，也就是说如果你有100个接口，那么你就要写100次"),(0,t._)("p",null,[(0,t._)("code",null,'<mapper resource="">'),(0,t.Uk)("标签")]),(0,t._)("p",null,"这样太过于繁琐，并且也不利于维护，所以mybatis给我们提供了一种批量注册的方式，虽然说局限性有点儿大"),(0,t._)("p",null,"首先，要使用package标签必须保证："),(0,t._)("ol",null,[(0,t._)("li",null,"当前所有的接口及映射文件必须位于同一个包下"),(0,t._)("li",null,"映射文件的名称必须和接口类名一致")]),(0,t._)("p",null,"当满足以上条件时，我们只需要在package标签的name属性中填入接口及映射文件所在的全路径包名即可， 并且无论有多少个接口都能够实现自动注册"),(0,t._)("p",null,"方式一："),(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"13.png",originSrc:"https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/13.png",data:"aurora"})]),(0,t._)("p",null,"方式二："),(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"19.png",originSrc:"https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/19.png",data:"aurora"})]),(0,t._)("div",{class:"custom-container warning"},[(0,t._)("p",{class:"custom-container-title"},"提示"),(0,t._)("p",null,"因为mybatis的判定方式是编译后的文件夹，所以我们可以直接在Resources中使用相同目录的方式让映射文件与接口处于同一个包下")])],-1),G=(0,t.uE)('<h3 id="通过junit测试功能-main方法也可以" tabindex="-1"><a class="header-anchor" href="#通过junit测试功能-main方法也可以" aria-hidden="true">#</a> 通过Junit测试功能(main方法也可以)</h3><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>通过Junit的<code>@Test</code>注解可以实现类似于main方法一样的运行，无需通过服务器编译调用</p><p>使用方式也简单，只需把<code>@Test</code>注解加在你要调用的方法上方即可</p></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>bdqn<span class="token punctuation">.</span>mapper</span><span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Resources</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span></span><span class="token class-name">SqlSession</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span></span><span class="token class-name">SqlSessionFactory</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span></span><span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span><span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStream</span><span class="token punctuation">;</span>\n\n<span class="token doc-comment comment">/**\n * @ClassName: UserMapperTest\n * @Description: 测试类\n * @Date: 2022-09-07 08:50:08\n * @Author: HuangYaoDong\n */</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GameMapperTest</span> <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@Test</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testInsertGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n        <span class="token comment">//读取mybatis的核心配置文件</span>\n        <span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">&quot;mybatis-config.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//获取SqlSessionFactoryBuilder对象（工厂构建者）</span>\n        <span class="token class-name">SqlSessionFactoryBuilder</span> sqlSessionFactoryBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//通过核心配置文件所对应的字节输入流创建工厂类SqlSessionFactory，生产SqlSession对象</span>\n        <span class="token class-name">SqlSessionFactory</span> sqlSessionFactory <span class="token operator">=</span> sqlSessionFactoryBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//获取SqlSession，此时通过SqlSession对象所操作的sql都必须手动提交或者回滚事务</span>\n        <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//通过代理模式创建GameMapper接口的代理实现类对象</span>\n        <span class="token class-name">GameMapper</span> gameMapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">GameMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//调用UserMapper接口中的方法，就可以根据UserMapper的全类名匹配元素文件，通过调用的方法名匹配映射文件中的SQL标签，并执行标签中的SQL语句</span>\n        <span class="token keyword">int</span> i <span class="token operator">=</span> gameMapper<span class="token punctuation">.</span><span class="token function">insertGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//提交事务，SqlSession默认是手动提交事务，即增删改不提交事务则数据库中不生效</span>\n        sqlSession<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;数据库受影响行数：&quot;</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">&quot;行&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br></div></div><p>执行后控制台显示：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>数据库受影响行数：<span class="token number">1</span>行\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',5),L=(0,t._)("details",{class:"custom-container details"},[(0,t._)("summary",null,"点击查看解析"),(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"14.png",originSrc:"https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/14.png",data:"aurora"})]),(0,t._)("h4",{id:"步骤一",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#步骤一","aria-hidden":"true"},"#"),(0,t.Uk)(" 步骤一：")]),(0,t._)("p",null,[(0,t.Uk)("​ 使用Resources.getResourceAsStream读取"),(0,t._)("code",null,"mybatis-config.xml"),(0,t.Uk)("核心配置文件，这是为了获取到数据库链接以及在配置文件中所注册的映射文件位置")]),(0,t._)("h4",{id:"步骤二",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#步骤二","aria-hidden":"true"},"#"),(0,t.Uk)(" 步骤二：")]),(0,t._)("p",null,"​ 获取工厂构建者SqlSessionFactoryBuilder对象，此对象在全局中唯一的作用就是创建出SqlSessionFactory工厂对象，就好比是一个建筑团队，在一个地方去建造汽车工厂，工厂建造完了之后就不需要建筑团队了，工厂自己本身就可以源源不断的生产汽车，同理SqlSessionFactoryBuilder也是一样，当SqlSessionFactoryBuilder（建筑团队）把SqlSessionFactory（汽车工厂）构建完成之后，SqlSessionFactory就可以源源不断的生产SqlSession（汽车）"),(0,t._)("table",null,[(0,t._)("thead",null,[(0,t._)("tr",null,[(0,t._)("th",{style:{"text-align":"center"}},"对象"),(0,t._)("th",{style:{"text-align":"center"}},"解析")])]),(0,t._)("tbody",null,[(0,t._)("tr",null,[(0,t._)("td",{style:{"text-align":"center"}},"SqlSessionFactoryBuilder"),(0,t._)("td",{style:{"text-align":"center"}},"通过读取到的配置文件来构建SqlSessionFactory")]),(0,t._)("tr",null,[(0,t._)("td",{style:{"text-align":"center"}},"SqlSessionFactory"),(0,t._)("td",{style:{"text-align":"center"}},"SqlSession工厂，专门用来生产SqlSession的")]),(0,t._)("tr",null,[(0,t._)("td",{style:{"text-align":"center"}},"SqlSession"),(0,t._)("td",{style:{"text-align":"center"}},"完全包含以数据库为背景的所有执行SQL操作的方法")])])]),(0,t._)("p",null,"总而言之，在绝大多数的时候，SqlSessionFactoryBuilder在全局中只会执行一次，所以大部分人都会把他设置为一个单例对象"),(0,t._)("h4",{id:"步骤三",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#步骤三","aria-hidden":"true"},"#"),(0,t.Uk)(" 步骤三：")]),(0,t._)("p",null,"​ 通过代理模式创建GameMapper接口的代理实现类对象，使用SqlSession对象的实例获取到我们所要去调用的mapper接口，并且通过代理的方式将该类的实现获取到，直接调用其中的方法就可执行映射文件中对应的sql语句并返回结果"),(0,t._)("p",null,[(0,t.Uk)("​ 但是需要注意，此时若是执行"),(0,t._)("span",{style:{color:"red"}},"增删改"),(0,t.Uk)("操作的话，需要手动提交事务才能让数据持久化到数据库中。若想实现自动提交事务可将事务交由mybatis进行管理，只需在初始化SqlSession对象时加上一个参数即可，如下：")]),(0,t._)("div",{class:"language-java ext-java line-numbers-mode"},[(0,t._)("pre",{class:"language-java"},[(0,t._)("code",null,[(0,t._)("span",{class:"token comment"},"//创建SqlSession对象，此时通过SqlSession对象所操作的sql都会自动提交  "),(0,t.Uk)("\n"),(0,t._)("span",{class:"token class-name"},"SqlSession"),(0,t.Uk)(" sqlSession "),(0,t._)("span",{class:"token operator"},"="),(0,t.Uk)(" sqlSessionFactory"),(0,t._)("span",{class:"token punctuation"},"."),(0,t._)("span",{class:"token function"},"openSession"),(0,t._)("span",{class:"token punctuation"},"("),(0,t._)("span",{class:"token boolean"},"true"),(0,t._)("span",{class:"token punctuation"},")"),(0,t._)("span",{class:"token punctuation"},";"),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br")])]),(0,t._)("div",{class:"custom-container tip"},[(0,t._)("p",{class:"custom-container-title"},"步骤总结"),(0,t._)("ol",null,[(0,t._)("li",null,"读取mybatis-config.xml核心配置文件"),(0,t._)("li",null,"创建SqlSessionFactoryBuilder对象"),(0,t._)("li",null,"创建SqlSessionFactory对象"),(0,t._)("li",null,"创建SqlSession对象"),(0,t._)("li",null,"通过sqlSession.getMapper()方法获取mapper接口实例"),(0,t._)("li",null,"调用方法并返回值")])])],-1),I=(0,t._)("details",{class:"custom-container details"},[(0,t._)("summary",null,"常见报错"),(0,t._)("h4",{id:"_1、-test注解爆红无法使用",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#_1、-test注解爆红无法使用","aria-hidden":"true"},"#"),(0,t.Uk)(" 1、"),(0,t._)("code",null,"@Test"),(0,t.Uk)("注解爆红无法使用")]),(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"15.png",originSrc:"https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/15.png",data:"aurora"})]),(0,t._)("p",null,"解决方式：检查pom.xml中是否有导入对应的依赖"),(0,t._)("div",{class:"language-xml ext-xml line-numbers-mode"},[(0,t._)("pre",{class:"language-xml"},[(0,t._)("code",null,[(0,t._)("span",{class:"token comment"},"\x3c!-- junit测试 --\x3e"),(0,t.Uk)("\n"),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"<"),(0,t.Uk)("dependency")]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"<"),(0,t.Uk)("groupId")]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)("junit"),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"</"),(0,t.Uk)("groupId")]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"<"),(0,t.Uk)("artifactId")]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)("junit"),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"</"),(0,t.Uk)("artifactId")]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)("\n    "),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"<"),(0,t.Uk)("version")]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)("4.12"),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"</"),(0,t.Uk)("version")]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)("\n"),(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token tag"},[(0,t._)("span",{class:"token punctuation"},"</"),(0,t.Uk)("dependency")]),(0,t._)("span",{class:"token punctuation"},">")]),(0,t.Uk)("\n")])]),(0,t._)("div",{class:"line-numbers"},[(0,t._)("span",{class:"line-number"},"1"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"2"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"3"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"4"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"5"),(0,t._)("br"),(0,t._)("span",{class:"line-number"},"6"),(0,t._)("br")])]),(0,t._)("h4",{id:"_2、resources无法调用getresourceasstream方法-方法爆红",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#_2、resources无法调用getresourceasstream方法-方法爆红","aria-hidden":"true"},"#"),(0,t.Uk)(" 2、Resources无法调用getResourceAsStream方法，方法爆红")]),(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"16.png",originSrc:"https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/16.png",data:"aurora"})]),(0,t._)("p",null,[(0,t.Uk)("解决方式：根本原因在于Resources引入错误，Resources应该是要在"),(0,t._)("code",null,"org.apache.ibatis.io.Resources"),(0,t.Uk)("下的才对")]),(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"17.png",originSrc:"https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/17.png",data:"aurora"})]),(0,t._)("h4",{id:"_3、明明已经执行了-也没有报错-数据库的数据却没有更新",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#_3、明明已经执行了-也没有报错-数据库的数据却没有更新","aria-hidden":"true"},"#"),(0,t.Uk)(" 3、明明已经执行了，也没有报错，数据库的数据却没有更新")]),(0,t._)("p",null,"解决方式：检查是否开启事务自动提交，若未开启则尝试手动提交事务，详情请自行查看上方解析"),(0,t._)("h4",{id:"_4、报错-type-interface-cn-bdqn-mapper-gamemapper-is-not-known-to-the-mapperregistry",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#_4、报错-type-interface-cn-bdqn-mapper-gamemapper-is-not-known-to-the-mapperregistry","aria-hidden":"true"},"#"),(0,t.Uk)(" 4、报错："),(0,t._)("span",{style:{color:"red"}},"Type interface cn.bdqn.mapper.GameMapper is not known to the MapperRegistry")]),(0,t._)("p",null,"报错原因：MapperRegistry找不到cn.bdqn.mapper.GameMapper，mybatis核心配置文件中没有注册该映射文件"),(0,t._)("p",null,"解决方式：注册一下映射文件即可"),(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"18.png",originSrc:"https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/18.png",data:"aurora"})])],-1),O=(0,t.uE)('<h2 id="核心配置文件详解" tabindex="-1"><a class="header-anchor" href="#核心配置文件详解" aria-hidden="true">#</a> 核心配置文件详解</h2><div class="custom-container tip"><p class="custom-container-title">核心配置文件</p><p>核心配置文件中的标签必须按照固定的顺序(有的标签可以不写，但顺序一定不能乱)从上往下的顺序依次为：</p><p>properties、settings、typeAliases、typeHandlers、objectFactory、objectWrapperFactory、reflectorFactory、plugins、environments、databaseIdProvider、mappers</p></div><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>\n<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">configuration</span>\n        <span class="token name">PUBLIC</span> <span class="token string">&quot;-//MyBatis.org//DTD Config 3.0//EN&quot;</span>\n        <span class="token string">&quot;http://MyBatis.org/dtd/MyBatis-3-config.dtd&quot;</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>\n    <span class="token comment">&lt;!--引入properties文件，此时就可以${属性名}的方式访问属性值--&gt;</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>jdbc.properties<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">&gt;</span></span>\n        <span class="token comment">&lt;!--将表中字段的下划线自动转换为驼峰--&gt;</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mapUnderscoreToCamelCase<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n        <span class="token comment">&lt;!--开启延迟加载--&gt;</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>lazyLoadingEnabled<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">&gt;</span></span>\n        <span class="token comment">&lt;!--\n        typeAlias：设置某个具体的类型的别名\n        属性：\n        type：需要设置别名的类型的全类名\n        alias：设置此类型的别名，且别名不区分大小写。若不设置此属性，该类型拥有默认的别名，即类名\n        --&gt;</span>\n        <span class="token comment">&lt;!--&lt;typeAlias type=&quot;cn.bdqn.model.Game&quot;&gt;&lt;/typeAlias&gt;--&gt;</span>\n        <span class="token comment">&lt;!--&lt;typeAlias type=&quot;cn.bdqn.model.Game&quot; alias=&quot;game&quot;&gt;\n        &lt;/typeAlias&gt;--&gt;</span>\n        <span class="token comment">&lt;!--以包为单位，设置改包下所有的类型都拥有默认的别名，即类名且不区分大小写--&gt;</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cn.bdqn.model<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">&gt;</span></span>\n    <span class="token comment">&lt;!--\n    environments：设置多个连接数据库的环境\n    属性：\n\t    default：设置默认使用的环境的id\n    --&gt;</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mysql_test<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n        <span class="token comment">&lt;!--\n        environment：设置具体的连接数据库的环境信息\n        属性：\n\t        id：设置环境的唯一标识，可通过environments标签中的default设置某一个环境的id，表示默认使用的环境\n        --&gt;</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mysql_test<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n            <span class="token comment">&lt;!--\n            transactionManager：设置事务管理方式\n            属性：\n\t            type：设置事务管理方式，type=&quot;JDBC|MANAGED&quot;\n\t            type=&quot;JDBC&quot;：设置当前环境的事务管理都必须手动处理\n\t            type=&quot;MANAGED&quot;：设置事务被管理，例如spring中的AOP\n            --&gt;</span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>JDBC<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n            <span class="token comment">&lt;!--\n            dataSource：设置数据源\n            属性：\n\t            type：设置数据源的类型，type=&quot;POOLED|UNPOOLED|JNDI&quot;\n\t            type=&quot;POOLED&quot;：使用数据库连接池，即会将创建的连接进行缓存，下次使用可以从缓存中直接获取，不需要重新创建\n\t            type=&quot;UNPOOLED&quot;：不使用数据库连接池，即每次使用连接都需要重新创建\n\t            type=&quot;JNDI&quot;：调用上下文中的数据源\n            --&gt;</span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>POOLED<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n                <span class="token comment">&lt;!--设置驱动类的全类名--&gt;</span>\n                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>driver<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>${jdbc.driver}<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n                <span class="token comment">&lt;!--设置连接数据库的连接地址--&gt;</span>\n                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>url<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>${jdbc.url}<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n                <span class="token comment">&lt;!--设置连接数据库的用户名--&gt;</span>\n                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>username<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>${jdbc.username}<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n                <span class="token comment">&lt;!--设置连接数据库的密码--&gt;</span>\n                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>password<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>${jdbc.password}<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">&gt;</span></span>\n    <span class="token comment">&lt;!--引入映射文件--&gt;</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">&gt;</span></span>\n        <span class="token comment">&lt;!-- &lt;mapper resource=&quot;GameMapper.xml&quot;/&gt; --&gt;</span>\n        <span class="token comment">&lt;!--\n        以包为单位，将包下所有的映射文件引入核心配置文件\n        注意：\n\t\t\t1. 此方式必须保证mapper接口和mapper映射文件必须在相同的包下\n\t\t\t2. mapper接口要和mapper映射文件的名字一致\n        --&gt;</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cn.bdqn.mapper<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br></div></div><h2 id="默认的类型别名" tabindex="-1"><a class="header-anchor" href="#默认的类型别名" aria-hidden="true">#</a> 默认的类型别名</h2><h3 id="基本数据类型映射" tabindex="-1"><a class="header-anchor" href="#基本数据类型映射" aria-hidden="true">#</a> 基本数据类型映射</h3><table><thead><tr><th style="text-align:center;">Alias(别名)</th><th style="text-align:center;">Mapped Type（对应类型）</th></tr></thead><tbody><tr><td style="text-align:center;">_byte</td><td style="text-align:center;">byte</td></tr><tr><td style="text-align:center;">_long</td><td style="text-align:center;">long</td></tr><tr><td style="text-align:center;">_short</td><td style="text-align:center;">short</td></tr><tr><td style="text-align:center;">_int</td><td style="text-align:center;">int</td></tr><tr><td style="text-align:center;">_integer</td><td style="text-align:center;">int</td></tr><tr><td style="text-align:center;">_double</td><td style="text-align:center;">double</td></tr><tr><td style="text-align:center;">_float</td><td style="text-align:center;">float</td></tr><tr><td style="text-align:center;">_boolean</td><td style="text-align:center;">boolean</td></tr></tbody></table><h3 id="封装类型映射" tabindex="-1"><a class="header-anchor" href="#封装类型映射" aria-hidden="true">#</a> 封装类型映射</h3><table><thead><tr><th style="text-align:center;">Alias(别名)</th><th style="text-align:center;">Mapped Type（对应类型）</th></tr></thead><tbody><tr><td style="text-align:center;">string</td><td style="text-align:center;">String</td></tr><tr><td style="text-align:center;">byte</td><td style="text-align:center;">Byte</td></tr><tr><td style="text-align:center;">long</td><td style="text-align:center;">Long</td></tr><tr><td style="text-align:center;">short</td><td style="text-align:center;">Short</td></tr><tr><td style="text-align:center;">int</td><td style="text-align:center;">Integer</td></tr><tr><td style="text-align:center;">integer</td><td style="text-align:center;">Integer</td></tr><tr><td style="text-align:center;">double</td><td style="text-align:center;">Double</td></tr><tr><td style="text-align:center;">float</td><td style="text-align:center;">Float</td></tr><tr><td style="text-align:center;">boolean</td><td style="text-align:center;">Boolean</td></tr><tr><td style="text-align:center;">date</td><td style="text-align:center;">Date</td></tr><tr><td style="text-align:center;">decimal</td><td style="text-align:center;">BigDecimal</td></tr><tr><td style="text-align:center;">bigdecimal</td><td style="text-align:center;">BigDecimal</td></tr><tr><td style="text-align:center;">object</td><td style="text-align:center;">Object</td></tr><tr><td style="text-align:center;">map</td><td style="text-align:center;">Map</td></tr><tr><td style="text-align:center;">hashmap</td><td style="text-align:center;">HashMap</td></tr><tr><td style="text-align:center;">list</td><td style="text-align:center;">List</td></tr><tr><td style="text-align:center;">arraylist</td><td style="text-align:center;">ArrayList</td></tr><tr><td style="text-align:center;">collection</td><td style="text-align:center;">Collection</td></tr><tr><td style="text-align:center;">iterator</td><td style="text-align:center;">Iterator</td></tr></tbody></table><h2 id="mybatis的增删改查" tabindex="-1"><a class="header-anchor" href="#mybatis的增删改查" aria-hidden="true">#</a> MyBatis的增删改查</h2><h3 id="_1、添加" tabindex="-1"><a class="header-anchor" href="#_1、添加" aria-hidden="true">#</a> 1、添加</h3><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token comment">&lt;!-- 接口中的方法 int insertGame();--&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>insertGame<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    insert into games(username,password,type,company,year) values(&#39;test4&#39;,&#39;123456&#39;,&#39;FPS&#39;,&#39;未知&#39;,&#39;2022&#39;)\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="_2、删除" tabindex="-1"><a class="header-anchor" href="#_2、删除" aria-hidden="true">#</a> 2、删除</h3><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token comment">&lt;!-- 接口中的方法 int deleteGame();--&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>deleteGame<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    delete from games where id = 1\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="_3、修改" tabindex="-1"><a class="header-anchor" href="#_3、修改" aria-hidden="true">#</a> 3、修改</h3><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token comment">&lt;!-- 接口中的方法 int updateGame();--&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>updateGame<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    UPDATE `game`.`games` \n    SET `username` = &#39;admin&#39;,\n    `password` = &#39;123456&#39;,\n    `type` = &#39;即时战略&#39;,\n    `company` = &#39;暴雪&#39;,\n    `year` = &#39;1995&#39; \n    WHERE\n    `id` = 1;\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="_4、查询" tabindex="-1"><a class="header-anchor" href="#_4、查询" aria-hidden="true">#</a> 4、查询</h3><div class="custom-container warning"><p class="custom-container-title">注意</p><p>查询的标签select相比于其他标签比较特殊，添加、删除、修改的返回值都是受影响的行数所以类型都为int类型，但是查询不一样，查询的返回类型是多变的，通常情况下mybatis是不知道你要返回的数据是什么类型的，所以需要我们手动去指定</p><p>查询的标签必须设置属性<code>resultType</code>或者<code>resultMap</code>,用来指定实体类与数据库表的映射关系，其实这一步骤相当于我们之前的ResultSet设置实体类，只不过mybatis帮我们做了这一件事情，我们只需要设置返回类型，其余映射的mybatis会自动帮我们完成</p></div><div class="custom-container warning"><p class="custom-container-title">resultType与resultMap的区别</p><p>resultType采用的是自动映射，也就是说只要你实体类的属性名称与数据库表的列名一致，那么mybatis就能够直接进行映射</p><p>resultMap是为自定义映射，通常用于一对多、多对一的复杂查询，或者实体类属性名与数据库列明不一致的情况</p></div><h4 id="查询单条数据" tabindex="-1"><a class="header-anchor" href="#查询单条数据" aria-hidden="true">#</a> 查询单条数据</h4><p>创建实体类</p><details class="custom-container details"><summary>点击查看代码</summary><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>bdqn<span class="token punctuation">.</span>model</span><span class="token punctuation">;</span>\n\n<span class="token doc-comment comment">/**\n * @ClassName: Games\n * @Description: Game实体类\n * @Date: 2022-09-07 11:34:01\n * @Author: HuangYaoDong\n */</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Game</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> type<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> company<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> year<span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> id<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> username<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>username <span class="token operator">=</span> username<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> password<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token class-name">String</span> password<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>password <span class="token operator">=</span> password<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> type<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setType</span><span class="token punctuation">(</span><span class="token class-name">String</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getCompany</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> company<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCompany</span><span class="token punctuation">(</span><span class="token class-name">String</span> company<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>company <span class="token operator">=</span> company<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> year<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setYear</span><span class="token punctuation">(</span><span class="token class-name">String</span> year<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>year <span class="token operator">=</span> year<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token string">&quot;Game{&quot;</span> <span class="token operator">+</span>\n                <span class="token string">&quot;id=&quot;</span> <span class="token operator">+</span> id <span class="token operator">+</span>\n                <span class="token string">&quot;, username=&#39;&quot;</span> <span class="token operator">+</span> username <span class="token operator">+</span> <span class="token char">&#39;\\&#39;&#39;</span> <span class="token operator">+</span>\n                <span class="token string">&quot;, password=&#39;&quot;</span> <span class="token operator">+</span> password <span class="token operator">+</span> <span class="token char">&#39;\\&#39;&#39;</span> <span class="token operator">+</span>\n                <span class="token string">&quot;, type=&#39;&quot;</span> <span class="token operator">+</span> type <span class="token operator">+</span> <span class="token char">&#39;\\&#39;&#39;</span> <span class="token operator">+</span>\n                <span class="token string">&quot;, company=&#39;&quot;</span> <span class="token operator">+</span> company <span class="token operator">+</span> <span class="token char">&#39;\\&#39;&#39;</span> <span class="token operator">+</span>\n                <span class="token string">&quot;, year=&#39;&quot;</span> <span class="token operator">+</span> year <span class="token operator">+</span> <span class="token char">&#39;\\&#39;&#39;</span> <span class="token operator">+</span>\n                <span class="token char">&#39;}&#39;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br></div></div></details><p>编写mapper接口代码</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token doc-comment comment">/**\n  * 查询单条数据\n  *\n  * <span class="token keyword">@date</span> 2022/9/7 11:37\n  * <span class="token keyword">@author</span> HangYaoDong\n  * <span class="token keyword">@return</span> cn.bdqn.model.Game 游戏信息\n  */</span>\n<span class="token class-name">Game</span> <span class="token function">selectOneGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>编写mapper映射文件</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectOneGame<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cn.bdqn.model.Game<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    select * from games limit 1\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>测试：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testInsertGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n    <span class="token comment">//读取mybatis的核心配置文件</span>\n    <span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">&quot;mybatis-config.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//获取SqlSessionFactoryBuilder对象（工厂构建者）</span>\n    <span class="token class-name">SqlSessionFactoryBuilder</span> sqlSessionFactoryBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//通过核心配置文件所对应的字节输入流创建工厂类SqlSessionFactory，生产SqlSession对象</span>\n    <span class="token class-name">SqlSessionFactory</span> sqlSessionFactory <span class="token operator">=</span> sqlSessionFactoryBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//获取SqlSession，此时通过SqlSession对象所操作的sql都必须手动提交或者回滚事务</span>\n    <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//通过代理模式创建GameMapper接口的代理实现类对象</span>\n    <span class="token class-name">GameMapper</span> gameMapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">GameMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//调用UserMapper接口中的方法，就可以根据UserMapper的全类名匹配元素文件，通过调用的方法名匹配映射文件中的SQL标签，并执行标签中的SQL语句</span>\n    <span class="token class-name">Game</span> game <span class="token operator">=</span> gameMapper<span class="token punctuation">.</span><span class="token function">selectOneGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>game<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>运行结果：</p>',28),C=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"20.png",originSrc:"https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/20.png",data:"aurora"})],-1),D=(0,t._)("details",{class:"custom-container details"},[(0,t._)("summary",null,"点击查看详细解析"),(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"21.png",originSrc:"https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/21.png",data:"aurora"})])],-1),z=(0,t.uE)('<h4 id="查询多条数据" tabindex="-1"><a class="header-anchor" href="#查询多条数据" aria-hidden="true">#</a> 查询多条数据</h4><div class="custom-container warning"><p class="custom-container-title">返回值</p><p>当查询的数据为多条时，不能使用实体类作为返回值，只能使用集合，否则会抛出异常<span style="color:red;"><strong>TooManyResultsException</strong></span>,但若查询的数据只有一条时，可以使用实体类或者集合作为返回类型</p></div><p>编写mapper接口代码</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token doc-comment comment">/**\n  * 查询多条数据\n  *\n  * <span class="token keyword">@date</span> 2022/9/7 11:55\n  * <span class="token keyword">@author</span> HangYaoDong\n  * <span class="token keyword">@return</span> java.util.List<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cn.bdqn.model.Game</span><span class="token punctuation">&gt;</span></span> 游戏信息集合\n  */</span>\n<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Game</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectGameList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>编写mapper映射文件</p><div class="custom-container warning"><p class="custom-container-title">resultType返回值</p><p>查询多条数据的时候，接口中方法返回值必须为集合，resultType内的值为集合的泛型，mybatis会自动进行数据填充</p></div><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectGameList<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cn.bdqn.model.Game<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    select * from games\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>测试</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testInsertGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n    <span class="token comment">//读取mybatis的核心配置文件</span>\n    <span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">&quot;mybatis-config.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//获取SqlSessionFactoryBuilder对象（工厂构建者）</span>\n    <span class="token class-name">SqlSessionFactoryBuilder</span> sqlSessionFactoryBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//通过核心配置文件所对应的字节输入流创建工厂类SqlSessionFactory，生产SqlSession对象</span>\n    <span class="token class-name">SqlSessionFactory</span> sqlSessionFactory <span class="token operator">=</span> sqlSessionFactoryBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//获取SqlSession，此时通过SqlSession对象所操作的sql都必须手动提交或者回滚事务</span>\n    <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//通过代理模式创建GameMapper接口的代理实现类对象</span>\n    <span class="token class-name">GameMapper</span> gameMapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">GameMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//调用UserMapper接口中的方法，就可以根据UserMapper的全类名匹配元素文件，通过调用的方法名匹配映射文件中的SQL标签，并执行标签中的SQL语句</span>\n    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Game</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> gameMapper<span class="token punctuation">.</span><span class="token function">selectGameList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//提交事务，SqlSession默认是手动提交事务，即增删改不提交事务则数据库中不生效</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Game</span> game <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>game<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>运行结果：</p>',10),R=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"22.png",originSrc:"https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/22.png",data:"aurora"})],-1),N=(0,t.uE)('<h2 id="mybatis获取参数值的两种方式-重点" tabindex="-1"><a class="header-anchor" href="#mybatis获取参数值的两种方式-重点" aria-hidden="true">#</a> MyBatis获取参数值的两种方式（<span style="color:red;">重点</span>）</h2><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>以上我们所进行的操作全部都是直接在sql中把值定死的，但是实际开发中这么去写显然是不合理的</p><p>mybatis给我们提供了两种方式进行传参，分别是<code>${}</code>与<code>#{}</code></p><p><code>${}</code>的本质就是字符串拼接，<code>${}</code>使用字符串拼接的方式拼接sql，若为字符串类型或日期类型的字段进行赋值时，需要手动加单引号</p><p><code>#{}</code>的本质就是字符串替换，<code>#{}</code>使用占位符赋值的方式拼接sql，此时为字符串类型或日期类型的字段进行赋值时，可以自动添加单引号</p></div><div class="custom-container danger"><p class="custom-container-title">警告</p><p>我们之前在学习JDBC的时候就已经讲过了，在程序中最好不要使用<code>${}</code>也就是字符串拼接，因为这种拼接方式是有被SQL注入的风险的，所以一般来讲我们在开发的时候用的都是<code>#{}</code>字符串替换</p></div><h3 id="单个字面量类型的参数" tabindex="-1"><a class="header-anchor" href="#单个字面量类型的参数" aria-hidden="true">#</a> 单个字面量类型的参数</h3>',4),P=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"23.png",originSrc:"https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/23.png",data:"aurora"})],-1),J=(0,t.uE)('<details class="custom-container details"><summary>使用${}方式传参，仅演示一次，因使用次数较少不过多演示</summary><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token comment">&lt;!--Game selectGameByName(String name);--&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectGameByName<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Game<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>  \n\tselect * from games where name = &#39;${name}&#39;  \n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></details><h3 id="多个字面量类型的参数" tabindex="-1"><a class="header-anchor" href="#多个字面量类型的参数" aria-hidden="true">#</a> 多个字面量类型的参数</h3><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>当mapper接口中的参数为多个时，mybatis会自动将这些参数放在一个map集合当中，在这个由参数组成的map集合里，key划分为两种，分别是：</p><ol><li>以<code>arg0</code>,<code>arg1</code>...为键（key），以参数为值（value）</li><li>以<code>param1</code>，<code>param2</code>...为键（key），以参数为值（value）</li></ol><p>因此，我们只需要通过<code>${}</code>或<code>#{}</code>来访问map集合的键就可以获取到对应的值，注意如果你使用的是${}的话记得手动加上单引号</p><p>使用arg或者param都行，但是要注意的是：</p><ol><li>arg是从起始索引0开始计算的，假设现在有两个参数需要调用，按照从左往右的顺序，第一个参数就是arg0，第二个参数就是arg1以此类推</li><li>param是从参数位置1开始计算的，假设现在有两个参数需要调用，按照从左往右的顺序，第一个参数就是param1，第二个参数就是param2以此类推</li></ol></div><div class="custom-container danger"><p class="custom-container-title">警告</p><p>当你有多个参数，并且保持默认状态没有指定各参数的标识名称时，是无法直接使用参数名称来进行调用的，可调用方式仅局限于arg及param</p></div><p>使用arg的方式进行参数调用：</p>',5),H=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"24.png",originSrc:"https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/24.png",data:"aurora"})],-1),Q=(0,t.uE)('<div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token comment">&lt;!-- Game selectGameByName(String name,String type) --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectGameByName<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cn.bdqn.model.Game<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    select * from games where username = #{arg0} and type = #{arg1}\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>使用param的方式进行参数调用：</p>',2),Y=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"25.png",originSrc:"https://bdqn-blog.oss-accelerate.aliyuncs.com/blog/Mybatis%E8%AF%A6%E8%A7%A3/25.png",data:"aurora"})],-1),$=(0,t.uE)('<div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token comment">&lt;!-- Game selectGameByName(String name,String type) --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectGameByName<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cn.bdqn.model.Game<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    select * from games where username = #{param1} and type = #{param2}\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>',1),W={},K=(0,a(3744).Z)(W,[["render",function(n,s){const a=(0,t.up)("ExternalLinkIcon");return(0,t.wg)(),(0,t.iD)(t.HY,null,[p,(0,t._)("p",null,[e,(0,t._)("a",l,[c,(0,t.Wm)(a)])]),o,u,(0,t._)("p",null,[i,(0,t._)("a",r,[k,(0,t.Wm)(a)])]),m,b,d,(0,t._)("details",g,[y,h,v,q,_,(0,t._)("p",null,[(0,t._)("a",S,[x,(0,t.Wm)(a)])])]),f,A,w,E,M,T,U,B,F,j,G,L,I,O,C,D,z,R,N,P,J,H,Q,Y,$],64)}]])}}]);